import{C as q,M as g,a as d,S as f,b as D,B as X,P as $,G as _,c as C,d as x,e as z,D as Re,V as v,f as M,g as y,F as b,h as T,A as k,i as P,j as Ce,O as Je,R as ft,k as J,l as Fe,m as oe,n as U,o as F,T as De,p as ve,H as Ie,q as Le,r as Ae,s as yt,t as O,N as et,u as _e,W as Qe,v as vt,w as Ke,L as pe,x as tt,y as wt,z as bt,E as xt,I as w,J as kt,K as St,Q as Mt,U as Ee,X as Ct,Y as ne,Z as fe,_ as ye,$ as _t,a0 as ae,a1 as Et,a2 as Ze,a3 as Tt,a4 as Pt,a5 as Dt}from"./three-CA_qZ599.js";import{W as At,N as zt,M as ie,C as Te,P as Ye,B as Pe,a as ge,V as B,b as Rt,S as Xe,R as Ft}from"./cannon-DPZWuR6y.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();class It{constructor(e){this.scene=e,this.mesh=null,this.baseStats={maxHp:100,maxMp:100,attack:15,defense:10,speed:5},this.stats={hp:100,maxHp:100,mp:100,maxMp:100,attack:15,defense:10,speed:5,level:1,exp:0,expToNext:100},this.skillEffects={},this.moveForward=!1,this.moveBackward=!1,this.moveLeft=!1,this.moveRight=!1,this.lastAttackTime=0,this.attackCooldown=.5}async init(){const e=new q(.5,1.5,8,16),t=new g({color:10309341,emissive:4853370,emissiveIntensity:.3,metalness:.3,roughness:.7});this.mesh=new d(e,t),this.mesh.position.set(0,1,0),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0;const s=new f(.8,16,16),i=new D({color:13073919,transparent:!0,opacity:.2,side:X}),a=new d(s,i);a.position.y=.5,this.mesh.add(a),this.scene.add(this.mesh),console.log("👤 Player initialized")}update(e){const t=this.stats.speed*e;let s=!1;if(this.moveForward&&(this.mesh.position.z-=t,s=!0),this.moveBackward&&(this.mesh.position.z+=t,s=!0),this.moveLeft&&(this.mesh.position.x-=t,s=!0),this.moveRight&&(this.mesh.position.x+=t,s=!0),s){const i=Math.abs(Math.sin(Date.now()*.01))*.15;this.mesh.position.y=1+i;const a=this.moveForward?.1:this.moveBackward?-.1:0;this.mesh.rotation.x+=(a-this.mesh.rotation.x)*.1}else this.mesh.position.y+=(1-this.mesh.position.y)*.1,this.mesh.rotation.x*=.9;if(this.stats.mp<this.stats.maxMp&&(this.stats.mp=Math.min(this.stats.maxMp,this.stats.mp+5*e)),this.mesh.children[0]){this.mesh.children[0].rotation.y+=e*1.5;const i=1+Math.sin(Date.now()*.003)*.15;this.mesh.children[0].scale.set(i,i,i);const a=.2+Math.sin(Date.now()*.002)*.1;this.mesh.children[0].material.opacity=a}}attack(){const e=Date.now()/1e3;e-this.lastAttackTime<this.attackCooldown||(this.lastAttackTime=e,console.log("⚔️ Player attacks!"))}takeDamage(e){const t=Math.max(1,e-this.stats.defense);this.stats.hp=Math.max(0,this.stats.hp-t);const s=this.mesh.material.color.clone();this.mesh.material.color.setHex(16711680),setTimeout(()=>{this.mesh.material.color.copy(s)},100),this.stats.hp<=0&&this.die()}heal(e){this.stats.hp=Math.min(this.stats.maxHp,this.stats.hp+e),console.log(`💚 Healed for ${e} HP`)}gainExp(e){this.stats.exp+=e,this.stats.exp>=this.stats.expToNext&&this.levelUp()}levelUp(){this.stats.level++,this.stats.exp=0,this.stats.expToNext=Math.floor(this.stats.expToNext*1.5),this.baseStats.maxHp+=20,this.baseStats.maxMp+=15,this.baseStats.attack+=3,this.baseStats.defense+=2,this.stats.maxHp+=20,this.stats.maxMp+=15,this.stats.hp=this.stats.maxHp,this.stats.mp=this.stats.maxMp,this.stats.attack+=3,this.stats.defense+=2,console.log(`🌟 Level Up! Now level ${this.stats.level}`),window.gameEngine&&window.gameEngine.audioSystem&&window.gameEngine.audioSystem.playSoundEffect("level_up"),window.gameEngine&&window.gameEngine.particleSystem&&window.gameEngine.particleSystem.createLevelUpEffect(this.mesh.position),window.gameEngine&&window.gameEngine.achievementSystem&&window.gameEngine.achievementSystem.onLevelReached(this.stats.level),window.gameEngine&&window.gameEngine.skillTreeSystem&&window.gameEngine.skillTreeSystem.updateSkillPoints(),window.gameEngine&&window.gameEngine.characterCustomization&&window.gameEngine.characterCustomization.checkUnlocks(),window.gameEngine&&window.gameEngine.questSystem&&window.gameEngine.questSystem.onLevelUp(this.stats.level),window.gameEngine&&window.gameEngine.saveSystem&&window.gameEngine.saveSystem.saveGame("Level up")}die(){console.log("💀 Player defeated"),window.gameEngine&&window.gameEngine.endlessMode&&window.gameEngine.endlessMode.endRun(!1)}}class st{constructor(){this.companions=this.initializeCompanions(),this.activeCompanion=null}initializeCompanions(){return{smoke_siren:{id:"smoke_siren",name:"Smoke Siren",type:"charm",description:"A charm-based sorceress who clouds enemies' minds with enchanting smoke",stats:{power:85,defense:60,speed:75,charisma:95},ability:{name:"Mind Cloud",description:"Confuses enemies in an area, reducing their accuracy",cooldown:15,manaCost:40},isOnCooldown:!1,unlocked:!0},blade_muse:{id:"blade_muse",name:"Blade Muse",type:"fighter",description:"An acrobatic fighter powered by rhythm and motion",stats:{power:90,defense:70,speed:95,charisma:80},ability:{name:"Rhythm Strike",description:"A chain of rapid attacks that crescendo in power",cooldown:12,manaCost:35},isOnCooldown:!1,unlocked:!0},herb_witch:{id:"herb_witch",name:"Herb Witch",type:"alchemist",description:"An alchemist cultivating greenfire crystals and healing herbs",stats:{power:70,defense:65,speed:60,charisma:85},ability:{name:"Greenfire Burst",description:"Heals allies and damages enemies with mystical herbs",cooldown:18,manaCost:45},isOnCooldown:!1,unlocked:!1},cyber_dryad:{id:"cyber_dryad",name:"Cyber Dryad",type:"techno-mage",description:"A forest spirit laced with luminous tech veins, bridging nature and technology",stats:{power:88,defense:75,speed:82,charisma:90},ability:{name:"Tech-Nature Fusion",description:"Summons digital vines that drain enemy energy",cooldown:20,manaCost:50},isOnCooldown:!1,unlocked:!1}}}setActiveCompanion(e){return this.companions[e]&&this.companions[e].unlocked?(this.activeCompanion=e,console.log(`💜 Active companion: ${this.companions[e].name}`),!0):!1}getActiveCompanion(){return this.activeCompanion?this.companions[this.activeCompanion]:null}unlockCompanion(e){return this.companions[e]?(this.companions[e].unlocked=!0,console.log(`✨ Unlocked companion: ${this.companions[e].name}`),!0):!1}getAllCompanions(){return Object.values(this.companions)}getUnlockedCompanions(){return Object.values(this.companions).filter(e=>e.unlocked)}}const W={smoke_siren:h=>{console.log("💨 Smoke Siren uses Mind Cloud!"),h.enemyManager.getEnemies().forEach(t=>{t.isAlive&&(t.mesh.userData.confused=!0,setTimeout(()=>{t.mesh&&t.mesh.userData&&(t.mesh.userData.confused=!1)},5e3))})},blade_muse:h=>{console.log("⚔️ Blade Muse performs Rhythm Strike!");let e=0;h.enemyManager.getEnemies().slice(0,3).forEach(s=>{s.isAlive&&(setTimeout(()=>{s.takeDamage(30),!s.isAlive&&h.player&&(h.player.gainExp(s.stats.exp),h.endlessMode&&h.endlessMode.onEnemyDefeated(),h.dropLoot(s),h.questSystem&&h.questSystem.onEnemyDefeated(s.isBoss))},e),e+=200)})},herb_witch:h=>{console.log("🌿 Herb Witch casts Greenfire Burst!"),h.player&&h.player.heal(40),h.enemyManager.getEnemies().forEach(t=>{t.isAlive&&(t.takeDamage(20),!t.isAlive&&h.player&&(h.player.gainExp(t.stats.exp),h.endlessMode&&h.endlessMode.onEnemyDefeated(),h.dropLoot(t),h.questSystem&&h.questSystem.onEnemyDefeated(t.isBoss)))})},cyber_dryad:h=>{console.log("⚡ Cyber Dryad activates Tech-Nature Fusion!"),h.enemyManager.getEnemies().forEach(t=>{t.isAlive&&(t.takeDamage(25),h.player&&h.player.stats.mp<h.player.stats.maxMp&&(h.player.stats.mp+=10),!t.isAlive&&h.player&&(h.player.gainExp(t.stats.exp),h.endlessMode&&h.endlessMode.onEnemyDefeated(),h.dropLoot(t),h.questSystem&&h.questSystem.onEnemyDefeated(t.isBoss)))})}};st.prototype.initializeCompanions=function(){return{smoke_siren:{id:"smoke_siren",name:"Smoke Siren",type:"charm",description:"A charm-based sorceress who clouds enemies' minds with enchanting smoke",stats:{power:85,defense:60,speed:75,charisma:95},ability:{name:"Mind Cloud",description:"Confuses enemies in an area, reducing their accuracy",cooldown:15,manaCost:40},isOnCooldown:!1,unlocked:!0,useAbility:function(e){!this.isOnCooldown&&W[this.id]&&(W[this.id](e),this.isOnCooldown=!0,setTimeout(()=>{this.isOnCooldown=!1,e.updateCompanionUI&&e.updateCompanionUI()},this.ability.cooldown*1e3))}},blade_muse:{id:"blade_muse",name:"Blade Muse",type:"fighter",description:"An acrobatic fighter powered by rhythm and motion",stats:{power:90,defense:70,speed:95,charisma:80},ability:{name:"Rhythm Strike",description:"A chain of rapid attacks that crescendo in power",cooldown:12,manaCost:35},isOnCooldown:!1,unlocked:!0,useAbility:function(e){!this.isOnCooldown&&W[this.id]&&(W[this.id](e),this.isOnCooldown=!0,setTimeout(()=>{this.isOnCooldown=!1,e.updateCompanionUI&&e.updateCompanionUI()},this.ability.cooldown*1e3))}},herb_witch:{id:"herb_witch",name:"Herb Witch",type:"alchemist",description:"An alchemist cultivating greenfire crystals and healing herbs",stats:{power:70,defense:65,speed:60,charisma:85},ability:{name:"Greenfire Burst",description:"Heals allies and damages enemies with mystical herbs",cooldown:18,manaCost:45},isOnCooldown:!1,unlocked:!1,useAbility:function(e){!this.isOnCooldown&&W[this.id]&&(W[this.id](e),this.isOnCooldown=!0,setTimeout(()=>{this.isOnCooldown=!1,e.updateCompanionUI&&e.updateCompanionUI()},this.ability.cooldown*1e3))}},cyber_dryad:{id:"cyber_dryad",name:"Cyber Dryad",type:"techno-mage",description:"A forest spirit laced with luminous tech veins, bridging nature and technology",stats:{power:88,defense:75,speed:82,charisma:90},ability:{name:"Tech-Nature Fusion",description:"Summons digital vines that drain enemy energy",cooldown:20,manaCost:50},isOnCooldown:!1,unlocked:!1,useAbility:function(e){!this.isOnCooldown&&W[this.id]&&(W[this.id](e),this.isOnCooldown=!0,setTimeout(()=>{this.isOnCooldown=!1,e.updateCompanionUI&&e.updateCompanionUI()},this.ability.cooldown*1e3))}}}};class Lt{constructor(){this.biomes={crystal_cavern:{name:"Crystal Caverns",description:"Glowing crystalline caves pulsing with arcane energy",colors:{floor:4853370,wall:7473591,accent:13073919},difficulty:1},fungal_city:{name:"Fungal City",description:"An ancient civilization overtaken by bioluminescent mushrooms",colors:{floor:2976335,wall:1786674,accent:5420936},difficulty:2},vine_cathedral:{name:"Vine Cathedral",description:"A once-holy place now wrapped in living vines",colors:{floor:3824192,wall:3427905,accent:5800279},difficulty:3},broken_starship:{name:"Broken Starship",description:"The crashed remains of an interdimensional vessel",colors:{floor:1710638,wall:996448,accent:1450302},difficulty:4},twilight_throne:{name:"Twilight Throne",description:"The corrupted heart of the Dynasty of Emberveil",colors:{floor:2951758,wall:1703987,accent:10309341},difficulty:5}}}generate(e,t=1){const s=this.biomes[e]||this.biomes.crystal_cavern,i=30+t*5,a={name:s.name,biome:e,level:t,size:i,floor:null,walls:null,decorations:[],spawnPoints:[],bossRoom:null};return a.floor=this.createFloor(i,s.colors.floor),a.walls=this.createWalls(i,s.colors.wall),a.decorations=this.createDecorations(s,i),a.spawnPoints=this.createSpawnPoints(i,5+t),console.log(`🏰 Generated dungeon: ${a.name} (Level ${t})`),a}createFloor(e,t){const s=new $(e,e),i=new g({color:t,roughness:.8,metalness:.2}),a=new d(s,i);return a.rotation.x=-Math.PI/2,a.receiveShadow=!0,a}createWalls(e,t){const s=new _,i=8,a=.5,n=new g({color:t,roughness:.7,metalness:.3}),o=new d(new C(e,i,a),n);o.position.set(0,i/2,-e/2),o.castShadow=!0,o.receiveShadow=!0,s.add(o);const r=new d(new C(e,i,a),n);r.position.set(0,i/2,e/2),r.castShadow=!0,r.receiveShadow=!0,s.add(r);const l=new d(new C(a,i,e),n);l.position.set(e/2,i/2,0),l.castShadow=!0,l.receiveShadow=!0,s.add(l);const c=new d(new C(a,i,e),n);return c.position.set(-e/2,i/2,0),c.castShadow=!0,c.receiveShadow=!0,s.add(c),s}createDecorations(e,t){const s=[],i=Math.floor(Math.random()*10)+10;for(let a=0;a<i;a++){const n=this.createDecoration(e);n.position.set((Math.random()-.5)*(t-10),0,(Math.random()-.5)*(t-10)),s.push(n)}return s}createDecoration(e){const t=Math.random();if(t<.3){const s=new x(.5,.6,4,8),i=new g({color:e.colors.accent,emissive:e.colors.accent,emissiveIntensity:.2}),a=new d(s,i);return a.position.y=2,a.castShadow=!0,a.receiveShadow=!0,a}else if(t<.6){const s=new z(.5,2,6),i=new g({color:e.colors.accent,emissive:e.colors.accent,emissiveIntensity:.4,transparent:!0,opacity:.8}),a=new d(s,i);return a.position.y=1,a.castShadow=!0,a}else{const s=new Re(.8,0),i=new g({color:e.colors.wall,roughness:1}),a=new d(s,i);return a.position.y=.4,a.castShadow=!0,a.receiveShadow=!0,a}}createSpawnPoints(e,t){const s=[];for(let a=0;a<t;a++)s.push(new v((Math.random()-.5)*(e-10),1,(Math.random()-.5)*(e-10)));return s}}class Bt{constructor(e){this.engine=e,this.combatLog=[]}update(e){}dealDamage(e,t,s){const i=Math.max(1,s-(t.defense||0));return t.takeDamage?t.takeDamage(i):t.userData&&(t.userData.hp=Math.max(0,t.userData.hp-i),t.userData.hp<=0&&(t.userData.isAlive=!1)),this.logCombat(`${e.name||"Attacker"} deals ${i} damage to ${t.name||"Enemy"}`),i}calculateCritical(e,t){return Math.random()<.15?(this.logCombat("💥 CRITICAL HIT!"),t*2):t}logCombat(e){this.combatLog.push({message:e,timestamp:Date.now()}),this.combatLog.length>20&&this.combatLog.shift(),console.log(`⚔️ ${e}`)}getCombatLog(){return this.combatLog}}class $t{constructor(e){this.scene=e,this.particleGroups=[]}createSmokeBurst(e){const s=new M,i=[],a=[],n=[];for(let l=0;l<50;l++){i.push(e.x+(Math.random()-.5)*2,e.y+Math.random()*2,e.z+(Math.random()-.5)*2);const c=new y(10309341);a.push(c.r,c.g,c.b),n.push((Math.random()-.5)*2,Math.random()*3,(Math.random()-.5)*2)}s.setAttribute("position",new b(i,3)),s.setAttribute("color",new b(a,3));const o=new T({size:.3,vertexColors:!0,transparent:!0,opacity:.8,blending:k}),r=new P(s,o);this.scene.add(r),this.particleGroups.push({mesh:r,velocities:n,life:1,maxLife:1})}createHealEffect(e){const s=new M,i=[],a=[];for(let r=0;r<30;r++){i.push(e.x+(Math.random()-.5),e.y+Math.random()*3,e.z+(Math.random()-.5));const l=new y(5420936);a.push(l.r,l.g,l.b)}s.setAttribute("position",new b(i,3)),s.setAttribute("color",new b(a,3));const n=new T({size:.2,vertexColors:!0,transparent:!0,opacity:1}),o=new P(s,n);this.scene.add(o),this.particleGroups.push({mesh:o,velocities:new Array(90).fill(0).map(()=>(Math.random()-.5)*.5),life:.8,maxLife:.8})}createLevelUpEffect(e){const s=new M,i=[],a=[],n=[];for(let l=0;l<100;l++){const c=l/100*Math.PI*2,m=2;i.push(e.x+Math.cos(c)*m,e.y+1,e.z+Math.sin(c)*m);const u=new y(16766474);a.push(u.r,u.g,u.b),n.push(Math.cos(c)*3,Math.random()*5+2,Math.sin(c)*3)}s.setAttribute("position",new b(i,3)),s.setAttribute("color",new b(a,3));const o=new T({size:.4,vertexColors:!0,transparent:!0,opacity:1,blending:k}),r=new P(s,o);this.scene.add(r),this.particleGroups.push({mesh:r,velocities:n,life:1.5,maxLife:1.5})}createHitEffect(e,t=16713796){const i=new M,a=[],n=[],o=[];for(let c=0;c<20;c++){a.push(e.x+(Math.random()-.5)*.5,e.y+(Math.random()-.5)*.5,e.z+(Math.random()-.5)*.5);const m=new y(t);n.push(m.r,m.g,m.b),o.push((Math.random()-.5)*4,(Math.random()-.5)*4,(Math.random()-.5)*4)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const r=new T({size:.3,vertexColors:!0,transparent:!0,opacity:1,blending:k}),l=new P(i,r);this.scene.add(l),this.particleGroups.push({mesh:l,velocities:o,life:.5,maxLife:.5})}createTeleportEffect(e,t){const i=new M,a=[],n=[],o=[];for(let c=0;c<60;c++){const m=c/60;a.push(Ce.lerp(e.x,t.x,m)+(Math.random()-.5),Ce.lerp(e.y,t.y,m)+(Math.random()-.5),Ce.lerp(e.z,t.z,m)+(Math.random()-.5));const u=new y(Math.random()>.5?10309341:6737151);n.push(u.r,u.g,u.b),o.push((Math.random()-.5)*2,Math.random()*2,(Math.random()-.5)*2)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const r=new T({size:.35,vertexColors:!0,transparent:!0,opacity:1,blending:k}),l=new P(i,r);this.scene.add(l),this.particleGroups.push({mesh:l,velocities:o,life:.8,maxLife:.8})}createBossAppearEffect(e){const s=new M,i=[],a=[],n=[];for(let l=0;l<200;l++){i.push(e.x+(Math.random()-.5)*15,e.y+Math.random()*10,e.z+(Math.random()-.5)*15);const c=new y(Math.random()>.5?16766474:16713796);a.push(c.r,c.g,c.b),n.push((Math.random()-.5)*5,Math.random()*8+2,(Math.random()-.5)*5)}s.setAttribute("position",new b(i,3)),s.setAttribute("color",new b(a,3));const o=new T({size:.5,vertexColors:!0,transparent:!0,opacity:1,blending:k}),r=new P(s,o);this.scene.add(r),this.particleGroups.push({mesh:r,velocities:n,life:2,maxLife:2})}createComboEffect(e,t){const s=30+t*10,i=new M,a=[],n=[],o=[];let r=16777215;t>=3&&(r=16766474),t>=5&&(r=16713796),t>=10&&(r=16711935);for(let m=0;m<s;m++){a.push(e.x+(Math.random()-.5)*2,e.y+Math.random()*3+1,e.z+(Math.random()-.5)*2);const u=new y(r);n.push(u.r,u.g,u.b),o.push((Math.random()-.5)*3,Math.random()*5+2,(Math.random()-.5)*3)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const l=new T({size:.3+t*.05,vertexColors:!0,transparent:!0,opacity:1,blending:k}),c=new P(i,l);this.scene.add(c),this.particleGroups.push({mesh:c,velocities:o,life:1,maxLife:1})}update(e){for(let t=this.particleGroups.length-1;t>=0;t--){const s=this.particleGroups[t];if(s.life-=e,s.life<=0){this.scene.remove(s.mesh),s.mesh.geometry.dispose(),s.mesh.material.dispose(),this.particleGroups.splice(t,1);continue}const i=s.mesh.geometry.attributes.position.array;for(let n=0;n<i.length;n+=3)i[n]+=s.velocities[n]*e,i[n+1]+=s.velocities[n+1]*e,i[n+2]+=s.velocities[n+2]*e,s.velocities[n+1]-=2*e;s.mesh.geometry.attributes.position.needsUpdate=!0;const a=s.life/s.maxLife;s.mesh.material.opacity=a}}}class ze{constructor(e,t,s){this.scene=e,this.type=t,this.mesh=null,this.isAlive=!0,this.types={corrupted_angel:{name:"Corrupted Angel",color:16777215,emissive:16739229,hp:80,attack:20,defense:15,speed:3,exp:50},weed_golem:{name:"Weed-Fueled Golem",color:5420936,emissive:2976335,hp:120,attack:25,defense:25,speed:2,exp:75},shadow_bard:{name:"Shadow Bard",color:1703987,emissive:10309341,hp:60,attack:30,defense:10,speed:5,exp:60},smoke_imp:{name:"Smoke Imp",color:7473591,emissive:13073919,hp:40,attack:15,defense:8,speed:6,exp:30},essence_wraith:{name:"Essence Wraith",color:4853370,emissive:14723839,hp:70,attack:22,defense:12,speed:4,exp:55}},this.stats={...this.types[t]},this.maxHp=this.stats.hp,this.lastAttackTime=0,this.attackCooldown=1,this.isFlashing=!1,this.fadeProgress=1,this.init(s)}init(e){const t=this.getGeometryForType(),s=new g({color:this.stats.color,emissive:this.stats.emissive,emissiveIntensity:.5,metalness:.3,roughness:.7});this.mesh=new d(t,s),this.mesh.position.copy(e),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0;const i=new f(1.2,16,16),a=new D({color:this.stats.emissive,transparent:!0,opacity:.15,side:X}),n=new d(i,a);this.mesh.add(n),this.mesh.userData={type:"enemy",enemyType:this.type,hp:this.stats.hp,maxHp:this.maxHp,attack:this.stats.attack,defense:this.stats.defense,speed:this.stats.speed,exp:this.stats.exp,isAlive:!0,enemy:this},this.scene.add(this.mesh)}getGeometryForType(){switch(this.type){case"corrupted_angel":return new z(.8,2.5,6);case"weed_golem":return new C(1.5,2.5,1.5);case"shadow_bard":return new x(.4,.5,2,8);case"smoke_imp":return new f(.6,12,12);case"essence_wraith":return new Je(.8,0);default:return new C(1,2,1)}}update(e,t){if(!(!this.isAlive||!this.mesh)){if(this.fadeProgress<1){if(this.fadeProgress-=e*2,this.fadeProgress<=0){this.scene.remove(this.mesh),this.mesh.geometry&&this.mesh.geometry.dispose(),this.mesh.material&&this.mesh.material.dispose();return}this.mesh.material.transparent=!0,this.mesh.material.opacity=this.fadeProgress;return}if(this.isFlashing&&(this.isFlashing=!1,this.mesh.material.color.copy(this.originalColor)),t&&t.mesh){const s=new v;s.subVectors(t.mesh.position,this.mesh.position),s.normalize(),this.mesh.position.add(s.multiplyScalar(this.stats.speed*e)),this.mesh.lookAt(t.mesh.position)}if(this.mesh.children[0]){this.mesh.children[0].rotation.y+=e*2;const s=1+Math.sin(Date.now()*.003)*.15;this.mesh.children[0].scale.set(s,s,s)}}}takeDamage(e){if(!this.isAlive)return;const t=Math.max(1,e-this.stats.defense);return this.stats.hp=Math.max(0,this.stats.hp-t),this.mesh.userData.hp=this.stats.hp,this.isFlashing||(this.isFlashing=!0,this.originalColor=this.mesh.material.color.clone(),this.mesh.material.color.setHex(16711680)),this.stats.hp<=0&&this.die(),t}die(){if(this.isAlive=!1,this.mesh.userData.isAlive=!1,this.fadeProgress=1,this.scene&&this.scene.userData&&this.scene.userData.gameEngine){const e=this.scene.userData.gameEngine;if(e.craftingSystem){const t=e.craftingSystem.dropMaterialsFromEnemy(this);t&&t.length>0&&console.log(`💎 Materials dropped: ${t.map(s=>`${s.material.name} x${s.amount}`).join(", ")}`)}}return this.stats.exp}attackPlayer(e){if(!this.isAlive||!e)return;const t=Date.now()/1e3;if(t-this.lastAttackTime<this.attackCooldown)return;this.mesh.position.distanceTo(e.mesh.position)<2&&(e.takeDamage(this.stats.attack),this.lastAttackTime=t)}}class Gt extends ze{constructor(e,t,s){super(e,t,s),this.isBoss=!0,this.phase=1,this.maxPhases=3,this.phaseThresholds=[.66,.33],this.stats.hp*=10,this.stats.attack*=2,this.stats.defense*=2,this.stats.exp*=10,this.maxHp=this.stats.hp,this.specialAbilities=this.getSpecialAbilities(),this.abilityTimer=0,this.abilityCooldown=5,this.mesh.scale.set(2,2,2),this.addBossIndicator(),console.log(`👑 Boss spawned: ${this.stats.name}`)}getSpecialAbilities(){const e={corrupted_angel:[{name:"Divine Judgment",damage:50,effect:"aoe"},{name:"Holy Smite",damage:40,effect:"targeted"},{name:"Purifying Light",damage:30,effect:"heal"}],weed_golem:[{name:"Root Slam",damage:60,effect:"aoe"},{name:"Toxic Spores",damage:25,effect:"dot"},{name:"Nature's Wrath",damage:45,effect:"summon"}],shadow_bard:[{name:"Death Song",damage:35,effect:"aoe"},{name:"Shadow Melody",damage:40,effect:"confusion"},{name:"Crescendo",damage:70,effect:"charged"}],smoke_imp:[{name:"Smoke Bomb",damage:30,effect:"blind"},{name:"Toxic Cloud",damage:20,effect:"dot"},{name:"Imp Swarm",damage:35,effect:"summon"}],essence_wraith:[{name:"Soul Drain",damage:45,effect:"drain"},{name:"Essence Burst",damage:50,effect:"aoe"},{name:"Spirit Form",damage:0,effect:"invulnerable"}]};return e[this.type]||e.smoke_imp}addBossIndicator(){const e=new ft(2,2.3,32),t=new D({color:16766474,side:J,transparent:!0,opacity:.7}),s=new d(e,t);s.rotation.x=-Math.PI/2,s.position.y=.1,this.mesh.add(s),this.mesh.userData.ring=s,this.mesh.userData.ringRotation=0}update(e,t){super.update(e,t),this.isAlive&&(this.checkPhaseTransition(),this.abilityTimer+=e,this.abilityTimer>=this.abilityCooldown&&(this.useSpecialAbility(t),this.abilityTimer=0),this.mesh.userData.ring&&(this.mesh.userData.ringRotation+=e,this.mesh.userData.ring.rotation.z=this.mesh.userData.ringRotation))}checkPhaseTransition(){const e=this.stats.hp/this.maxHp;this.phase===1&&e<=this.phaseThresholds[0]?this.enterPhase(2):this.phase===2&&e<=this.phaseThresholds[1]&&this.enterPhase(3)}enterPhase(e){this.phase=e,console.log(`👑 ${this.stats.name} enters Phase ${e}!`),this.stats.attack*=1.3,this.stats.speed*=1.2,this.abilityCooldown*=.8,this.mesh.material.emissiveIntensity=.8+e*.2,this.showPhaseNotification(e)}useSpecialAbility(e){if(!e||!this.specialAbilities)return;const t=this.specialAbilities[Math.floor(Math.random()*this.specialAbilities.length)];switch(console.log(`👑 ${this.stats.name} uses ${t.name}!`),t.effect){case"aoe":this.mesh.position.distanceTo(e.mesh.position)<10&&e.takeDamage(t.damage);break;case"targeted":e.takeDamage(t.damage);break;case"heal":this.stats.hp=Math.min(this.maxHp,this.stats.hp+t.damage);break;case"drain":e.takeDamage(t.damage),this.stats.hp=Math.min(this.maxHp,this.stats.hp+t.damage/2);break}this.showAbilityNotification(t.name)}showPhaseNotification(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 215, 0, 0.9);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 30px 50px;
            color: #1a0033;
            font-size: 2.5em;
            font-weight: bold;
            z-index: 9999;
            animation: bossPhase 3s ease-out;
            box-shadow: 0 0 40px #ffd60a;
        `,t.textContent=`⚠️ PHASE ${e} ⚠️`,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},3e3)}showAbilityNotification(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 30%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(157, 78, 221, 0.9);
            border: 2px solid #c77dff;
            border-radius: 10px;
            padding: 15px 30px;
            color: white;
            font-size: 1.5em;
            font-weight: bold;
            z-index: 9999;
            animation: abilityPopup 2s ease-out;
        `,t.textContent=`👑 ${e}`,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},2e3)}takeDamage(e){const t=Math.floor(e*.8);return super.takeDamage(t)}}const it=document.createElement("style");it.textContent=`
    @keyframes bossPhase {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        20% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
    }
    
    @keyframes abilityPopup {
        0% { opacity: 0; transform: translate(-50%, -80px); }
        20% { opacity: 1; transform: translate(-50%, -50%); }
        80% { opacity: 1; transform: translate(-50%, -50%); }
        100% { opacity: 0; transform: translate(-50%, -20px); }
    }
`;document.head.appendChild(it);class qt{constructor(e,t){this.scene=e,this.dungeonGenerator=t,this.enemies=[],this.spawnTimer=0,this.spawnInterval=10,this.maxEnemies=10,this.allEnemyTypes=["smoke_imp","essence_wraith","shadow_bard","corrupted_angel","weed_golem"]}spawnEnemiesForDungeon(e,t){const s=this.getEnemyTypesForBiome(e.biome);let i=0;for(let a=0;a<t&&this.enemies.length<this.maxEnemies;a++){const n=e.spawnPoints[a%e.spawnPoints.length],o=s[Math.floor(Math.random()*s.length)],r=new ze(this.scene,o,n);this.enemies.push(r),i++}console.log(`👾 Spawned ${i} enemies in ${e.name}`)}getEnemyTypesForBiome(e){return{crystal_cavern:["smoke_imp","essence_wraith"],fungal_city:["weed_golem","essence_wraith"],vine_cathedral:["corrupted_angel","shadow_bard"],broken_starship:["essence_wraith","shadow_bard"],twilight_throne:["corrupted_angel","shadow_bard","weed_golem"]}[e]||["smoke_imp"]}update(e,t){for(let s=this.enemies.length-1;s>=0;s--){const i=this.enemies[s];if(!i.isAlive){this.enemies.splice(s,1);continue}i.update(e,t),i.attackPlayer(t)}this.spawnTimer+=e,this.spawnTimer>=this.spawnInterval&&this.enemies.length<this.maxEnemies&&(this.spawnRandomEnemy(),this.spawnTimer=0)}spawnRandomEnemy(){const e=this.allEnemyTypes[Math.floor(Math.random()*this.allEnemyTypes.length)],t=Math.random()*Math.PI*2,s=15+Math.random()*5,i=new v(Math.cos(t)*s,1,Math.sin(t)*s),a=new ze(this.scene,e,i);this.enemies.push(a)}spawnBoss(e){const s={crystal_cavern:"essence_wraith",fungal_city:"weed_golem",vine_cathedral:"corrupted_angel",broken_starship:"shadow_bard",twilight_throne:"corrupted_angel"}[e.biome]||"corrupted_angel",i=new v(0,1,0),a=new Gt(this.scene,s,i);this.enemies.push(a),console.log(`👑 Boss spawned: ${a.stats.name} in ${e.name}`),this.showBossIntro(a.stats.name)}showBossIntro(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #1a0033, #4a0e7a);
            border: 3px solid #ffd60a;
            border-radius: 20px;
            padding: 40px 60px;
            color: #ffd60a;
            font-size: 2.5em;
            font-weight: bold;
            z-index: 9999;
            animation: bossIntro 4s ease-out;
            box-shadow: 0 0 60px #ffd60a;
            text-align: center;
        `,t.innerHTML=`
            <div style="font-size: 0.6em; color: #c77dff; margin-bottom: 10px;">⚠️ BOSS ENCOUNTER ⚠️</div>
            <div>${e}</div>
            <div style="font-size: 0.5em; color: #e0aaff; margin-top: 10px;">Prepare for Battle!</div>
        `,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&(t.style.animation="fadeOut 0.5s ease-out",setTimeout(()=>{document.body.removeChild(t)},500))},3500)}getEnemies(){return this.enemies}clearAllEnemies(){this.enemies.forEach(e=>{e.mesh&&this.scene.remove(e.mesh)}),this.enemies=[]}}const at=document.createElement("style");at.textContent=`
    @keyframes bossIntro {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        20% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
    }
`;document.head.appendChild(at);class Ot{constructor(e){this.engine=e,this.currentFloor=1,this.enemiesDefeated=0,this.timeElapsed=0,this.highestFloor=1,this.totalRuns=0,this.isActive=!1,this.difficultyMultiplier=1,this.enemyHealthMultiplier=1,this.enemyDamageMultiplier=1,this.enemySpeedMultiplier=1,this.isBossFloor=!1,this.floorModifier=null,this.initializeUI()}initializeUI(){const e=document.getElementById("ui-overlay"),t=document.createElement("div");t.id="floor-panel",t.className="hud",t.style.cssText="top: 20px; left: 50%; transform: translateX(-50%); text-align: center; min-width: 200px;",t.innerHTML=`
            <div style="font-size: 1.2em; font-weight: bold; color: #c77dff;">
                FLOOR <span id="floor-number">1</span>
            </div>
            <div style="font-size: 0.8em; color: #e0aaff; margin-top: 5px;">
                <span id="enemies-defeated">0</span> Enemies Defeated
            </div>
            <div style="font-size: 0.8em; color: #e0aaff;">
                Time: <span id="time-elapsed">0:00</span>
            </div>
        `,e.appendChild(t)}start(){this.isActive=!0,this.currentFloor=1,this.enemiesDefeated=0,this.timeElapsed=0,this.totalRuns++,this.updateDifficulty(),this.updateUI(),console.log("🎮 Endless Mode Started!")}update(e){this.isActive&&(this.timeElapsed+=e,this.updateUI(),this.engine.achievementSystem&&this.engine.achievementSystem.onTimeElapsed(Math.floor(this.timeElapsed)),this.isFloorCleared()&&this.advanceFloor())}isFloorCleared(){return this.engine.enemyManager.getEnemies().length===0&&this.enemiesDefeated>0}advanceFloor(){this.currentFloor++,this.currentFloor>this.highestFloor&&(this.highestFloor=this.currentFloor),this.engine.questSystem&&this.engine.questSystem.onFloorReached(this.currentFloor),this.isBossFloor=this.currentFloor%5===0,this.applyFloorModifier(),this.updateDifficulty(),this.generateFloor(),this.showFloorTransition(),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Floor completion"),console.log(`⬆️ Advanced to Floor ${this.currentFloor}`)}updateDifficulty(){this.difficultyMultiplier=1+this.currentFloor*.1,this.enemyHealthMultiplier=1+this.currentFloor*.15,this.enemyDamageMultiplier=1+this.currentFloor*.08,this.enemySpeedMultiplier=Math.min(2,1+this.currentFloor*.05)}applyFloorModifier(){const e=[{name:"Speed Boost",effect:"enemy_speed_up"},{name:"Tank Mode",effect:"enemy_health_up"},{name:"Berserker",effect:"enemy_damage_up"},{name:"Swarm",effect:"extra_enemies"},{name:"Elite Guard",effect:"elite_enemies"}];Math.random()<.3?(this.floorModifier=e[Math.floor(Math.random()*e.length)],console.log(`🎲 Floor Modifier: ${this.floorModifier.name}`)):this.floorModifier=null}generateFloor(){this.engine.currentDungeon&&(this.engine.scene.remove(this.engine.currentDungeon.floor),this.engine.scene.remove(this.engine.currentDungeon.walls),this.engine.currentDungeon.decorations&&this.engine.currentDungeon.decorations.forEach(i=>this.engine.scene.remove(i))),this.engine.enemyManager.clearAllEnemies();const e=["crystal_cavern","fungal_city","vine_cathedral","broken_starship","twilight_throne"],t=Math.floor((this.currentFloor-1)/5)%e.length,s=e[t];if(this.engine.currentDungeon=this.engine.dungeonGenerator.generate(s,this.currentFloor),this.engine.loadDungeon(this.engine.currentDungeon),this.engine.audioSystem&&this.engine.audioSystem.playMusic(s),this.engine.achievementSystem&&this.engine.achievementSystem.onFloorReached(this.currentFloor),this.isBossFloor)this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("boss_appear"),this.engine.enemyManager.spawnBoss(this.engine.currentDungeon);else{const i=Math.min(15,5+Math.floor(this.currentFloor/2));let a=i;this.floorModifier&&this.floorModifier.effect==="extra_enemies"&&(a=Math.floor(i*1.5)),this.engine.enemyManager.spawnEnemiesForDungeon(this.engine.currentDungeon,a)}this.applyDifficultyToEnemies()}applyDifficultyToEnemies(){this.engine.enemyManager.getEnemies().forEach(t=>{if(t.stats.hp=Math.floor(t.stats.hp*this.enemyHealthMultiplier),t.maxHp=t.stats.hp,t.stats.attack=Math.floor(t.stats.attack*this.enemyDamageMultiplier),t.stats.speed=t.stats.speed*this.enemySpeedMultiplier,this.floorModifier)switch(this.floorModifier.effect){case"enemy_speed_up":t.stats.speed*=1.5;break;case"enemy_health_up":t.stats.hp*=1.5,t.maxHp=t.stats.hp;break;case"enemy_damage_up":t.stats.attack*=1.5;break;case"elite_enemies":t.stats.hp*=2,t.stats.attack*=1.3,t.maxHp=t.stats.hp,t.mesh.material.emissiveIntensity=.8;break}t.mesh.userData.hp=t.stats.hp})}showFloorTransition(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1a0033 0%, #2d0a4e 50%, #4a0e7a 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            animation: fadeIn 0.3s ease-in;
        `;const t=document.createElement("div");t.style.cssText=`
            font-size: 3em;
            font-weight: bold;
            color: #c77dff;
            margin-bottom: 20px;
        `,t.textContent=`FLOOR ${this.currentFloor}`;const s=document.createElement("div");s.style.cssText=`
            font-size: 1.5em;
            color: #e0aaff;
        `,this.isBossFloor?(s.textContent="⚔️ BOSS FLOOR ⚔️",s.style.color="#ff6b9d"):this.floorModifier?s.textContent=`${this.floorModifier.name}`:s.textContent=this.engine.currentDungeon.name,e.appendChild(t),e.appendChild(s),document.body.appendChild(e),setTimeout(()=>{e.style.animation="fadeOut 0.3s ease-out",setTimeout(()=>{document.body.removeChild(e)},300)},2e3)}updateUI(){const e=document.getElementById("floor-number"),t=document.getElementById("enemies-defeated"),s=document.getElementById("time-elapsed");if(e&&(e.textContent=this.currentFloor),t&&(t.textContent=this.enemiesDefeated),s){const i=Math.floor(this.timeElapsed/60),a=Math.floor(this.timeElapsed%60);s.textContent=`${i}:${a.toString().padStart(2,"0")}`}}onEnemyDefeated(){this.enemiesDefeated++,this.updateUI()}endRun(e=!1){this.isActive=!1,this.showRunSummary(e)}showRunSummary(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;const s=document.createElement("div");s.style.cssText=`
            background: linear-gradient(135deg, #1a0033, #2d0a4e);
            border: 3px solid #9d4edd;
            border-radius: 20px;
            padding: 40px;
            max-width: 500px;
            text-align: center;
            box-shadow: 0 0 40px rgba(157, 78, 221, 0.5);
        `;const i=Math.floor(this.timeElapsed/60),a=Math.floor(this.timeElapsed%60);s.innerHTML=`
            <h1 style="color: ${e?"#52b788":"#ff6b9d"}; font-size: 2.5em; margin-bottom: 20px;">
                ${e?"🎉 VICTORY!":"💀 DEFEATED"}
            </h1>
            <div style="color: #e0aaff; font-size: 1.2em; margin: 10px 0;">
                <strong>Floor Reached:</strong> ${this.currentFloor}
            </div>
            <div style="color: #e0aaff; font-size: 1.2em; margin: 10px 0;">
                <strong>Enemies Defeated:</strong> ${this.enemiesDefeated}
            </div>
            <div style="color: #e0aaff; font-size: 1.2em; margin: 10px 0;">
                <strong>Time Survived:</strong> ${i}:${a.toString().padStart(2,"0")}
            </div>
            <div style="color: #e0aaff; font-size: 1.2em; margin: 10px 0;">
                <strong>Highest Floor:</strong> ${this.highestFloor}
            </div>
            <button id="restart-button" style="
                margin-top: 30px;
                padding: 15px 40px;
                font-size: 1.2em;
                background: linear-gradient(135deg, #9d4edd, #c77dff);
                border: none;
                border-radius: 10px;
                color: white;
                cursor: pointer;
                font-weight: bold;
                box-shadow: 0 4px 15px rgba(157, 78, 221, 0.4);
            ">
                TRY AGAIN
            </button>
        `,t.appendChild(s),document.body.appendChild(t),document.getElementById("restart-button").addEventListener("click",()=>{document.body.removeChild(t),this.restart()})}restart(){this.engine.player&&(this.engine.player.stats.hp=this.engine.player.stats.maxHp,this.engine.player.stats.mp=this.engine.player.stats.maxMp,this.engine.player.mesh.position.set(0,1,0)),this.start(),this.generateFloor()}getStats(){return{currentFloor:this.currentFloor,highestFloor:this.highestFloor,enemiesDefeated:this.enemiesDefeated,timeElapsed:this.timeElapsed,totalRuns:this.totalRuns}}}class Ht{constructor(e){this.engine=e,this.saveKey="dynasty_of_emberveil_save",this.autoSaveInterval=3e4,this.autoSaveTimer=null,this.lastSaveTime=0,this.startAutoSave(),console.log("💾 Save System initialized")}startAutoSave(){this.autoSaveTimer=setInterval(()=>{this.autoSave()},this.autoSaveInterval),window.addEventListener("beforeunload",()=>{this.saveGame("Auto-save on exit")})}stopAutoSave(){this.autoSaveTimer&&(clearInterval(this.autoSaveTimer),this.autoSaveTimer=null)}autoSave(){this.engine.isRunning&&(this.saveGame("Auto-save"),console.log("💾 Auto-saved game"))}saveGame(e="Manual"){try{const t=this.createSaveData();return localStorage.setItem(this.saveKey,JSON.stringify(t)),this.lastSaveTime=Date.now(),this.showSaveIndicator(e),!0}catch(t){return console.error("Failed to save game:",t),!1}}createSaveData(){const e=this.engine.player,t=this.engine.endlessMode,s=this.engine.companionManager,i=this.engine.inventorySystem,a=this.engine.questSystem,n=this.engine.achievementSystem,o=this.engine.audioSystem,r=this.engine.skillTreeSystem,l=this.engine.characterCustomization,c=this.engine.dailyRewards,m=this.engine.tutorialSystem;return{version:"1.0.4",timestamp:Date.now(),saveType:"auto",player:{stats:{hp:e.stats.hp,maxHp:e.stats.maxHp,mp:e.stats.mp,maxMp:e.stats.maxMp,attack:e.stats.attack,defense:e.stats.defense,speed:e.stats.speed,level:e.stats.level,exp:e.stats.exp,expToNext:e.stats.expToNext},baseStats:{maxHp:e.baseStats.maxHp,maxMp:e.baseStats.maxMp,attack:e.baseStats.attack,defense:e.baseStats.defense,speed:e.baseStats.speed},position:{x:e.mesh.position.x,y:e.mesh.position.y,z:e.mesh.position.z}},endlessMode:{currentFloor:t.currentFloor,highestFloor:t.highestFloor,enemiesDefeated:t.enemiesDefeated,timeElapsed:t.timeElapsed,totalRuns:t.totalRuns},companions:{activeCompanion:s.activeCompanion,unlockedCompanions:Object.keys(s.companions).filter(u=>s.companions[u].unlocked)},inventory:i?i.getSaveData():{items:[],equipment:{}},quests:a?a.getSaveData():{activeQuests:[],completedQuests:[],availableQuests:[]},achievements:n?n.getSaveData():{unlockedAchievements:[],progress:{}},audio:o?o.getSaveData():{settings:{}},skills:r?r.getSaveData():{unlockedSkills:[],skillPoints:0},customization:l?l.getSaveData():{current:{},unlockedOptions:{}},dailyRewards:c?c.getSaveData():{},tutorial:m?m.getSaveData():{completed:!1},dungeon:{biome:this.engine.currentDungeon?.biome||"crystal_cavern"}}}loadGame(){try{const e=localStorage.getItem(this.saveKey);if(!e)return console.log("No save data found"),!1;const t=JSON.parse(e);return this.validateSaveData(t)?(this.applySaveData(t),console.log("💾 Game loaded successfully"),this.showLoadIndicator(),!0):(console.error("Invalid save data"),!1)}catch(e){return console.error("Failed to load game:",e),!1}}validateSaveData(e){return e&&e.version&&e.player&&e.endlessMode&&e.companions}applySaveData(e){const t=this.engine.player,s=this.engine.endlessMode,i=this.engine.companionManager,a=this.engine.inventorySystem,n=this.engine.questSystem,o=this.engine.achievementSystem,r=this.engine.audioSystem,l=this.engine.skillTreeSystem,c=this.engine.characterCustomization,m=this.engine.dailyRewards,u=this.engine.tutorialSystem;Object.assign(t.stats,e.player.stats),e.player.baseStats&&Object.assign(t.baseStats,e.player.baseStats),e.player.position&&t.mesh.position.set(e.player.position.x,e.player.position.y,e.player.position.z),s.currentFloor=e.endlessMode.currentFloor,s.highestFloor=e.endlessMode.highestFloor,s.enemiesDefeated=e.endlessMode.enemiesDefeated,s.timeElapsed=e.endlessMode.timeElapsed,s.totalRuns=e.endlessMode.totalRuns,e.companions.unlockedCompanions&&e.companions.unlockedCompanions.forEach(p=>{i.companions[p]&&(i.companions[p].unlocked=!0)}),e.companions.activeCompanion&&i.setActiveCompanion(e.companions.activeCompanion),e.inventory&&a&&a.loadSaveData(e.inventory),e.quests&&n&&n.loadSaveData(e.quests),e.achievements&&o&&o.loadSaveData(e.achievements),e.audio&&r&&r.loadSaveData(e.audio),e.skills&&l&&l.loadSaveData(e.skills),e.customization&&c&&c.loadSaveData(e.customization),e.dailyRewards&&m&&m.loadSaveData(e.dailyRewards),e.tutorial&&u&&(u.loadSaveData(e.tutorial),u.completed||setTimeout(()=>u.start(),2e3)),s.updateUI(),this.engine.updatePlayerUI(),e.quests&&n&&n.loadSaveData(e.quests),e.achievements&&o&&o.loadSaveData(e.achievements),e.audio&&r&&r.loadSaveData(e.audio),e.skills&&l&&l.loadSaveData(e.skills),s.updateUI(),this.engine.updatePlayerUI(),this.engine.updateCompanionUI(),s.updateDifficulty(),s.generateFloor()}deleteSave(){try{return localStorage.removeItem(this.saveKey),console.log("💾 Save data deleted"),!0}catch(e){return console.error("Failed to delete save:",e),!1}}hasSaveData(){return localStorage.getItem(this.saveKey)!==null}getSaveMetadata(){try{const e=localStorage.getItem(this.saveKey);if(!e)return null;const t=JSON.parse(e);return{timestamp:t.timestamp,floor:t.endlessMode.currentFloor,level:t.player.stats.level,playtime:t.endlessMode.timeElapsed}}catch{return null}}exportSave(){try{const e=localStorage.getItem(this.saveKey);if(!e)return null;const t=new Blob([e],{type:"application/json"}),s=URL.createObjectURL(t),i=document.createElement("a");return i.href=s,i.download=`dynasty_save_${Date.now()}.json`,i.click(),URL.revokeObjectURL(s),console.log("💾 Save exported"),!0}catch(e){return console.error("Failed to export save:",e),!1}}importSave(e){return new Promise((t,s)=>{const i=new FileReader;i.onload=a=>{try{const n=JSON.parse(a.target.result);this.validateSaveData(n)?(localStorage.setItem(this.saveKey,a.target.result),console.log("💾 Save imported"),t(!0)):s(new Error("Invalid save file"))}catch(n){s(n)}},i.onerror=()=>s(i.error),i.readAsText(e)})}showSaveIndicator(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 100px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #52b788;
            border-radius: 10px;
            padding: 15px 25px;
            color: #52b788;
            font-size: 1em;
            z-index: 9999;
            animation: fadeInOut 2s ease-in-out;
        `,t.textContent=`💾 ${e}`,document.body.appendChild(t),setTimeout(()=>{document.body.removeChild(t)},2e3)}showLoadIndicator(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 100px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #c77dff;
            border-radius: 10px;
            padding: 15px 25px;
            color: #c77dff;
            font-size: 1em;
            z-index: 9999;
            animation: fadeInOut 2s ease-in-out;
        `,e.textContent="💾 Game Loaded",document.body.appendChild(e),setTimeout(()=>{document.body.removeChild(e)},2e3)}}const nt=document.createElement("style");nt.textContent=`
    @keyframes fadeInOut {
        0% { opacity: 0; transform: translateX(20px); }
        20% { opacity: 1; transform: translateX(0); }
        80% { opacity: 1; transform: translateX(0); }
        100% { opacity: 0; transform: translateX(20px); }
    }
`;document.head.appendChild(nt);class Wt{constructor(e){this.engine=e,this.maxSlots=30,this.items=[],this.equipment={weapon:null,armor:null,accessory1:null,accessory2:null},this.rarities={common:{color:"#ffffff",multiplier:1},uncommon:{color:"#52b788",multiplier:1.2},rare:{color:"#66ccff",multiplier:1.5},epic:{color:"#c77dff",multiplier:2},legendary:{color:"#ffd60a",multiplier:3}},console.log("🎒 Inventory System initialized")}addItem(e){if(this.items.length>=this.maxSlots)return console.log("Inventory full!"),!1;if(e.type==="consumable"){const t=this.items.find(s=>s.id===e.id&&s.stack<s.maxStack);if(t)return t.stack++,this.updateUI(),this.engine.questSystem&&this.engine.questSystem.onItemCollected(),!0}return this.items.push(e),this.updateUI(),this.showItemPickup(e),this.engine.questSystem&&this.engine.questSystem.onItemCollected(),!0}removeItem(e){const t=this.items.findIndex(s=>s.id===e);return t!==-1?(this.items.splice(t,1),this.updateUI(),!0):!1}equipItem(e){const t=this.items.find(s=>s.id===e);return!t||!t.slot?!1:(this.equipment[t.slot]&&this.unequipItem(t.slot),this.equipment[t.slot]=t,this.removeItem(e),this.applyEquipmentStats(t,!0),console.log(`Equipped ${t.name}`),this.updateUI(),!0)}unequipItem(e){const t=this.equipment[e];return t?(this.items.push(t),this.applyEquipmentStats(t,!1),this.equipment[e]=null,console.log(`Unequipped ${t.name}`),this.updateUI(),!0):!1}applyEquipmentStats(e,t){const s=this.engine.player,i=t?1:-1;e.stats&&(e.stats.attack&&(s.stats.attack+=e.stats.attack*i),e.stats.defense&&(s.stats.defense+=e.stats.defense*i),e.stats.maxHp&&(s.stats.maxHp+=e.stats.maxHp*i,t&&(s.stats.hp=Math.min(s.stats.hp,s.stats.maxHp))),e.stats.maxMp&&(s.stats.maxMp+=e.stats.maxMp*i,t&&(s.stats.mp=Math.min(s.stats.mp,s.stats.maxMp))),e.stats.speed&&(s.stats.speed+=e.stats.speed*i)),this.engine.updatePlayerUI()}useConsumable(e){const t=this.items.find(i=>i.id===e);if(!t||t.type!=="consumable")return!1;const s=this.engine.player;return t.effect==="heal_hp"?(s.stats.hp=Math.min(s.stats.hp+t.value,s.stats.maxHp),this.showEffect("❤️ +"+t.value+" HP","#ff6b9d")):t.effect==="restore_mp"?(s.stats.mp=Math.min(s.stats.mp+t.value,s.stats.maxMp),this.showEffect("💙 +"+t.value+" MP","#66ccff")):t.effect==="buff_attack"&&(s.stats.attack+=t.value,setTimeout(()=>{s.stats.attack-=t.value},t.duration*1e3),this.showEffect("⚔️ Attack +"+t.value,"#ffd60a")),t.stack>1?t.stack--:this.removeItem(e),this.engine.updatePlayerUI(),!0}generateLoot(e,t=null){if(!t){const l=Math.random();l<.5?t="common":l<.75?t="uncommon":l<.9?t="rare":l<.97?t="epic":t="legendary"}const s=this.rarities[t],i=10+e*2,a=Math.floor(i*s.multiplier),n=["weapon","armor","accessory","consumable"],o=n[Math.floor(Math.random()*n.length)];let r={id:`item_${Date.now()}_${Math.random()}`,rarity:t,type:o,level:e,color:s.color};switch(o){case"weapon":r.name=this.generateWeaponName(t),r.slot="weapon",r.stats={attack:a};break;case"armor":r.name=this.generateArmorName(t),r.slot="armor",r.stats={defense:a,maxHp:a*5};break;case"accessory":r.name=this.generateAccessoryName(t),r.slot=Math.random()<.5?"accessory1":"accessory2",r.stats={maxMp:a*3,speed:Math.floor(a*.3)};break;case"consumable":const l=[{name:"Health Potion",effect:"heal_hp",value:50},{name:"Mana Potion",effect:"restore_mp",value:50},{name:"Attack Elixir",effect:"buff_attack",value:10,duration:30}],c=l[Math.floor(Math.random()*l.length)];r.name=c.name,r.effect=c.effect,r.value=Math.floor(c.value*s.multiplier),r.duration=c.duration,r.stack=1,r.maxStack=99;break}return r}generateWeaponName(e){const t=["Smoke","Shadow","Crystal","Void","Dream","Twilight"],s=["Blade","Staff","Dagger","Scythe","Wand"],i=["of Power","of Wisdom","of Speed","of the Ancients","of Eternity"],a=t[Math.floor(Math.random()*t.length)],n=s[Math.floor(Math.random()*s.length)];if(e==="legendary"||e==="epic"){const o=i[Math.floor(Math.random()*i.length)];return`${a} ${n} ${o}`}return`${a} ${n}`}generateArmorName(e){const t=["Emberveil","Mystic","Ethereal","Divine","Corrupted"],s=["Robes","Armor","Vestments","Cloak","Mantle"],i=t[Math.floor(Math.random()*t.length)],a=s[Math.floor(Math.random()*s.length)];return`${i} ${a}`}generateAccessoryName(e){const t=["Enchanted","Blessed","Cursed","Ancient","Radiant"],s=["Ring","Amulet","Talisman","Charm","Pendant"],i=t[Math.floor(Math.random()*t.length)],a=s[Math.floor(Math.random()*s.length)];return`${i} ${a}`}showItemPickup(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 150px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid ${e.color};
            border-radius: 10px;
            padding: 15px 30px;
            color: ${e.color};
            font-size: 1.2em;
            font-weight: bold;
            z-index: 9999;
            animation: slideDown 2s ease-out;
            box-shadow: 0 0 20px ${e.color}80;
        `,t.textContent=`✨ ${e.name}`,document.body.appendChild(t),setTimeout(()=>{t.parentNode&&document.body.removeChild(t)},2e3)}showEffect(e,t){const s=document.createElement("div");s.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: ${t};
            font-size: 2em;
            font-weight: bold;
            z-index: 9999;
            animation: floatUp 1s ease-out;
            text-shadow: 0 0 10px ${t};
        `,s.textContent=e,document.body.appendChild(s),setTimeout(()=>{s.parentNode&&document.body.removeChild(s)},1e3)}updateUI(){const e=document.getElementById("inventory-panel");if(e&&e.classList.contains("visible")){const t=window.gameEngine?.inputManager;t&&t.updateInventoryDisplay&&t.updateInventoryDisplay()}}renderInventory(e){e.innerHTML="<h3>Inventory</h3>";const t=document.createElement("div");t.innerHTML="<h4>Equipment</h4>",Object.keys(this.equipment).forEach(i=>{const a=this.equipment[i],n=document.createElement("div");n.textContent=`${i}: ${a?a.name:"Empty"}`,t.appendChild(n)}),e.appendChild(t);const s=document.createElement("div");s.innerHTML="<h4>Items</h4>",this.items.forEach(i=>{const a=document.createElement("div");a.style.color=i.color,a.textContent=i.name+(i.stack?` x${i.stack}`:""),s.appendChild(a)}),e.appendChild(s)}getSaveData(){return{items:this.items,equipment:this.equipment}}loadSaveData(e){e.items&&(this.items=e.items),e.equipment&&(this.equipment=e.equipment),Object.values(this.equipment).forEach(t=>{t&&this.applyEquipmentStats(t,!0)}),this.updateUI()}}const ot=document.createElement("style");ot.textContent=`
    @keyframes slideDown {
        0% { opacity: 0; transform: translate(-50%, -50px); }
        20% { opacity: 1; transform: translate(-50%, 0); }
        80% { opacity: 1; transform: translate(-50%, 0); }
        100% { opacity: 0; transform: translate(-50%, 20px); }
    }
    
    @keyframes floatUp {
        0% { opacity: 0; transform: translate(-50%, -50%); }
        20% { opacity: 1; transform: translate(-50%, -60%); }
        100% { opacity: 0; transform: translate(-50%, -100%); }
    }
`;document.head.appendChild(ot);class Ut{constructor(e){this.engine=e,this.activeQuests=[],this.completedQuests=[],this.availableQuests=[],this.initializeQuests(),this.startQuest("first_steps"),console.log("📜 Quest System initialized")}initializeQuests(){this.questLibrary={first_steps:{id:"first_steps",name:"First Steps",description:"Defeat 5 enemies to prove yourself",objectives:[{type:"kill_enemies",target:5,current:0,text:"Defeat 5 enemies"}],rewards:{exp:100,items:[]},isStarterQuest:!0},floor_climber:{id:"floor_climber",name:"Floor Climber",description:"Reach floor 5",objectives:[{type:"reach_floor",target:5,current:0,text:"Reach floor 5"}],rewards:{exp:200,items:[]}},boss_slayer:{id:"boss_slayer",name:"Boss Slayer",description:"Defeat your first boss",objectives:[{type:"kill_bosses",target:1,current:0,text:"Defeat 1 boss"}],rewards:{exp:500,items:[]}},treasure_hunter:{id:"treasure_hunter",name:"Treasure Hunter",description:"Collect 10 items",objectives:[{type:"collect_items",target:10,current:0,text:"Collect 10 items"}],rewards:{exp:150,items:[]}},power_seeker:{id:"power_seeker",name:"Power Seeker",description:"Reach level 10",objectives:[{type:"reach_level",target:10,current:0,text:"Reach level 10"}],rewards:{exp:300,items:[]}},survivor:{id:"survivor",name:"Survivor",description:"Survive for 10 minutes",objectives:[{type:"survive_time",target:600,current:0,text:"Survive for 10 minutes"}],rewards:{exp:250,items:[]}}},Object.keys(this.questLibrary).forEach(e=>{this.questLibrary[e].isStarterQuest||this.availableQuests.push(e)})}startQuest(e){const t=this.questLibrary[e];if(!t||this.activeQuests.find(a=>a.id===e)||this.completedQuests.includes(e))return!1;const s=JSON.parse(JSON.stringify(t));this.activeQuests.push(s);const i=this.availableQuests.indexOf(e);return i!==-1&&this.availableQuests.splice(i,1),this.showQuestNotification("New Quest",t.name),this.updateQuestUI(),console.log(`📜 Quest started: ${t.name}`),!0}updateProgress(e,t=1){let s=[];this.activeQuests.forEach(i=>{let a=!0;i.objectives.forEach(n=>{n.type===e&&(n.current=Math.min(n.target,n.current+t)),n.current<n.target&&(a=!1)}),a&&s.push(i)}),s.forEach(i=>{this.completeQuest(i.id)}),this.updateQuestUI()}completeQuest(e){const t=this.activeQuests.findIndex(i=>i.id===e);if(t===-1)return;const s=this.activeQuests[t];s.rewards.exp&&this.engine.player&&this.engine.player.gainExp(s.rewards.exp),s.rewards.items&&this.engine.inventorySystem&&s.rewards.items.forEach(i=>{this.engine.inventorySystem.addItem(i)}),this.activeQuests.splice(t,1),this.completedQuests.push(e),this.showQuestNotification("Quest Complete!",s.name),this.updateQuestUI(),this.unlockNewQuests(),console.log(`✅ Quest completed: ${s.name}`)}unlockNewQuests(){if(this.activeQuests.length<3&&this.availableQuests.length>0){const e=this.availableQuests[0];setTimeout(()=>{this.startQuest(e)},2e3)}}onEnemyDefeated(e=!1){this.updateProgress("kill_enemies",1),e&&this.updateProgress("kill_bosses",1)}onFloorReached(e){this.updateProgress("reach_floor",e)}onItemCollected(){this.updateProgress("collect_items",1)}onLevelUp(e){this.updateProgress("reach_level",e)}update(e){this.activeQuests.forEach(t=>{t.objectives.forEach(s=>{s.type==="survive_time"&&(s.current=Math.min(s.target,s.current+e))})})}showQuestNotification(e,t){const s=document.createElement("div");s.style.cssText=`
            position: fixed;
            top: 120px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #c77dff;
            border-radius: 10px;
            padding: 20px 30px;
            color: white;
            z-index: 9999;
            animation: slideInRight 3s ease-out;
            max-width: 300px;
        `,s.innerHTML=`
            <div style="color: #c77dff; font-weight: bold; font-size: 1.2em; margin-bottom: 5px;">
                📜 ${e}
            </div>
            <div style="color: #e0aaff; font-size: 1em;">
                ${t}
            </div>
        `,document.body.appendChild(s),setTimeout(()=>{s.parentNode&&document.body.removeChild(s)},3e3)}updateQuestUI(){if(!document.getElementById("quest-panel"))return;const t=document.getElementById("quest-list");if(t){if(t.innerHTML="",this.activeQuests.length===0){t.innerHTML='<div style="opacity: 0.6;">No active quests</div>';return}this.activeQuests.forEach(s=>{const i=document.createElement("div");i.className="quest-item";let a="";s.objectives.forEach(n=>{const o=Math.min(100,n.current/n.target*100);a+=`
                    <div style="margin-top: 5px; font-size: 0.85em;">
                        ${n.text}: ${n.current}/${n.target}
                        <div style="background: rgba(255,255,255,0.2); height: 4px; border-radius: 2px; margin-top: 2px;">
                            <div style="background: #52b788; height: 100%; width: ${o}%; border-radius: 2px;"></div>
                        </div>
                    </div>
                `}),i.innerHTML=`
                <div style="color: #c77dff; font-weight: bold;">${s.name}</div>
                <div style="color: #e0aaff; font-size: 0.9em; margin-top: 3px;">${s.description}</div>
                ${a}
            `,t.appendChild(i)})}}getSaveData(){return{activeQuests:this.activeQuests,completedQuests:this.completedQuests,availableQuests:this.availableQuests}}loadSaveData(e){e.activeQuests&&(this.activeQuests=e.activeQuests),e.completedQuests&&(this.completedQuests=e.completedQuests),e.availableQuests&&(this.availableQuests=e.availableQuests),this.updateQuestUI()}}const rt=document.createElement("style");rt.textContent=`
    @keyframes slideInRight {
        0% { opacity: 0; transform: translateX(100px); }
        20% { opacity: 1; transform: translateX(0); }
        80% { opacity: 1; transform: translateX(0); }
        100% { opacity: 0; transform: translateX(100px); }
    }
    
    .quest-item {
        background: rgba(157, 78, 221, 0.1);
        border-left: 3px solid #9d4edd;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
    }
`;document.head.appendChild(rt);class Nt{constructor(e){this.engine=e,this.achievements=this.createAchievements(),this.unlockedAchievements=new Set,this.progress={},this.achievementPanel=null,this.notificationQueue=[],this.init(),console.log("🏆 Achievement System initialized")}init(){this.createAchievementUI(),Object.keys(this.achievements).forEach(e=>{this.progress[e]=0})}createAchievements(){return{first_kill:{id:"first_kill",name:"First Blood",description:"Defeat your first enemy",icon:"⚔️",requirement:1,reward:{exp:100},category:"combat"},slayer_10:{id:"slayer_10",name:"Demon Slayer",description:"Defeat 10 enemies",icon:"💀",requirement:10,reward:{exp:500},category:"combat"},slayer_50:{id:"slayer_50",name:"Monster Hunter",description:"Defeat 50 enemies",icon:"🗡️",requirement:50,reward:{exp:2e3,item:"rare_weapon"},category:"combat"},slayer_100:{id:"slayer_100",name:"Death Incarnate",description:"Defeat 100 enemies",icon:"☠️",requirement:100,reward:{exp:5e3,item:"epic_weapon"},category:"combat"},slayer_500:{id:"slayer_500",name:"Legendary Warrior",description:"Defeat 500 enemies",icon:"⚡",requirement:500,reward:{exp:1e4,item:"legendary_weapon"},category:"combat"},first_boss:{id:"first_boss",name:"Boss Slayer",description:"Defeat your first boss",icon:"👑",requirement:1,reward:{exp:1e3},category:"boss"},boss_5:{id:"boss_5",name:"Giant Killer",description:"Defeat 5 bosses",icon:"🔱",requirement:5,reward:{exp:3e3,item:"epic_armor"},category:"boss"},boss_10:{id:"boss_10",name:"Titan Slayer",description:"Defeat 10 bosses",icon:"⚜️",requirement:10,reward:{exp:5e3,item:"legendary_armor"},category:"boss"},floor_5:{id:"floor_5",name:"Adventurer",description:"Reach floor 5",icon:"🚪",requirement:5,reward:{exp:500},category:"progression"},floor_10:{id:"floor_10",name:"Explorer",description:"Reach floor 10",icon:"🗺️",requirement:10,reward:{exp:1e3},category:"progression"},floor_25:{id:"floor_25",name:"Deep Delver",description:"Reach floor 25",icon:"⛏️",requirement:25,reward:{exp:3e3,item:"rare_accessory"},category:"progression"},floor_50:{id:"floor_50",name:"Abyss Walker",description:"Reach floor 50",icon:"🌀",requirement:50,reward:{exp:5e3,item:"epic_accessory"},category:"progression"},floor_100:{id:"floor_100",name:"Master of the Veil",description:"Reach floor 100",icon:"✨",requirement:100,reward:{exp:1e4,item:"legendary_accessory"},category:"progression"},level_10:{id:"level_10",name:"Novice Wielder",description:"Reach level 10",icon:"🌟",requirement:10,reward:{exp:500},category:"level"},level_25:{id:"level_25",name:"Skilled Wielder",description:"Reach level 25",icon:"⭐",requirement:25,reward:{exp:2e3},category:"level"},level_50:{id:"level_50",name:"Master Wielder",description:"Reach level 50",icon:"💫",requirement:50,reward:{exp:5e3,item:"epic_weapon"},category:"level"},level_100:{id:"level_100",name:"Legendary Wielder",description:"Reach level 100",icon:"🌠",requirement:100,reward:{exp:1e4,item:"legendary_weapon"},category:"level"},items_10:{id:"items_10",name:"Treasure Hunter",description:"Collect 10 items",icon:"📦",requirement:10,reward:{exp:500},category:"collection"},items_50:{id:"items_50",name:"Hoarder",description:"Collect 50 items",icon:"💎",requirement:50,reward:{exp:2e3},category:"collection"},legendary_item:{id:"legendary_item",name:"Legendary Find",description:"Find a legendary item",icon:"👑",requirement:1,reward:{exp:2e3},category:"collection"},quick_clear:{id:"quick_clear",name:"Speed Runner",description:"Clear floor 5 in under 2 minutes",icon:"⚡",requirement:1,reward:{exp:1e3},category:"speed"},survivor_30min:{id:"survivor_30min",name:"Endurance",description:"Survive for 30 minutes",icon:"⏰",requirement:1800,reward:{exp:2e3},category:"survival"},survivor_1hour:{id:"survivor_1hour",name:"Marathon Runner",description:"Survive for 1 hour",icon:"🏃",requirement:3600,reward:{exp:5e3,item:"epic_armor"},category:"survival"},no_damage_floor:{id:"no_damage_floor",name:"Untouchable",description:"Complete a floor without taking damage",icon:"🛡️",requirement:1,reward:{exp:1500},category:"special"},perfect_boss:{id:"perfect_boss",name:"Perfect Victory",description:"Defeat a boss without taking damage",icon:"👑",requirement:1,reward:{exp:3e3,item:"legendary_accessory"},category:"special"}}}createAchievementUI(){const e=document.createElement("div");e.id="achievement-toggle",e.innerHTML="🏆 Achievements (A)",e.style.cssText=`
            position: absolute;
            bottom: 100px;
            right: 20px;
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 2px solid #9d4edd;
            border-radius: 10px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
            font-weight: bold;
            pointer-events: auto;
            z-index: 100;
        `,e.addEventListener("click",()=>this.togglePanel()),e.addEventListener("mouseenter",()=>{e.style.background="linear-gradient(135deg, #4a0e7a, #9d4edd)"}),e.addEventListener("mouseleave",()=>{e.style.background="linear-gradient(135deg, #2d0a4e, #4a0e7a)"}),document.getElementById("ui-overlay").appendChild(e),this.achievementPanel=document.createElement("div"),this.achievementPanel.id="achievement-panel",this.achievementPanel.style.cssText=`
            position: absolute;
            right: 20px;
            bottom: 150px;
            width: 400px;
            max-height: 500px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.95);
            border: 2px solid #9d4edd;
            border-radius: 10px;
            padding: 15px;
            color: #fff;
            display: none;
            pointer-events: auto;
            z-index: 100;
        `,document.getElementById("ui-overlay").appendChild(this.achievementPanel),this.updateAchievementUI(),document.addEventListener("keydown",t=>{(t.key==="a"||t.key==="A")&&this.togglePanel()})}togglePanel(){const e=this.achievementPanel.style.display==="block";this.achievementPanel.style.display=e?"none":"block",e||this.updateAchievementUI()}updateAchievementUI(){if(!this.achievementPanel)return;const e={combat:"⚔️ Combat",boss:"👑 Boss Battles",progression:"🗺️ Progression",level:"⭐ Levels",collection:"💎 Collection",speed:"⚡ Speed",survival:"⏰ Survival",special:"✨ Special"};let t='<h3 style="color: #c77dff; margin-bottom: 15px;">🏆 Achievements</h3>';t+=`<p style="color: #e0aaff; margin-bottom: 15px;">${this.unlockedAchievements.size} / ${Object.keys(this.achievements).length} Unlocked</p>`,Object.entries(e).forEach(([s,i])=>{const a=Object.values(this.achievements).filter(n=>n.category===s);a.length!==0&&(t+=`<h4 style="color: #e0aaff; margin-top: 15px; margin-bottom: 10px;">${i}</h4>`,a.forEach(n=>{const o=this.unlockedAchievements.has(n.id),r=this.progress[n.id]||0,l=Math.min(100,r/n.requirement*100),c=o?"rgba(157, 78, 221, 0.3)":"rgba(45, 10, 78, 0.3)",m=o?"#c77dff":"#888";t+=`
                    <div style="
                        background: ${c};
                        border: 1px solid ${o?"#9d4edd":"#444"};
                        border-radius: 8px;
                        padding: 10px;
                        margin: 8px 0;
                    ">
                        <div style="display: flex; align-items: center; margin-bottom: 5px;">
                            <span style="font-size: 24px; margin-right: 10px;">${n.icon}</span>
                            <div style="flex: 1;">
                                <div style="color: ${m}; font-weight: bold;">${n.name}</div>
                                <div style="color: #aaa; font-size: 0.85em;">${n.description}</div>
                            </div>
                            ${o?'<span style="color: #52b788; font-size: 20px;">✓</span>':""}
                        </div>
                        ${o?"":`
                            <div style="background: rgba(0, 0, 0, 0.5); border-radius: 5px; height: 8px; margin-top: 8px; overflow: hidden;">
                                <div style="background: linear-gradient(90deg, #9d4edd, #c77dff); height: 100%; width: ${l}%; transition: width 0.3s;"></div>
                            </div>
                            <div style="color: #aaa; font-size: 0.8em; margin-top: 3px; text-align: right;">
                                ${r} / ${n.requirement}
                            </div>
                        `}
                    </div>
                `}))}),this.achievementPanel.innerHTML=t}checkAchievement(e,t){const s=this.achievements[e];!s||this.unlockedAchievements.has(e)||(this.progress[e]=t,t>=s.requirement&&this.unlockAchievement(e))}unlockAchievement(e){if(this.unlockedAchievements.has(e))return;const t=this.achievements[e];if(this.unlockedAchievements.add(e),console.log(`🏆 Achievement Unlocked: ${t.name}`),t.reward&&(t.reward.exp&&this.engine.player.gainExp(t.reward.exp),t.reward.item)){const s=this.engine.endlessMode?.currentFloor||1,i=this.engine.inventorySystem.generateLoot(s,t.reward.item.split("_")[0]);this.engine.inventorySystem.addItem(i)}this.showAchievementNotification(t),this.updateAchievementUI(),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Achievement unlocked")}showAchievementNotification(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 30px;
            color: #fff;
            font-size: 1.2em;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 0 40px rgba(255, 215, 0, 0.8);
            opacity: 0;
            animation: achievementPop 3s ease-out forwards;
            max-width: 400px;
        `,t.innerHTML=`
            <div style="font-size: 3em; margin-bottom: 10px;">${e.icon}</div>
            <div style="font-size: 1.5em; color: #ffd60a; font-weight: bold; margin-bottom: 10px;">Achievement Unlocked!</div>
            <div style="font-size: 1.2em; color: #c77dff; margin-bottom: 5px;">${e.name}</div>
            <div style="font-size: 0.9em; color: #e0aaff;">${e.description}</div>
            ${e.reward&&e.reward.exp?`
                <div style="margin-top: 15px; color: #52b788; font-size: 0.9em;">
                    +${e.reward.exp} EXP
                </div>
            `:""}
        `,document.body.appendChild(t),setTimeout(()=>{document.body.removeChild(t)},3e3)}onEnemyDefeated(e=!1){const t=this.engine.endlessMode?.enemiesDefeated||0;if(this.checkAchievement("first_kill",t),this.checkAchievement("slayer_10",t),this.checkAchievement("slayer_50",t),this.checkAchievement("slayer_100",t),this.checkAchievement("slayer_500",t),e){const s=this.getBossKillCount();this.checkAchievement("first_boss",s),this.checkAchievement("boss_5",s),this.checkAchievement("boss_10",s)}}onFloorReached(e){this.checkAchievement("floor_5",e),this.checkAchievement("floor_10",e),this.checkAchievement("floor_25",e),this.checkAchievement("floor_50",e),this.checkAchievement("floor_100",e)}onLevelReached(e){this.checkAchievement("level_10",e),this.checkAchievement("level_25",e),this.checkAchievement("level_50",e),this.checkAchievement("level_100",e)}onItemCollected(e){const t=this.getTotalItemsCollected();this.checkAchievement("items_10",t),this.checkAchievement("items_50",t),e==="legendary"&&this.checkAchievement("legendary_item",1)}onTimeElapsed(e){this.checkAchievement("survivor_30min",e),this.checkAchievement("survivor_1hour",e)}getBossKillCount(){let e=0;return this.progress.first_boss>=1&&e++,this.progress.boss_5>=1&&(e=Math.max(e,this.progress.boss_5)),this.progress.boss_10>=1&&(e=Math.max(e,this.progress.boss_10)),e}getTotalItemsCollected(){return this.engine.inventorySystem?.items?.length||0}getSaveData(){return{unlockedAchievements:Array.from(this.unlockedAchievements),progress:this.progress}}loadSaveData(e){e.unlockedAchievements&&(this.unlockedAchievements=new Set(e.unlockedAchievements)),e.progress&&(this.progress=e.progress),this.updateAchievementUI()}}const lt=document.createElement("style");lt.textContent=`
    @keyframes achievementPop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        10% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
        20% { transform: translate(-50%, -50%) scale(1); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
    }
`;document.head.appendChild(lt);class jt{constructor(e){this.engine=e,this.audioContext=null,this.masterGain=null,this.musicGain=null,this.sfxGain=null,this.settings={masterVolume:.7,musicVolume:.5,sfxVolume:.8,muted:!1},this.currentMusic=null,this.currentMusicId=null,this.buffers={},this.activeSounds=new Set,this.oscillators={},this.init(),console.log("🎵 Audio System initialized")}init(){try{const e=window.AudioContext||window.webkitAudioContext;this.audioContext=new e,this.masterGain=this.audioContext.createGain(),this.masterGain.gain.value=this.settings.masterVolume,this.masterGain.connect(this.audioContext.destination),this.musicGain=this.audioContext.createGain(),this.musicGain.gain.value=this.settings.musicVolume,this.musicGain.connect(this.masterGain),this.sfxGain=this.audioContext.createGain(),this.sfxGain.gain.value=this.settings.sfxVolume,this.sfxGain.connect(this.masterGain),this.createAudioUI(),document.addEventListener("click",()=>{this.audioContext.state==="suspended"&&this.audioContext.resume()},{once:!0})}catch(e){console.warn("Audio not supported:",e)}}createAudioUI(){const e=document.createElement("div");e.id="audio-controls",e.style.cssText=`
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #9d4edd;
            border-radius: 10px;
            padding: 10px 20px;
            color: #fff;
            pointer-events: auto;
            z-index: 100;
            display: flex;
            gap: 15px;
            align-items: center;
        `;const t=document.createElement("button");t.innerHTML=this.settings.muted?"🔇":"🔊",t.style.cssText=`
            background: transparent;
            border: none;
            color: #c77dff;
            font-size: 20px;
            cursor: pointer;
            padding: 5px;
        `,t.addEventListener("click",()=>this.toggleMute()),e.appendChild(t),this.muteBtn=t;const s=document.createElement("span");s.textContent="🎵",s.style.color="#e0aaff",e.appendChild(s);const i=document.createElement("input");i.type="range",i.min="0",i.max="100",i.value=this.settings.musicVolume*100,i.style.cssText=`
            width: 80px;
            cursor: pointer;
        `,i.addEventListener("input",o=>{this.setMusicVolume(o.target.value/100)}),e.appendChild(i);const a=document.createElement("span");a.textContent="🔔",a.style.color="#e0aaff",e.appendChild(a);const n=document.createElement("input");n.type="range",n.min="0",n.max="100",n.value=this.settings.sfxVolume*100,n.style.cssText=`
            width: 80px;
            cursor: pointer;
        `,n.addEventListener("input",o=>{this.setSFXVolume(o.target.value/100),this.playSoundEffect("hit")}),e.appendChild(n),document.getElementById("ui-overlay").appendChild(e)}toggleMute(){this.settings.muted=!this.settings.muted,this.masterGain.gain.value=this.settings.muted?0:this.settings.masterVolume,this.muteBtn.innerHTML=this.settings.muted?"🔇":"🔊"}setMusicVolume(e){this.settings.musicVolume=Math.max(0,Math.min(1,e)),this.musicGain&&(this.musicGain.gain.value=this.settings.musicVolume)}setSFXVolume(e){this.settings.sfxVolume=Math.max(0,Math.min(1,e)),this.sfxGain&&(this.sfxGain.gain.value=this.settings.sfxVolume)}setMasterVolume(e){this.settings.masterVolume=Math.max(0,Math.min(1,e)),this.masterGain&&!this.settings.muted&&(this.masterGain.gain.value=this.settings.masterVolume)}playMusic(e){if(!this.audioContext||this.settings.muted)return;this.stopMusic(),this.audioContext.state==="suspended"&&this.audioContext.resume();const t=this.getBiomeMusic(e);this.currentMusicId=e,this.playAmbientDrone(t.baseFreq,t.harmonic),console.log(`🎵 Playing music for ${e}`)}getBiomeMusic(e){const t={crystal_cavern:{baseFreq:220,harmonic:1.5,name:"Crystal Resonance"},fungal_city:{baseFreq:110,harmonic:1.33,name:"Spore Dreams"},vine_cathedral:{baseFreq:165,harmonic:1.618,name:"Sacred Growth"},broken_starship:{baseFreq:440,harmonic:2,name:"Void Echo"},twilight_throne:{baseFreq:138.59,harmonic:1.414,name:"Eternal Dusk"}};return t[e]||t.crystal_cavern}playAmbientDrone(e,t){if(!this.audioContext)return;const s=this.audioContext.currentTime,i=this.audioContext.createOscillator(),a=this.audioContext.createOscillator(),n=this.audioContext.createOscillator(),o=this.audioContext.createGain(),r=this.audioContext.createGain(),l=this.audioContext.createGain();i.frequency.value=e,a.frequency.value=e*t,n.frequency.value=e*t*t,i.type="sine",a.type="sine",n.type="triangle",o.gain.value=.15,r.gain.value=.1,l.gain.value=.05,i.connect(o).connect(this.musicGain),a.connect(r).connect(this.musicGain),n.connect(l).connect(this.musicGain),o.gain.setValueAtTime(0,s),o.gain.linearRampToValueAtTime(.15,s+2),r.gain.setValueAtTime(0,s),r.gain.linearRampToValueAtTime(.1,s+2),l.gain.setValueAtTime(0,s),l.gain.linearRampToValueAtTime(.05,s+2),i.start(s),a.start(s),n.start(s),this.oscillators={osc1:i,osc2:a,osc3:n,gain1:o,gain2:r,gain3:l}}stopMusic(){if(!this.audioContext)return;const e=this.audioContext.currentTime;this.oscillators.osc1&&(this.oscillators.gain1.gain.linearRampToValueAtTime(0,e+1),this.oscillators.gain2.gain.linearRampToValueAtTime(0,e+1),this.oscillators.gain3.gain.linearRampToValueAtTime(0,e+1),setTimeout(()=>{try{this.oscillators.osc1?.stop(),this.oscillators.osc2?.stop(),this.oscillators.osc3?.stop()}catch{}},1100)),this.oscillators={},this.currentMusicId=null}playSoundEffect(e,t={}){if(!(!this.audioContext||this.settings.muted))switch(this.audioContext.state==="suspended"&&this.audioContext.resume(),e){case"hit":this.playHitSound();break;case"ability":this.playAbilitySound(t.frequency||440);break;case"level_up":this.playLevelUpSound();break;case"pickup":this.playPickupSound();break;case"death":this.playDeathSound();break;case"boss_appear":this.playBossAppearSound();break;case"achievement":this.playAchievementSound();break;case"teleport":this.playTeleportSound();break;default:this.playHitSound()}}playHitSound(){const e=this.audioContext.currentTime,t=this.audioContext.createOscillator(),s=this.audioContext.createGain();t.type="square",t.frequency.setValueAtTime(200,e),t.frequency.exponentialRampToValueAtTime(50,e+.1),s.gain.setValueAtTime(.3,e),s.gain.exponentialRampToValueAtTime(.01,e+.1),t.connect(s).connect(this.sfxGain),t.start(e),t.stop(e+.1)}playAbilitySound(e){const t=this.audioContext.currentTime,s=this.audioContext.createOscillator(),i=this.audioContext.createGain();s.type="sine",s.frequency.setValueAtTime(e,t),s.frequency.exponentialRampToValueAtTime(e*2,t+.3),i.gain.setValueAtTime(.2,t),i.gain.exponentialRampToValueAtTime(.01,t+.3),s.connect(i).connect(this.sfxGain),s.start(t),s.stop(t+.3)}playLevelUpSound(){const e=this.audioContext.currentTime;[261.63,329.63,392,523.25].forEach((s,i)=>{const a=this.audioContext.createOscillator(),n=this.audioContext.createGain();a.type="sine",a.frequency.value=s,n.gain.setValueAtTime(0,e+i*.1),n.gain.linearRampToValueAtTime(.15,e+i*.1+.05),n.gain.exponentialRampToValueAtTime(.01,e+i*.1+.3),a.connect(n).connect(this.sfxGain),a.start(e+i*.1),a.stop(e+i*.1+.3)})}playPickupSound(){const e=this.audioContext.currentTime,t=this.audioContext.createOscillator(),s=this.audioContext.createGain();t.type="sine",t.frequency.setValueAtTime(800,e),t.frequency.exponentialRampToValueAtTime(1200,e+.1),s.gain.setValueAtTime(.2,e),s.gain.exponentialRampToValueAtTime(.01,e+.1),t.connect(s).connect(this.sfxGain),t.start(e),t.stop(e+.1)}playDeathSound(){const e=this.audioContext.currentTime,t=this.audioContext.createOscillator(),s=this.audioContext.createGain();t.type="sawtooth",t.frequency.setValueAtTime(440,e),t.frequency.exponentialRampToValueAtTime(55,e+.5),s.gain.setValueAtTime(.3,e),s.gain.exponentialRampToValueAtTime(.01,e+.5),t.connect(s).connect(this.sfxGain),t.start(e),t.stop(e+.5)}playBossAppearSound(){const e=this.audioContext.currentTime,t=this.audioContext.createOscillator(),s=this.audioContext.createGain();t.type="sawtooth",t.frequency.setValueAtTime(55,e),t.frequency.linearRampToValueAtTime(110,e+1),s.gain.setValueAtTime(.4,e),s.gain.exponentialRampToValueAtTime(.01,e+1.5),t.connect(s).connect(this.sfxGain),t.start(e),t.stop(e+1.5);const i=this.audioContext.createOscillator(),a=this.audioContext.createGain();i.type="sine",i.frequency.setValueAtTime(1760,e+.5),a.gain.setValueAtTime(0,e+.5),a.gain.linearRampToValueAtTime(.2,e+.6),a.gain.exponentialRampToValueAtTime(.01,e+1.5),i.connect(a).connect(this.sfxGain),i.start(e+.5),i.stop(e+1.5)}playAchievementSound(){const e=this.audioContext.currentTime;[523.25,659.25,783.99,1046.5].forEach((s,i)=>{const a=this.audioContext.createOscillator(),n=this.audioContext.createGain();a.type="sine",a.frequency.value=s,n.gain.setValueAtTime(0,e+i*.08),n.gain.linearRampToValueAtTime(.2,e+i*.08+.04),n.gain.exponentialRampToValueAtTime(.01,e+i*.08+.4),a.connect(n).connect(this.sfxGain),a.start(e+i*.08),a.stop(e+i*.08+.4)})}playTeleportSound(){const e=this.audioContext.currentTime,t=this.audioContext.createOscillator(),s=this.audioContext.createGain();t.type="sine",t.frequency.setValueAtTime(1e3,e),t.frequency.exponentialRampToValueAtTime(2e3,e+.2),s.gain.setValueAtTime(.2,e),s.gain.exponentialRampToValueAtTime(.01,e+.2),t.connect(s).connect(this.sfxGain),t.start(e),t.stop(e+.2)}getSaveData(){return{settings:this.settings}}loadSaveData(e){e.settings&&(this.settings={...this.settings,...e.settings},this.setMusicVolume(this.settings.musicVolume),this.setSFXVolume(this.settings.sfxVolume),this.setMasterVolume(this.settings.masterVolume),this.settings.muted&&this.toggleMute())}}class Vt{constructor(e){this.engine=e,this.skillTrees=this.createSkillTrees(),this.unlockedSkills=new Set,this.skillPoints=0,this.skillPanel=null,this.init(),console.log("🌳 Skill Tree System initialized")}init(){this.createSkillUI(),this.updateSkillPoints()}createSkillTrees(){return{combat:{name:"⚔️ Combat Mastery",color:"#ff0844",skills:{power_boost:{id:"power_boost",name:"Power Boost",description:"Increases attack damage by 15%",maxRank:3,cost:1,prereq:null,effect:e=>({attackMultiplier:1+e*.15})},critical_strike:{id:"critical_strike",name:"Critical Strike",description:"Chance to deal double damage",maxRank:3,cost:1,prereq:"power_boost",effect:e=>({critChance:e*.1})},berserker_rage:{id:"berserker_rage",name:"Berserker Rage",description:"Deal more damage at low HP",maxRank:1,cost:2,prereq:"critical_strike",effect:e=>({berserkerMode:!0})},area_mastery:{id:"area_mastery",name:"Area Mastery",description:"Increase AOE ability range by 30%",maxRank:2,cost:1,prereq:"power_boost",effect:e=>({aoeRangeMultiplier:1+e*.3})},execute:{id:"execute",name:"Execute",description:"Deal massive damage to enemies below 20% HP",maxRank:1,cost:2,prereq:"area_mastery",effect:e=>({executeThreshold:.2})}}},defense:{name:"🛡️ Guardian's Path",color:"#0099ff",skills:{vitality:{id:"vitality",name:"Vitality",description:"Increases max HP by 20%",maxRank:3,cost:1,prereq:null,effect:e=>({hpMultiplier:1+e*.2})},iron_skin:{id:"iron_skin",name:"Iron Skin",description:"Reduces damage taken by 10%",maxRank:3,cost:1,prereq:"vitality",effect:e=>({damageReduction:e*.1})},regeneration:{id:"regeneration",name:"Regeneration",description:"Slowly regenerate HP in combat",maxRank:3,cost:1,prereq:"vitality",effect:e=>({hpRegen:e*.5})},last_stand:{id:"last_stand",name:"Last Stand",description:"Survive lethal damage once per floor",maxRank:1,cost:3,prereq:"iron_skin",effect:e=>({lastStand:!0})},barrier:{id:"barrier",name:"Arcane Barrier",description:"Create a shield that absorbs damage",maxRank:2,cost:2,prereq:"regeneration",effect:e=>({shieldStrength:e*50})}}},magic:{name:"✨ Mystical Arts",color:"#9d4edd",skills:{mana_pool:{id:"mana_pool",name:"Expanded Mana Pool",description:"Increases max MP by 25%",maxRank:3,cost:1,prereq:null,effect:e=>({mpMultiplier:1+e*.25})},spell_power:{id:"spell_power",name:"Spell Power",description:"Increases ability damage by 20%",maxRank:3,cost:1,prereq:"mana_pool",effect:e=>({spellPowerMultiplier:1+e*.2})},mana_efficiency:{id:"mana_efficiency",name:"Mana Efficiency",description:"Reduces ability costs by 15%",maxRank:3,cost:1,prereq:"mana_pool",effect:e=>({manaCostReduction:e*.15})},spell_echo:{id:"spell_echo",name:"Spell Echo",description:"20% chance to cast abilities twice",maxRank:1,cost:3,prereq:"spell_power",effect:e=>({spellEchoChance:.2})},arcane_surge:{id:"arcane_surge",name:"Arcane Surge",description:"Rapidly regenerate MP for 5 seconds",maxRank:1,cost:2,prereq:"mana_efficiency",effect:e=>({arcaneSurge:!0})}}},utility:{name:"🌟 Wielder's Gift",color:"#52b788",skills:{swift_footed:{id:"swift_footed",name:"Swift Footed",description:"Increases movement speed by 15%",maxRank:3,cost:1,prereq:null,effect:e=>({speedMultiplier:1+e*.15})},essence_collector:{id:"essence_collector",name:"Essence Collector",description:"Gain 25% more experience",maxRank:3,cost:1,prereq:"swift_footed",effect:e=>({expMultiplier:1+e*.25})},treasure_hunter:{id:"treasure_hunter",name:"Treasure Hunter",description:"Increases item drop rate by 20%",maxRank:3,cost:1,prereq:"swift_footed",effect:e=>({dropRateBonus:e*.2})},lucky_find:{id:"lucky_find",name:"Lucky Find",description:"Higher chance for rare items",maxRank:2,cost:2,prereq:"treasure_hunter",effect:e=>({rarityBonus:e*.15})},second_wind:{id:"second_wind",name:"Second Wind",description:"Cooldowns refresh on floor clear",maxRank:1,cost:2,prereq:"essence_collector",effect:e=>({secondWind:!0})}}}}}createSkillUI(){const e=document.createElement("div");e.id="skilltree-toggle",e.innerHTML="🌳 Skills (K)",e.style.cssText=`
            position: absolute;
            bottom: 100px;
            right: 350px;
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 2px solid #9d4edd;
            border-radius: 10px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
            font-weight: bold;
            pointer-events: auto;
            z-index: 100;
        `,e.addEventListener("click",()=>this.togglePanel()),e.addEventListener("mouseenter",()=>{e.style.background="linear-gradient(135deg, #4a0e7a, #9d4edd)"}),e.addEventListener("mouseleave",()=>{e.style.background="linear-gradient(135deg, #2d0a4e, #4a0e7a)"}),document.getElementById("ui-overlay").appendChild(e),this.skillPanel=document.createElement("div"),this.skillPanel.id="skilltree-panel",this.skillPanel.style.cssText=`
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 80%;
            max-width: 900px;
            max-height: 80vh;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.95);
            border: 3px solid #9d4edd;
            border-radius: 15px;
            padding: 20px;
            color: #fff;
            display: none;
            pointer-events: auto;
            z-index: 1000;
            box-shadow: 0 0 50px rgba(157, 78, 221, 0.5);
        `,document.getElementById("ui-overlay").appendChild(this.skillPanel),this.updateSkillUI(),document.addEventListener("keydown",t=>{(t.key==="k"||t.key==="K")&&this.togglePanel()})}togglePanel(){const e=this.skillPanel.style.display==="block";this.skillPanel.style.display=e?"none":"block",e||this.updateSkillUI()}updateSkillUI(){if(!this.skillPanel)return;this.updateSkillPoints();let e='<div style="text-align: center; margin-bottom: 20px;">';e+='<h2 style="color: #c77dff; margin-bottom: 10px;">🌳 Skill Trees</h2>',e+=`<p style="color: #ffd60a; font-size: 1.2em; font-weight: bold;">Skill Points Available: ${this.skillPoints}</p>`,e+='<p style="color: #aaa; font-size: 0.9em;">Click on skills to unlock them. Some skills require prerequisites.</p>',e+="</div>",Object.entries(this.skillTrees).forEach(([i,a])=>{e+=`<div style="margin-bottom: 30px; border: 2px solid ${a.color}; border-radius: 10px; padding: 15px;">`,e+=`<h3 style="color: ${a.color}; margin-bottom: 15px;">${a.name}</h3>`,e+='<div style="display: flex; flex-wrap: wrap; gap: 10px;">',Object.values(a.skills).forEach(n=>{const o=this.getSkillRank(n.id),r=this.canUnlockSkill(n),l=o>=n.maxRank;let c="rgba(45, 10, 78, 0.5)";o>0&&(c=`rgba(${parseInt(a.color.slice(1,3),16)}, ${parseInt(a.color.slice(3,5),16)}, ${parseInt(a.color.slice(5,7),16)}, 0.3)`);const m=!r&&o===0?.5:1,u=r||o>0?"pointer":"not-allowed";e+=`
                    <div 
                        data-skill-id="${n.id}" 
                        data-tree-id="${i}"
                        class="skill-node"
                        style="
                            background: ${c};
                            border: 2px solid ${a.color};
                            border-radius: 10px;
                            padding: 12px;
                            width: 180px;
                            cursor: ${u};
                            opacity: ${m};
                            transition: all 0.3s;
                        "
                    >
                        <div style="font-weight: bold; color: ${a.color}; margin-bottom: 5px;">${n.name}</div>
                        <div style="color: #aaa; font-size: 0.85em; margin-bottom: 8px;">${n.description}</div>
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <span style="color: ${l?"#52b788":"#ffd60a"};">
                                ${o}/${n.maxRank}
                            </span>
                            <span style="color: #e0aaff; font-size: 0.9em;">
                                Cost: ${n.cost} ${n.cost===1?"point":"points"}
                            </span>
                        </div>
                        ${n.prereq?`<div style="color: #888; font-size: 0.8em; margin-top: 5px;">Requires: ${this.skillTrees[i].skills[n.prereq].name}</div>`:""}
                    </div>
                `}),e+="</div></div>"}),e+='<div style="text-align: center; margin-top: 20px;">',e+='<button id="reset-skills-btn" style="background: linear-gradient(135deg, #ff0844, #ff6b9d); border: none; border-radius: 8px; padding: 10px 20px; color: #fff; font-weight: bold; cursor: pointer; font-size: 1em;">Reset All Skills (Free)</button>',e+="</div>",this.skillPanel.innerHTML=e,this.skillPanel.querySelectorAll(".skill-node").forEach(i=>{i.addEventListener("click",()=>{const a=i.getAttribute("data-skill-id"),n=i.getAttribute("data-tree-id");this.unlockSkill(n,a)}),i.addEventListener("mouseenter",()=>{i.style.cursor==="pointer"&&(i.style.transform="scale(1.05)",i.style.boxShadow=`0 0 20px ${this.skillTrees[i.getAttribute("data-tree-id")].color}`)}),i.addEventListener("mouseleave",()=>{i.style.transform="scale(1)",i.style.boxShadow="none"})});const s=document.getElementById("reset-skills-btn");s&&s.addEventListener("click",()=>this.resetAllSkills())}updateSkillPoints(){if(!this.engine.player)return;const e=this.engine.player.stats.level,t=this.getSpentPoints();this.skillPoints=e-t}getSpentPoints(){let e=0;return Object.values(this.skillTrees).forEach(t=>{Object.values(t.skills).forEach(s=>{const i=this.getSkillRank(s.id);e+=i*s.cost})}),e}getSkillRank(e){let t=0;return this.unlockedSkills.forEach(s=>{s.startsWith(e+"_")&&t++}),t}canUnlockSkill(e){return!(this.skillPoints<e.cost||this.getSkillRank(e.id)>=e.maxRank||e.prereq&&this.getSkillRank(e.prereq)===0)}unlockSkill(e,t){const s=this.skillTrees[e].skills[t];if(!this.canUnlockSkill(s))return console.log("Cannot unlock skill:",s.name),!1;const i=this.getSkillRank(t);return this.unlockedSkills.add(`${t}_${i+1}`),console.log(`🌳 Unlocked: ${s.name} (Rank ${i+1})`),this.applySkillEffect(s,i+1),this.updateSkillUI(),this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("level_up"),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Skill unlocked"),!0}applySkillEffect(e,t){const s=e.effect(t),i=this.engine.player;if(s.hpMultiplier){const a=i.stats.maxHp;i.stats.maxHp=Math.floor(i.baseStats.maxHp*this.getTotalMultiplier("hp")),i.stats.hp+=i.stats.maxHp-a}if(s.mpMultiplier){const a=i.stats.maxMp;i.stats.maxMp=Math.floor(i.baseStats.maxMp*this.getTotalMultiplier("mp")),i.stats.mp+=i.stats.maxMp-a}i.skillEffects||(i.skillEffects={}),Object.assign(i.skillEffects,s)}getTotalMultiplier(e){let t=1;return this.unlockedSkills.forEach(s=>{const[i]=s.split("_");for(const a of Object.values(this.skillTrees)){const n=a.skills[i];if(n){const o=parseInt(s.split("_")[1]),r=n.effect(o);e==="hp"&&r.hpMultiplier&&(t*=r.hpMultiplier),e==="mp"&&r.mpMultiplier&&(t*=r.mpMultiplier);break}}}),t}resetAllSkills(){this.unlockedSkills.clear(),this.engine.player&&(this.engine.player.skillEffects={}),this.updateSkillUI(),console.log("🔄 All skills reset"),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Skills reset")}getActiveEffects(){const e={attackMultiplier:1,critChance:0,aoeRangeMultiplier:1,damageReduction:0,hpRegen:0,spellPowerMultiplier:1,manaCostReduction:0,speedMultiplier:1,expMultiplier:1,dropRateBonus:0,rarityBonus:0,berserkerMode:!1,executeThreshold:0,lastStand:!1,shieldStrength:0,spellEchoChance:0,arcaneSurge:!1,secondWind:!1,luckyFind:!1};return this.unlockedSkills.forEach(t=>{const[s]=t.split("_");for(const i of Object.values(this.skillTrees)){const a=i.skills[s];if(a){const n=parseInt(t.split("_")[1]),o=a.effect(n);Object.keys(o).forEach(r=>{typeof o[r]=="number"?r.includes("Multiplier")?e[r]*=o[r]:e[r]+=o[r]:e[r]=o[r]});break}}}),e}getSaveData(){return{unlockedSkills:Array.from(this.unlockedSkills),skillPoints:this.skillPoints}}loadSaveData(e){e.unlockedSkills&&(this.unlockedSkills=new Set(e.unlockedSkills),this.unlockedSkills.forEach(t=>{const[s,i]=t.split("_"),a=parseInt(i);for(const n of Object.values(this.skillTrees)){const o=n.skills[s];if(o){this.applySkillEffect(o,a);break}}})),this.updateSkillPoints(),this.updateSkillUI()}}class Qt{constructor(e){this.engine=e,this.currentCombo=0,this.comboMultiplier=1,this.lastHitTime=0,this.comboTimeout=3,this.comboTimer=0,this.comboThresholds={3:{multiplier:1.2,name:"Nice!",color:"#ffd60a"},5:{multiplier:1.5,name:"Great!",color:"#ff6b9d"},10:{multiplier:2,name:"Awesome!",color:"#ff0844"},15:{multiplier:2.5,name:"Incredible!",color:"#9d4edd"},20:{multiplier:3,name:"LEGENDARY!",color:"#ff00ff"}},this.comboDisplay=null,this.init(),console.log("💥 Combo System initialized")}init(){this.createComboUI()}createComboUI(){this.comboDisplay=document.createElement("div"),this.comboDisplay.id="combo-display",this.comboDisplay.style.cssText=`
            position: absolute;
            top: 150px;
            left: 50%;
            transform: translateX(-50%) scale(0);
            background: rgba(0, 0, 0, 0.8);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 20px 30px;
            color: #fff;
            font-size: 2em;
            font-weight: bold;
            pointer-events: none;
            z-index: 1000;
            text-align: center;
            box-shadow: 0 0 30px rgba(255, 215, 0, 0.8);
            transition: all 0.3s ease-out;
            opacity: 0;
        `,document.getElementById("ui-overlay").appendChild(this.comboDisplay)}onHit(e){const t=Date.now()/1e3;return t-this.lastHitTime>this.comboTimeout&&this.resetCombo(),this.currentCombo++,this.lastHitTime=t,this.comboTimer=this.comboTimeout,this.updateMultiplier(),this.updateComboDisplay(),this.engine.audioSystem&&(Math.min(2,1+this.currentCombo*.05),this.engine.audioSystem.playSoundEffect("hit")),this.engine.particleSystem&&this.engine.player&&this.engine.particleSystem.createComboEffect(this.engine.player.mesh.position,this.currentCombo),this.checkComboMilestone(),e*this.comboMultiplier}updateMultiplier(){let e=1;Object.keys(this.comboThresholds).forEach(t=>{const s=parseInt(t);this.currentCombo>=s&&(e=this.comboThresholds[t].multiplier)}),this.comboMultiplier=e}checkComboMilestone(){const e=this.comboThresholds[this.currentCombo];e&&(this.showComboMilestone(e),this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("achievement"))}showComboMilestone(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 30%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 4px solid ${e.color};
            border-radius: 20px;
            padding: 30px 50px;
            color: ${e.color};
            font-size: 3em;
            font-weight: bold;
            z-index: 10001;
            text-align: center;
            box-shadow: 0 0 50px ${e.color};
            opacity: 0;
            animation: comboMilestonePop 2s ease-out forwards;
            pointer-events: none;
        `,t.innerHTML=`
            <div style="font-size: 0.7em; margin-bottom: 10px;">COMBO x${this.currentCombo}</div>
            <div>${e.name}</div>
            <div style="font-size: 0.5em; margin-top: 10px;">Damage x${e.multiplier.toFixed(1)}</div>
        `,document.body.appendChild(t),setTimeout(()=>{document.body.removeChild(t)},2e3)}updateComboDisplay(){if(this.comboDisplay&&this.currentCombo>=3){let e=this.comboThresholds[3];Object.keys(this.comboThresholds).forEach(t=>{const s=parseInt(t);this.currentCombo>=s&&(e=this.comboThresholds[t])}),this.comboDisplay.style.borderColor=e.color,this.comboDisplay.style.boxShadow=`0 0 30px ${e.color}`,this.comboDisplay.style.transform="translateX(-50%) scale(1)",this.comboDisplay.style.opacity="1",this.comboDisplay.innerHTML=`
                <div style="color: ${e.color};">COMBO</div>
                <div style="font-size: 1.5em; color: #fff;">${this.currentCombo}</div>
                <div style="font-size: 0.6em; color: #e0aaff;">x${this.comboMultiplier.toFixed(1)} Damage</div>
            `}}hideComboDisplay(){this.comboDisplay&&(this.comboDisplay.style.transform="translateX(-50%) scale(0)",this.comboDisplay.style.opacity="0")}resetCombo(){this.currentCombo>=3&&this.showComboEnd(),this.currentCombo=0,this.comboMultiplier=1,this.comboTimer=0,this.hideComboDisplay()}showComboEnd(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 150px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #888;
            border-radius: 10px;
            padding: 15px 25px;
            color: #888;
            font-size: 1.2em;
            z-index: 1001;
            text-align: center;
            opacity: 0;
            animation: fadeInOut 2s ease-in-out forwards;
            pointer-events: none;
        `,e.textContent="Combo Ended",document.body.appendChild(e),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},2e3)}update(e){this.currentCombo>0&&(this.comboTimer-=e,this.comboTimer<=0&&this.resetCombo(),this.comboDisplay&&this.currentCombo>=3&&this.comboTimer/this.comboTimeout<.3&&(this.comboDisplay.style.borderColor="#ff0844",this.comboDisplay.style.animation="pulse 0.3s ease-in-out infinite"))}getMultiplier(){return this.comboMultiplier}getCurrentCombo(){return this.currentCombo}getSaveData(){return{currentCombo:0,comboMultiplier:1}}loadSaveData(e){this.resetCombo()}}const ct=document.createElement("style");ct.textContent=`
    @keyframes comboMilestonePop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5) rotate(-5deg); }
        10% { opacity: 1; transform: translate(-50%, -50%) scale(1.2) rotate(5deg); }
        20% { transform: translate(-50%, -50%) scale(1) rotate(0deg); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1) rotate(0deg); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8) rotate(0deg); }
    }
    
    @keyframes pulse {
        0%, 100% { transform: translateX(-50%) scale(1); }
        50% { transform: translateX(-50%) scale(1.1); }
    }
`;document.head.appendChild(ct);class Kt{constructor(e){this.engine=e,this.options={hairStyles:[{id:"long_flowing",name:"Flowing Locks",unlocked:!0,color:10309341},{id:"short_spiky",name:"Spiky Style",unlocked:!1,color:16739229},{id:"twin_tails",name:"Twin Tails",unlocked:!1,color:6737151},{id:"elegant_bun",name:"Elegant Bun",unlocked:!1,color:16766474},{id:"wild_messy",name:"Wild & Free",unlocked:!1,color:5420936}],outfits:[{id:"wielder_robes",name:"Wielder Robes",unlocked:!0,color:4853370},{id:"battle_dress",name:"Battle Dress",unlocked:!1,color:16713796},{id:"mystical_kimono",name:"Mystical Kimono",unlocked:!1,color:10309341},{id:"cyber_suit",name:"Cyber Suit",unlocked:!1,color:6737151},{id:"elegant_gown",name:"Elegant Gown",unlocked:!1,color:14723839}],accessories:[{id:"none",name:"None",unlocked:!0},{id:"glowing_earrings",name:"Glowing Earrings",unlocked:!1},{id:"mystical_crown",name:"Mystical Crown",unlocked:!1},{id:"floating_orbs",name:"Floating Orbs",unlocked:!1},{id:"energy_wings",name:"Energy Wings",unlocked:!1}],auras:[{id:"purple_glow",name:"Purple Glow",unlocked:!0,color:10309341},{id:"pink_radiance",name:"Pink Radiance",unlocked:!1,color:16739229},{id:"cyan_shimmer",name:"Cyan Shimmer",unlocked:!1,color:6737151},{id:"golden_aura",name:"Golden Aura",unlocked:!1,color:16766474},{id:"rainbow_pulse",name:"Rainbow Pulse",unlocked:!1,color:16777215}]},this.current={hairStyle:"long_flowing",outfit:"wielder_robes",accessory:"none",aura:"purple_glow"},this.customizationPanel=null,this.init(),console.log("💄 Character Customization initialized")}init(){this.createCustomizationUI()}createCustomizationUI(){const e=document.createElement("div");e.id="customization-toggle",e.innerHTML="💄 Customize (C)",e.style.cssText=`
            position: absolute;
            bottom: 150px;
            left: 20px;
            background: linear-gradient(135deg, #ff6b9d, #ff0844);
            border: 2px solid #ff6b9d;
            border-radius: 10px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
            font-weight: bold;
            pointer-events: auto;
            z-index: 100;
        `,e.addEventListener("click",()=>this.togglePanel()),e.addEventListener("mouseenter",()=>{e.style.background="linear-gradient(135deg, #ff0844, #ff6b9d)"}),e.addEventListener("mouseleave",()=>{e.style.background="linear-gradient(135deg, #ff6b9d, #ff0844)"}),document.getElementById("ui-overlay").appendChild(e),this.customizationPanel=document.createElement("div"),this.customizationPanel.id="customization-panel",this.customizationPanel.style.cssText=`
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 80%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.95);
            border: 3px solid #ff6b9d;
            border-radius: 15px;
            padding: 20px;
            color: #fff;
            display: none;
            pointer-events: auto;
            z-index: 1000;
            box-shadow: 0 0 50px rgba(255, 107, 157, 0.5);
        `,document.getElementById("ui-overlay").appendChild(this.customizationPanel),this.updateCustomizationUI(),document.addEventListener("keydown",t=>{(t.key==="c"||t.key==="C")&&this.togglePanel()})}togglePanel(){const e=this.customizationPanel.style.display==="block";this.customizationPanel.style.display=e?"none":"block",e||this.updateCustomizationUI()}updateCustomizationUI(){if(!this.customizationPanel)return;let e='<div style="text-align: center; margin-bottom: 20px;">';e+='<h2 style="color: #ff6b9d; margin-bottom: 10px;">💄 Character Customization</h2>',e+='<p style="color: #aaa; font-size: 0.9em;">Customize your appearance with unlockable cosmetics</p>',e+="</div>",e+=this.renderCategory("Hair Style","hairStyles","hairStyle","💇"),e+=this.renderCategory("Outfit","outfits","outfit","👗"),e+=this.renderCategory("Accessory","accessories","accessory","✨"),e+=this.renderCategory("Aura","auras","aura","🌟"),e+='<div style="text-align: center; margin-top: 20px; color: #888; font-size: 0.9em;">',e+="Unlock more options by leveling up and completing achievements!",e+="</div>",this.customizationPanel.innerHTML=e,this.attachClickHandlers()}renderCategory(e,t,s,i){let a='<div style="margin-bottom: 25px; border: 2px solid #ff6b9d; border-radius: 10px; padding: 15px;">';return a+=`<h3 style="color: #ff6b9d; margin-bottom: 15px;">${i} ${e}</h3>`,a+='<div style="display: flex; flex-wrap: wrap; gap: 10px;">',this.options[t].forEach(n=>{const o=this.current[s]===n.id,r=n.unlocked;let l="rgba(45, 10, 78, 0.5)",c="#444",m=r?1:.5,u=r?"pointer":"not-allowed";o&&(l="rgba(255, 107, 157, 0.3)",c="#ff6b9d"),a+=`
                <div 
                    class="customization-option"
                    data-category="${s}"
                    data-option-id="${n.id}"
                    style="
                        background: ${l};
                        border: 2px solid ${c};
                        border-radius: 10px;
                        padding: 12px;
                        width: 150px;
                        cursor: ${u};
                        opacity: ${m};
                        transition: all 0.3s;
                        text-align: center;
                    "
                >
                    <div style="font-weight: bold; color: #fff; margin-bottom: 5px;">${n.name}</div>
                    ${n.color?`<div style="width: 30px; height: 30px; background: #${n.color.toString(16).padStart(6,"0")}; border-radius: 50%; margin: 10px auto; border: 2px solid #fff;"></div>`:""}
                    ${r?"":'<div style="color: #888; font-size: 0.8em; margin-top: 5px;">🔒 Locked</div>'}
                    ${o?'<div style="color: #52b788; margin-top: 5px;">✓ Equipped</div>':""}
                </div>
            `}),a+="</div></div>",a}attachClickHandlers(){this.customizationPanel.querySelectorAll(".customization-option").forEach(t=>{t.addEventListener("click",()=>{const s=t.getAttribute("data-category"),i=t.getAttribute("data-option-id");this.selectOption(s,i)}),t.addEventListener("mouseenter",()=>{t.style.cursor==="pointer"&&(t.style.transform="scale(1.05)",t.style.boxShadow="0 0 20px rgba(255, 107, 157, 0.5)")}),t.addEventListener("mouseleave",()=>{t.style.transform="scale(1)",t.style.boxShadow="none"})})}selectOption(e,t){const s=e+"s",i=this.options[s]?.find(a=>a.id===t);if(!i){for(const a of Object.keys(this.options)){const n=this.options[a].find(o=>o.id===t);if(n){if(!n.unlocked){console.log("Option locked:",n.name);return}this.current[e]=t,this.applyCustomization(),this.updateCustomizationUI(),this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("pickup"),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Customization changed"),console.log(`✨ Equipped ${n.name}`);return}}return}if(!i.unlocked){console.log("Option locked:",i.name);return}this.current[e]=t,this.applyCustomization(),this.updateCustomizationUI(),this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("pickup"),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Customization changed"),console.log(`✨ Equipped ${i.name}`)}applyCustomization(){if(!this.engine.player||!this.engine.player.mesh)return;const e=this.engine.player,t=this.options.auras.find(i=>i.id===this.current.aura);t&&t.color&&(e.mesh.material.color.setHex(t.color),e.mesh.material.emissive.setHex(t.color),e.mesh.material.emissiveIntensity=.5);const s=this.options.outfits.find(i=>i.id===this.current.outfit);s&&s.color&&e.mesh.material.color.setHex(s.color)}unlockOption(e,t){const s=e+"s",i=this.options[s]?.find(a=>a.id===t);return i&&!i.unlocked?(i.unlocked=!0,console.log(`🎉 Unlocked: ${i.name}`),this.showUnlockNotification(i),this.customizationPanel.style.display==="block"&&this.updateCustomizationUI(),!0):!1}showUnlockNotification(e){const t=document.createElement("div");t.style.cssText=`
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 3px solid #ff6b9d;
            border-radius: 15px;
            padding: 30px;
            color: #fff;
            font-size: 1.2em;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 0 40px rgba(255, 107, 157, 0.8);
            opacity: 0;
            animation: customUnlockPop 3s ease-out forwards;
            pointer-events: none;
        `,t.innerHTML=`
            <div style="font-size: 2em; margin-bottom: 10px;">✨</div>
            <div style="font-size: 1.3em; color: #ff6b9d; font-weight: bold; margin-bottom: 10px;">New Cosmetic Unlocked!</div>
            <div style="color: #e0aaff;">${e.name}</div>
        `,document.body.appendChild(t),setTimeout(()=>{document.body.contains(t)&&document.body.removeChild(t)},3e3)}checkUnlocks(){const e=this.engine.player?.stats.level||1,t=this.engine.endlessMode?.currentFloor||1;e>=5&&this.unlockOption("hairStyle","short_spiky"),e>=10&&this.unlockOption("outfit","battle_dress"),e>=15&&this.unlockOption("accessory","glowing_earrings"),e>=20&&this.unlockOption("aura","pink_radiance"),e>=25&&this.unlockOption("hairStyle","twin_tails"),e>=30&&this.unlockOption("outfit","mystical_kimono"),e>=35&&this.unlockOption("accessory","mystical_crown"),e>=40&&this.unlockOption("aura","cyan_shimmer"),e>=50&&this.unlockOption("hairStyle","elegant_bun"),e>=60&&this.unlockOption("outfit","cyber_suit"),e>=70&&this.unlockOption("accessory","floating_orbs"),e>=80&&this.unlockOption("aura","golden_aura"),e>=90&&this.unlockOption("hairStyle","wild_messy"),e>=100&&(this.unlockOption("outfit","elegant_gown"),this.unlockOption("accessory","energy_wings"),this.unlockOption("aura","rainbow_pulse")),t>=10&&this.unlockOption("hairStyle","short_spiky"),t>=25&&this.unlockOption("aura","pink_radiance"),t>=50&&this.unlockOption("aura","cyan_shimmer")}getSaveData(){return{current:this.current,unlockedOptions:{hairStyles:this.options.hairStyles.filter(e=>e.unlocked).map(e=>e.id),outfits:this.options.outfits.filter(e=>e.unlocked).map(e=>e.id),accessories:this.options.accessories.filter(e=>e.unlocked).map(e=>e.id),auras:this.options.auras.filter(e=>e.unlocked).map(e=>e.id)}}}loadSaveData(e){e.current&&(this.current=e.current),e.unlockedOptions&&Object.keys(e.unlockedOptions).forEach(t=>{e.unlockedOptions[t].forEach(s=>{const i=this.options[t]?.find(a=>a.id===s);i&&(i.unlocked=!0)})}),this.applyCustomization(),this.updateCustomizationUI()}}const dt=document.createElement("style");dt.textContent=`
    @keyframes customUnlockPop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        10% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
        20% { transform: translate(-50%, -50%) scale(1); }
        80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
    }
`;document.head.appendChild(dt);class Zt{constructor(e){this.engine=e,this.rewardTiers={1:{exp:100,gold:50,items:[],message:"Welcome back!"},2:{exp:150,gold:75,items:["health_potion"],message:"Day 2 Bonus!"},3:{exp:200,gold:100,items:["health_potion","mana_potion"],message:"Day 3 Bonus!"},4:{exp:300,gold:150,items:["rare_item"],message:"Day 4 - Rare Item!"},5:{exp:500,gold:250,items:["epic_item"],message:"Day 5 - Epic Reward!"},6:{exp:750,gold:400,items:["epic_item","health_potion"],message:"Day 6 - Keep Going!"},7:{exp:1500,gold:1e3,items:["legendary_item"],message:"Week Complete - Legendary!"},14:{exp:3e3,gold:2500,items:["legendary_item","epic_item"],message:"2 Weeks - Amazing!"},30:{exp:1e4,gold:1e4,items:["legendary_item","legendary_item"],message:"Monthly Master!"}},this.lastLoginDate=null,this.currentStreak=0,this.longestStreak=0,this.totalLogins=0,this.lastRewardClaimed=!1,this.rewardPanel=null,this.init(),console.log("🎁 Daily Rewards System initialized")}init(){this.checkDailyLogin(),this.createRewardUI()}checkDailyLogin(){const e=this.getTodayString();if(!this.lastLoginDate)this.lastLoginDate=e,this.currentStreak=1,this.longestStreak=1,this.totalLogins=1,this.lastRewardClaimed=!1,console.log("🎉 First login! Welcome to Dynasty of Emberveil!"),this.showWelcomeBonus();else if(this.lastLoginDate!==e){const t=this.getYesterdayString();this.lastLoginDate===t?(this.currentStreak++,this.currentStreak>this.longestStreak&&(this.longestStreak=this.currentStreak)):this.currentStreak=1,this.lastLoginDate=e,this.totalLogins++,this.lastRewardClaimed=!1,this.showDailyRewardNotification()}this.engine.saveSystem&&this.engine.saveSystem.saveGame("Daily login check")}getTodayString(){const e=new Date;return`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`}getYesterdayString(){const e=new Date;return e.setDate(e.getDate()-1),`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`}createRewardUI(){const e=document.createElement("div");e.id="daily-rewards-button",e.innerHTML="🎁 Daily<br>Rewards",e.style.cssText=`
            position: absolute;
            top: 120px;
            right: 20px;
            background: linear-gradient(135deg, #ffd60a, #ff6b9d);
            border: 2px solid #ffd60a;
            border-radius: 10px;
            padding: 10px 15px;
            color: #fff;
            cursor: pointer;
            font-weight: bold;
            pointer-events: auto;
            z-index: 100;
            text-align: center;
            font-size: 0.85em;
            line-height: 1.2;
            animation: ${this.lastRewardClaimed?"none":"rewardPulse 2s infinite"};
        `,e.addEventListener("click",()=>this.toggleRewardPanel()),document.getElementById("ui-overlay").appendChild(e),this.rewardButton=e,this.rewardPanel=document.createElement("div"),this.rewardPanel.id="daily-reward-panel",this.rewardPanel.style.cssText=`
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 80%;
            max-width: 600px;
            background: rgba(0, 0, 0, 0.95);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 20px;
            color: #fff;
            display: none;
            pointer-events: auto;
            z-index: 1000;
            box-shadow: 0 0 50px rgba(255, 215, 0, 0.5);
        `,document.getElementById("ui-overlay").appendChild(this.rewardPanel),this.updateRewardUI()}toggleRewardPanel(){const e=this.rewardPanel.style.display==="block";this.rewardPanel.style.display=e?"none":"block",e||this.updateRewardUI()}updateRewardUI(){if(!this.rewardPanel)return;const e=this.getCurrentReward(),t=this.getNextMilestone();let s='<div style="text-align: center;">';if(s+='<h2 style="color: #ffd60a; margin-bottom: 15px;">🎁 Daily Rewards</h2>',s+='<div style="margin-bottom: 20px;">',s+=`<div style="font-size: 1.2em; color: #fff;">Current Streak: <span style="color: #ff6b9d; font-weight: bold;">${this.currentStreak} days</span></div>`,s+=`<div style="color: #aaa; margin-top: 5px;">Longest Streak: ${this.longestStreak} | Total Logins: ${this.totalLogins}</div>`,s+="</div>",s+='<div style="background: rgba(255, 215, 0, 0.1); border: 2px solid #ffd60a; border-radius: 10px; padding: 20px; margin-bottom: 20px;">',s+=`<h3 style="color: #ffd60a; margin-bottom: 10px;">Day ${this.currentStreak} Reward</h3>`,s+=`<div style="font-size: 1.1em; color: #e0aaff; margin-bottom: 15px;">${e.message}</div>`,s+='<div style="display: flex; justify-content: center; gap: 20px; flex-wrap: wrap;">',s+=`<div style="text-align: center;"><div style="font-size: 2em;">✨</div><div>+${e.exp} EXP</div></div>`,s+=`<div style="text-align: center;"><div style="font-size: 2em;">💰</div><div>+${e.gold} Gold</div></div>`,e.items.length>0&&(s+=`<div style="text-align: center;"><div style="font-size: 2em;">🎁</div><div>${e.items.length} Items</div></div>`),s+="</div>",this.lastRewardClaimed?(s+='<div style="margin-top: 15px; color: #52b788; font-weight: bold;">✓ Reward Claimed Today</div>',s+='<div style="color: #888; font-size: 0.9em; margin-top: 5px;">Come back tomorrow for more!</div>'):s+='<button id="claim-reward-btn" style="margin-top: 15px; background: linear-gradient(135deg, #52b788, #2d6a4f); border: none; border-radius: 8px; padding: 12px 30px; color: #fff; font-weight: bold; cursor: pointer; font-size: 1.1em;">Claim Reward!</button>',s+="</div>",t){const a=t-this.currentStreak;s+='<div style="background: rgba(157, 78, 221, 0.1); border: 2px solid #9d4edd; border-radius: 10px; padding: 15px;">',s+=`<h4 style="color: #9d4edd; margin-bottom: 10px;">Next Milestone (Day ${t})</h4>`,s+=`<div style="color: #aaa;">Keep your streak for ${a} more ${a===1?"day":"days"}!</div>`;const n=this.rewardTiers[t];s+=`<div style="margin-top: 10px; color: #e0aaff;">${n.message}</div>`,s+="</div>"}s+="</div>",this.rewardPanel.innerHTML=s;const i=document.getElementById("claim-reward-btn");i&&i.addEventListener("click",()=>this.claimReward())}getCurrentReward(){if(this.rewardTiers[this.currentStreak])return this.rewardTiers[this.currentStreak];const e=100,t=50,s=Math.floor(this.currentStreak/7)+1;return{exp:e*s,gold:t*s,items:this.currentStreak%3===0?["health_potion"]:[],message:`Day ${this.currentStreak} - Keep it up!`}}getNextMilestone(){return Object.keys(this.rewardTiers).map(Number).sort((t,s)=>t-s).find(t=>t>this.currentStreak)}claimReward(){if(this.lastRewardClaimed){console.log("Reward already claimed today");return}const e=this.getCurrentReward();this.engine.player&&this.engine.player.gainExp(e.exp),e.items.length>0&&this.engine.inventorySystem&&e.items.forEach(t=>{const s=this.engine.endlessMode?.currentFloor||1;let i="common";t==="rare_item"?i="rare":t==="epic_item"?i="epic":t==="legendary_item"&&(i="legendary");const a=this.engine.inventorySystem.generateLoot(s,i);this.engine.inventorySystem.addItem(a)}),this.lastRewardClaimed=!0,this.engine.audioSystem&&this.engine.audioSystem.playSoundEffect("achievement"),this.updateRewardUI(),this.rewardButton.style.animation="none",this.engine.saveSystem&&this.engine.saveSystem.saveGame("Daily reward claimed"),this.showRewardClaimedEffect(),console.log(`🎁 Claimed daily reward: Day ${this.currentStreak}`)}showDailyRewardNotification(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 20%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 30px;
            color: #fff;
            font-size: 1.2em;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 0 40px rgba(255, 215, 0, 0.8);
            opacity: 0;
            animation: rewardNotificationPop 4s ease-out forwards;
            pointer-events: none;
        `,e.innerHTML=`
            <div style="font-size: 3em; margin-bottom: 10px;">🎁</div>
            <div style="font-size: 1.5em; color: #ffd60a; font-weight: bold; margin-bottom: 10px;">Daily Reward Available!</div>
            <div style="color: #e0aaff;">Day ${this.currentStreak} Streak</div>
            <div style="color: #aaa; font-size: 0.9em; margin-top: 10px;">Click the gift icon to claim!</div>
        `,document.body.appendChild(e),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},4e3)}showWelcomeBonus(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 3px solid #ffd60a;
            border-radius: 15px;
            padding: 40px;
            color: #fff;
            font-size: 1.3em;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 0 50px rgba(255, 215, 0, 1);
            opacity: 0;
            animation: rewardNotificationPop 5s ease-out forwards;
            pointer-events: none;
            max-width: 500px;
        `,e.innerHTML=`
            <div style="font-size: 4em; margin-bottom: 15px;">🎉</div>
            <div style="font-size: 1.8em; color: #ffd60a; font-weight: bold; margin-bottom: 15px;">Welcome to Dynasty of Emberveil!</div>
            <div style="color: #e0aaff; margin-bottom: 20px;">You've received a welcome bonus!</div>
            <div style="font-size: 1.1em; color: #52b788;">+100 EXP | +50 Gold</div>
            <div style="color: #aaa; font-size: 0.9em; margin-top: 20px;">Log in daily to build your streak and earn bigger rewards!</div>
        `,document.body.appendChild(e),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},5e3)}showRewardClaimedEffect(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 5em;
            z-index: 10001;
            pointer-events: none;
            animation: rewardClaimedEffect 2s ease-out forwards;
        `,e.textContent="🎁✨",document.body.appendChild(e),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},2e3)}getSaveData(){return{lastLoginDate:this.lastLoginDate,currentStreak:this.currentStreak,longestStreak:this.longestStreak,totalLogins:this.totalLogins,lastRewardClaimed:this.lastRewardClaimed}}loadSaveData(e){e.lastLoginDate&&(this.lastLoginDate=e.lastLoginDate),e.currentStreak&&(this.currentStreak=e.currentStreak),e.longestStreak&&(this.longestStreak=e.longestStreak),e.totalLogins&&(this.totalLogins=e.totalLogins),e.lastRewardClaimed!==void 0&&(this.lastRewardClaimed=e.lastRewardClaimed),this.checkDailyLogin(),this.updateRewardUI()}}const ht=document.createElement("style");ht.textContent=`
    @keyframes rewardPulse {
        0%, 100% { transform: scale(1); box-shadow: 0 0 10px rgba(255, 215, 0, 0.5); }
        50% { transform: scale(1.1); box-shadow: 0 0 20px rgba(255, 215, 0, 1); }
    }
    
    @keyframes rewardNotificationPop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        10% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
        15% { transform: translate(-50%, -50%) scale(1); }
        85% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
    }
    
    @keyframes rewardClaimedEffect {
        0% { opacity: 1; transform: translate(-50%, -50%) scale(1) rotate(0deg); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(3) rotate(360deg); }
    }
`;document.head.appendChild(ht);class Yt{constructor(e){this.engine=e,this.steps=[{id:"welcome",title:"Welcome to Dynasty of Emberveil!",message:"You are a Wielder, exploring the twilight realms known as Vibespheres. Let's learn the basics!",highlight:null,action:null},{id:"movement",title:"Movement",message:"Use WASD or Arrow Keys to move your character around the dungeon.",highlight:null,action:"move"},{id:"abilities",title:"Combat Abilities",message:"Press Q, W, E, or R to use your special abilities. Each ability costs mana (MP).",highlight:"#abilities-bar",action:"ability"},{id:"enemies",title:"Defeat Enemies",message:"Use your abilities to defeat enemies. Defeating enemies grants experience and loot!",highlight:null,action:"kill_enemy"},{id:"inventory",title:"Inventory System",message:"Press I to open your inventory. Equip items to become stronger!",highlight:"#inventory-toggle",action:"open_inventory"},{id:"skills",title:"Skill Trees",message:"Press K to open skill trees. Spend skill points (earned by leveling up) to unlock powerful abilities!",highlight:"#skilltree-toggle",action:"open_skills"},{id:"achievements",title:"Achievements",message:"Press A to view achievements. Complete them for bonus rewards!",highlight:"#achievement-toggle",action:"open_achievements"},{id:"customization",title:"Character Customization",message:"Press C to customize your appearance. Unlock more options by leveling up!",highlight:"#customization-toggle",action:"open_customization"},{id:"complete",title:"Tutorial Complete!",message:"You're ready to explore the Vibespheres! Remember: progress is auto-saved every 30 seconds. Good luck, Wielder!",highlight:null,action:null}],this.currentStep=0,this.completed=!1,this.active=!1,this.actionCompleted=!1,this.tutorialPanel=null,this.highlightOverlay=null,console.log("📚 Tutorial System initialized")}start(){this.completed||(this.active=!0,this.currentStep=0,this.createTutorialUI(),this.showStep(0),console.log("📚 Tutorial started"))}createTutorialUI(){this.tutorialPanel=document.createElement("div"),this.tutorialPanel.id="tutorial-panel",this.tutorialPanel.style.cssText=`
            position: absolute;
            bottom: 100px;
            left: 50%;
            transform: translateX(-50%);
            width: 90%;
            max-width: 600px;
            background: rgba(0, 0, 0, 0.95);
            border: 3px solid #52b788;
            border-radius: 15px;
            padding: 25px;
            color: #fff;
            pointer-events: auto;
            z-index: 2000;
            box-shadow: 0 0 30px rgba(82, 183, 136, 0.8);
        `,document.getElementById("ui-overlay").appendChild(this.tutorialPanel),this.highlightOverlay=document.createElement("div"),this.highlightOverlay.id="tutorial-highlight",this.highlightOverlay.style.cssText=`
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            pointer-events: none;
            z-index: 1999;
        `,document.getElementById("ui-overlay").appendChild(this.highlightOverlay)}showStep(e){if(e>=this.steps.length){this.complete();return}this.currentStep=e,this.actionCompleted=!1;const t=this.steps[e];let s='<div style="text-align: center;">';s+=`<h3 style="color: #52b788; margin-bottom: 10px; font-size: 1.3em;">${t.title}</h3>`,s+=`<p style="color: #e0aaff; margin-bottom: 20px; font-size: 1.1em; line-height: 1.6;">${t.message}</p>`,s+='<div style="display: flex; justify-content: center; gap: 8px; margin-bottom: 15px;">';for(let o=0;o<this.steps.length;o++){const r=o<e?"#52b788":o===e?"#ffd60a":"#444";s+=`<div style="width: 12px; height: 12px; border-radius: 50%; background: ${r};"></div>`}s+="</div>",t.action&&(s+='<div style="color: #ffd60a; font-size: 0.95em; margin-bottom: 15px;">Complete this action to continue!</div>'),s+='<div style="display: flex; justify-content: center; gap: 15px;">',e>0&&(s+='<button id="tutorial-prev" style="background: #444; border: none; border-radius: 8px; padding: 10px 20px; color: #fff; cursor: pointer;">← Back</button>'),t.action||(s+='<button id="tutorial-next" style="background: linear-gradient(135deg, #52b788, #2d6a4f); border: none; border-radius: 8px; padding: 10px 30px; color: #fff; font-weight: bold; cursor: pointer;">Next →</button>'),s+='<button id="tutorial-skip" style="background: #888; border: none; border-radius: 8px; padding: 10px 20px; color: #fff; cursor: pointer;">Skip Tutorial</button>',s+="</div>",s+="</div>",this.tutorialPanel.innerHTML=s;const i=document.getElementById("tutorial-next");i&&i.addEventListener("click",()=>this.nextStep());const a=document.getElementById("tutorial-prev");a&&a.addEventListener("click",()=>this.previousStep());const n=document.getElementById("tutorial-skip");n&&n.addEventListener("click",()=>this.skip()),t.highlight?this.highlightElement(t.highlight):this.clearHighlight(),t.action&&this.setupActionListener(t.action)}highlightElement(e){this.highlightOverlay.style.display="block";const t=document.querySelector(e);if(t){const s=t.getBoundingClientRect();this.highlightOverlay.style.clipPath=`polygon(
                0 0,
                0 100%,
                ${s.left-10}px 100%,
                ${s.left-10}px ${s.top-10}px,
                ${s.right+10}px ${s.top-10}px,
                ${s.right+10}px ${s.bottom+10}px,
                ${s.left-10}px ${s.bottom+10}px,
                ${s.left-10}px 100%,
                100% 100%,
                100% 0
            )`,t.style.boxShadow="0 0 20px #52b788",t.style.animation="tutorialPulse 2s infinite"}}clearHighlight(){this.highlightOverlay.style.display="none",document.querySelectorAll("*").forEach(e=>{e.style.animation==="tutorialPulse 2s infinite"&&(e.style.animation="",e.style.boxShadow="")})}setupActionListener(e){this.actionCompleted=!1;const t=()=>{if(!this.actionCompleted)switch(e){case"move":this.engine.player&&(this.engine.player.moveForward||this.engine.player.moveBackward||this.engine.player.moveLeft||this.engine.player.moveRight)&&(this.actionCompleted=!0,setTimeout(()=>this.nextStep(),1e3));break}};this.actionCheckInterval=setInterval(t,100)}onActionCompleted(e){const t=this.steps[this.currentStep];t&&t.action===e&&!this.actionCompleted&&(this.actionCompleted=!0,this.actionCheckInterval&&clearInterval(this.actionCheckInterval),setTimeout(()=>this.nextStep(),1500))}nextStep(){this.actionCheckInterval&&clearInterval(this.actionCheckInterval),this.showStep(this.currentStep+1)}previousStep(){this.actionCheckInterval&&clearInterval(this.actionCheckInterval),this.showStep(this.currentStep-1)}skip(){confirm("Are you sure you want to skip the tutorial? You can always replay it from the settings.")&&this.complete()}complete(){this.active=!1,this.completed=!0,this.actionCheckInterval&&clearInterval(this.actionCheckInterval),this.tutorialPanel&&this.tutorialPanel.parentNode&&this.tutorialPanel.parentNode.removeChild(this.tutorialPanel),this.clearHighlight(),this.highlightOverlay&&this.highlightOverlay.parentNode&&this.highlightOverlay.parentNode.removeChild(this.highlightOverlay),this.showCompletionMessage(),this.engine.saveSystem&&this.engine.saveSystem.saveGame("Tutorial completed"),console.log("📚 Tutorial completed")}showCompletionMessage(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.5);
            background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
            border: 3px solid #52b788;
            border-radius: 15px;
            padding: 40px;
            color: #fff;
            font-size: 1.3em;
            z-index: 10000;
            text-align: center;
            box-shadow: 0 0 50px rgba(82, 183, 136, 1);
            opacity: 0;
            animation: tutorialCompletePop 4s ease-out forwards;
            pointer-events: none;
        `,e.innerHTML=`
            <div style="font-size: 4em; margin-bottom: 15px;">🎓</div>
            <div style="font-size: 1.8em; color: #52b788; font-weight: bold; margin-bottom: 15px;">Tutorial Complete!</div>
            <div style="color: #e0aaff;">You're now ready to conquer the Vibespheres!</div>
            <div style="color: #aaa; font-size: 0.9em; margin-top: 20px;">May the smoke guide your path, Wielder.</div>
        `,document.body.appendChild(e),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},4e3)}getSaveData(){return{completed:this.completed,currentStep:this.currentStep}}loadSaveData(e){e.completed!==void 0&&(this.completed=e.completed),e.currentStep!==void 0&&(this.currentStep=e.currentStep)}}const mt=document.createElement("style");mt.textContent=`
    @keyframes tutorialPulse {
        0%, 100% { box-shadow: 0 0 10px #52b788; }
        50% { box-shadow: 0 0 30px #52b788; }
    }
    
    @keyframes tutorialCompletePop {
        0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        10% { opacity: 1; transform: translate(-50%, -50%) scale(1.1); }
        15% { transform: translate(-50%, -50%) scale(1); }
        85% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        100% { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
    }
`;document.head.appendChild(mt);class Xt{constructor(e){this.gameEngine=e,this.materials=new Map,this.recipes=new Map,this.craftingStations=[],this.unlockedRecipes=new Set,this.initializeMaterials(),this.initializeRecipes(),this.initializeStations()}initializeMaterials(){this.materialTypes={essence_shard:{name:"Essence Shard",rarity:"common",value:5},monster_hide:{name:"Monster Hide",rarity:"common",value:3},bone_fragment:{name:"Bone Fragment",rarity:"common",value:2},mystical_ore:{name:"Mystical Ore",rarity:"uncommon",value:15},corrupted_crystal:{name:"Corrupted Crystal",rarity:"uncommon",value:12},ethereal_fiber:{name:"Ethereal Fiber",rarity:"uncommon",value:10},dragons_scale:{name:"Dragon's Scale",rarity:"rare",value:50},void_essence:{name:"Void Essence",rarity:"rare",value:45},phoenix_feather:{name:"Phoenix Feather",rarity:"rare",value:40},celestial_fragment:{name:"Celestial Fragment",rarity:"epic",value:150},primordial_dust:{name:"Primordial Dust",rarity:"epic",value:120},arcane_catalyst:{name:"Arcane Catalyst",rarity:"epic",value:100},godstone:{name:"Godstone",rarity:"legendary",value:500},chaos_core:{name:"Chaos Core",rarity:"legendary",value:400},reality_crystal:{name:"Reality Crystal",rarity:"legendary",value:350}}}initializeRecipes(){this.addRecipe({id:"sword_iron",name:"Iron Sword",type:"weapon",rarity:"common",station:"forge",materials:{essence_shard:5,monster_hide:3,bone_fragment:2},result:{type:"weapon",subtype:"sword",stats:{attack:15,critChance:.05}},unlocked:!0}),this.addRecipe({id:"sword_steel",name:"Steel Sword",type:"weapon",rarity:"uncommon",station:"forge",materials:{mystical_ore:8,corrupted_crystal:4,essence_shard:10},result:{type:"weapon",subtype:"sword",stats:{attack:30,critChance:.1}},unlocked:!1}),this.addRecipe({id:"staff_basic",name:"Apprentice Staff",type:"weapon",rarity:"common",station:"arcane_table",materials:{essence_shard:8,ethereal_fiber:4},result:{type:"weapon",subtype:"staff",stats:{magicPower:20,manaRegen:2}},unlocked:!0}),this.addRecipe({id:"staff_void",name:"Void Staff",type:"weapon",rarity:"rare",station:"arcane_table",materials:{void_essence:5,corrupted_crystal:8,arcane_catalyst:2},result:{type:"weapon",subtype:"staff",stats:{magicPower:50,manaRegen:5,critChance:.15}},unlocked:!1}),this.addRecipe({id:"armor_leather",name:"Leather Armor",type:"armor",rarity:"common",station:"forge",materials:{monster_hide:10,bone_fragment:5},result:{type:"armor",subtype:"light",stats:{defense:10,evasion:.05}},unlocked:!0}),this.addRecipe({id:"armor_chain",name:"Chainmail Armor",type:"armor",rarity:"uncommon",station:"forge",materials:{mystical_ore:12,monster_hide:8,essence_shard:6},result:{type:"armor",subtype:"medium",stats:{defense:25,hp:50}},unlocked:!1}),this.addRecipe({id:"armor_dragon",name:"Dragon Scale Armor",type:"armor",rarity:"epic",station:"forge",materials:{dragons_scale:8,primordial_dust:4,mystical_ore:15},result:{type:"armor",subtype:"heavy",stats:{defense:60,hp:150,fireResist:.3}},unlocked:!1}),this.addRecipe({id:"ring_power",name:"Ring of Power",type:"accessory",rarity:"uncommon",station:"jeweler",materials:{corrupted_crystal:6,essence_shard:10},result:{type:"accessory",subtype:"ring",stats:{attack:10,magicPower:10}},unlocked:!0}),this.addRecipe({id:"amulet_life",name:"Amulet of Vitality",type:"accessory",rarity:"rare",station:"jeweler",materials:{phoenix_feather:4,void_essence:3,corrupted_crystal:8},result:{type:"accessory",subtype:"amulet",stats:{hp:100,hpRegen:5}},unlocked:!1}),this.addRecipe({id:"potion_health_small",name:"Small Health Potion",type:"consumable",rarity:"common",station:"alchemy",materials:{ethereal_fiber:2,essence_shard:3},result:{type:"consumable",subtype:"potion",effect:"heal",value:50},unlocked:!0,craftAmount:3}),this.addRecipe({id:"potion_health_large",name:"Large Health Potion",type:"consumable",rarity:"uncommon",station:"alchemy",materials:{phoenix_feather:1,ethereal_fiber:5,essence_shard:8},result:{type:"consumable",subtype:"potion",effect:"heal",value:150},unlocked:!1,craftAmount:2}),this.addRecipe({id:"potion_mana",name:"Mana Potion",type:"consumable",rarity:"common",station:"alchemy",materials:{corrupted_crystal:2,essence_shard:4},result:{type:"consumable",subtype:"potion",effect:"mana",value:50},unlocked:!0,craftAmount:3}),this.addRecipe({id:"potion_strength",name:"Strength Elixir",type:"consumable",rarity:"rare",station:"alchemy",materials:{dragons_scale:2,arcane_catalyst:1,essence_shard:10},result:{type:"consumable",subtype:"buff",effect:"strength",value:30,duration:6e4},unlocked:!1,craftAmount:1}),this.addRecipe({id:"enchant_fire",name:"Fire Enchantment",type:"enchantment",rarity:"rare",station:"enchanter",materials:{phoenix_feather:3,arcane_catalyst:2,essence_shard:15},result:{type:"enchantment",element:"fire",stats:{fireDamage:20,burnChance:.15}},unlocked:!1}),this.addRecipe({id:"enchant_void",name:"Void Enchantment",type:"enchantment",rarity:"epic",station:"enchanter",materials:{void_essence:5,primordial_dust:3,celestial_fragment:1},result:{type:"enchantment",element:"void",stats:{voidDamage:35,lifesteal:.1}},unlocked:!1}),this.addRecipe({id:"weapon_godslayer",name:"Godslayer Blade",type:"weapon",rarity:"legendary",station:"forge",materials:{godstone:2,chaos_core:1,dragons_scale:10,celestial_fragment:5},result:{type:"weapon",subtype:"sword",stats:{attack:150,critChance:.3,critDamage:2.5,lifesteal:.15}},unlocked:!1}),this.addRecipe({id:"armor_reality",name:"Reality Warper Armor",type:"armor",rarity:"legendary",station:"forge",materials:{reality_crystal:3,godstone:1,primordial_dust:8,celestial_fragment:4},result:{type:"armor",subtype:"heavy",stats:{defense:100,hp:300,allResist:.25,damageReflect:.2}},unlocked:!1})}initializeStations(){this.stationTypes={forge:{name:"Forge",description:"Craft weapons and armor",unlocked:!0,level:1,maxLevel:10},alchemy:{name:"Alchemy Table",description:"Brew potions and elixirs",unlocked:!0,level:1,maxLevel:10},arcane_table:{name:"Arcane Table",description:"Craft magical weapons",unlocked:!1,level:1,maxLevel:10,unlockRequirement:{playerLevel:10}},jeweler:{name:"Jeweler Bench",description:"Craft accessories",unlocked:!1,level:1,maxLevel:10,unlockRequirement:{playerLevel:15}},enchanter:{name:"Enchanting Altar",description:"Apply enchantments to items",unlocked:!1,level:1,maxLevel:10,unlockRequirement:{playerLevel:20}}}}addRecipe(e){this.recipes.set(e.id,e),e.unlocked&&this.unlockedRecipes.add(e.id)}addMaterial(e,t=1){const s=this.materials.get(e)||0;return this.materials.set(e,s+t),this.checkRecipeUnlocks(),this.materials.get(e)}removeMaterial(e,t=1){const s=this.materials.get(e)||0;return s>=t?(this.materials.set(e,s-t),!0):!1}getMaterialCount(e){return this.materials.get(e)||0}dropMaterialsFromEnemy(e){const t=[],s=this.gameEngine.endlessMode?.currentFloor||1,i=.5,a=e.isBoss?.3:0,n=Math.min(s*.01,.3),o=Math.min(i+a+n,.95);if(Math.random()<o){const r=Math.random();let l;r<.5?l="common":r<.75?l="uncommon":r<.9?l="rare":r<.98?l="epic":l="legendary";const c=Object.entries(this.materialTypes).filter(([m,u])=>u.rarity===l).map(([m,u])=>m);if(c.length>0){const m=c[Math.floor(Math.random()*c.length)],u=e.isBoss?Math.floor(Math.random()*3)+2:1;this.addMaterial(m,u),t.push({id:m,amount:u,material:this.materialTypes[m]})}}return t}canCraft(e){const t=this.recipes.get(e);if(!t||!this.unlockedRecipes.has(e))return!1;const s=this.stationTypes[t.station];if(!s||!s.unlocked)return!1;for(const[i,a]of Object.entries(t.materials))if(this.getMaterialCount(i)<a)return!1;return!0}craft(e){if(!this.canCraft(e))return{success:!1,reason:"Cannot craft this recipe"};const t=this.recipes.get(e);for(const[a,n]of Object.entries(t.materials))this.removeMaterial(a,n);const s=t.craftAmount||1,i=[];for(let a=0;a<s;a++){const n=this.createItemFromRecipe(t);i.push(n),this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.addItem(n)}return this.gainCraftingExp(t),{success:!0,recipe:t,items:i}}createItemFromRecipe(e){const t={id:`crafted_${e.id}_${Date.now()}`,name:e.name,type:e.result.type,subtype:e.result.subtype,rarity:e.rarity,stats:{...e.result.stats},crafted:!0,craftedAt:Date.now()};if(e.result.effect&&(t.effect=e.result.effect,t.value=e.result.value,t.duration=e.result.duration),e.result.element&&(t.element=e.result.element),t.stats){for(const[s,i]of Object.entries(t.stats))if(typeof i=="number"&&i>1){const n=Math.floor(i*.9),o=Math.ceil(i*(1+.1));t.stats[s]=Math.floor(Math.random()*(o-n+1))+n}}return t}gainCraftingExp(e){const s={common:10,uncommon:25,rare:50,epic:100,legendary:250}[e.rarity]||10;this.gameEngine.player&&console.log(`Gained ${s} crafting experience from ${e.name}`)}checkRecipeUnlocks(){for(const[e,t]of this.recipes.entries())this.unlockedRecipes.has(e)||Object.keys(t.materials).some(i=>this.getMaterialCount(i)>0)&&Math.random()<.1&&this.unlockRecipe(e)}unlockRecipe(e){const t=this.recipes.get(e);return t&&!this.unlockedRecipes.has(e)?(this.unlockedRecipes.add(e),console.log(`Discovered recipe: ${t.name}!`),!0):!1}unlockStation(e){const t=this.stationTypes[e];if(t&&!t.unlocked){if(t.unlockRequirement){const s=this.gameEngine.player;if(t.unlockRequirement.playerLevel&&s.level<t.unlockRequirement.playerLevel)return!1}return t.unlocked=!0,console.log(`Unlocked crafting station: ${t.name}!`),!0}return!1}upgradeStation(e,t={}){const s=this.stationTypes[e];if(!s||!s.unlocked||s.level>=s.maxLevel)return!1;for(const[i,a]of Object.entries(t))if(this.getMaterialCount(i)<a)return!1;for(const[i,a]of Object.entries(t))this.removeMaterial(i,a);return s.level++,console.log(`Upgraded ${s.name} to level ${s.level}!`),!0}getAvailableRecipes(e={}){const t=[];for(const[s,i]of this.recipes.entries())this.unlockedRecipes.has(s)&&(e.type&&i.type!==e.type||e.rarity&&i.rarity!==e.rarity||e.station&&i.station!==e.station||t.push({id:s,...i,canCraft:this.canCraft(s)}));return t}getAllMaterials(){const e=[];for(const[t,s]of Object.entries(this.materialTypes))e.push({id:t,...s,count:this.getMaterialCount(t)});return e}save(){return{materials:Array.from(this.materials.entries()),unlockedRecipes:Array.from(this.unlockedRecipes),stations:Object.entries(this.stationTypes).map(([e,t])=>({id:e,unlocked:t.unlocked,level:t.level}))}}load(e){if(e&&(e.materials&&(this.materials=new Map(e.materials)),e.unlockedRecipes&&(this.unlockedRecipes=new Set(e.unlockedRecipes)),e.stations))for(const t of e.stations){const s=this.stationTypes[t.id];s&&(s.unlocked=t.unlocked,s.level=t.level)}}update(e){if(this.gameEngine.player)for(const[t,s]of Object.entries(this.stationTypes))!s.unlocked&&s.unlockRequirement&&this.gameEngine.player.level>=s.unlockRequirement.playerLevel&&this.unlockStation(t)}}class Jt{constructor(e){this.gameEngine=e,this.currencies={gold:100,gems:0,tokens:0},this.merchants=new Map,this.shopInventories=new Map,this.merchantEvents=[],this.basePrices=new Map,this.priceMultipliers={common:1,uncommon:2.5,rare:6,epic:15,legendary:40},this.transactionHistory=[],this.dailyTransactionCount=0,this.lastResetDate=Date.now(),this.initializeMerchants()}initializeMerchants(){this.addMerchant({id:"general_merchant",name:"General Merchant",type:"general",location:"town",permanent:!0,stock:{weapons:5,armor:5,consumables:10,materials:15},buyMultiplier:1,sellMultiplier:.5,restockTime:36e5,lastRestock:Date.now()}),this.addMerchant({id:"traveling_merchant",name:"Traveling Merchant",type:"traveling",location:"dungeon",permanent:!1,spawnChance:.05,stock:{weapons:3,armor:3,accessories:4,rare_materials:8},buyMultiplier:.8,sellMultiplier:.7,duration:3e5,spawnTime:null}),this.addMerchant({id:"black_market",name:"Black Market Dealer",type:"black_market",location:"hidden",permanent:!1,unlockRequirement:{floor:25},stock:{legendary_items:2,epic_items:5,forbidden_materials:10},buyMultiplier:2,sellMultiplier:1,restockTime:72e5,lastRestock:Date.now()}),this.addMerchant({id:"weaponsmith",name:"Master Weaponsmith",type:"specialty",specialty:"weapons",location:"town",permanent:!0,stock:{weapons:10,weapon_materials:20},buyMultiplier:.9,sellMultiplier:.6,restockTime:18e5,lastRestock:Date.now()}),this.addMerchant({id:"alchemist",name:"Master Alchemist",type:"specialty",specialty:"potions",location:"town",permanent:!0,stock:{potions:15,elixirs:10,alchemy_materials:25},buyMultiplier:.9,sellMultiplier:.6,restockTime:18e5,lastRestock:Date.now()})}addMerchant(e){this.merchants.set(e.id,e),this.generateShopInventory(e)}generateShopInventory(e){const t=[],s=this.gameEngine.endlessMode?.currentFloor||1;for(const[i,a]of Object.entries(e.stock))for(let n=0;n<a;n++){const o=this.generateShopItem(i,s,e);o&&t.push(o)}return this.shopInventories.set(e.id,t),t}generateShopItem(e,t,s){const i=Math.random();let a;const n=s.type==="black_market"?.3:0,o=Math.min(t*.01,.2),r=i-n-o;return r<.4?a="common":r<.65?a="uncommon":r<.85?a="rare":r<.96?a="epic":a="legendary",{id:`shop_${e}_${Date.now()}_${Math.random()}`,category:e,rarity:a,name:this.generateItemName(e,a),level:Math.max(1,t-2+Math.floor(Math.random()*5)),stats:this.generateItemStats(e,a,t),price:this.calculatePrice(e,a,t,s),stock:e.includes("consumable")||e.includes("material")?Math.floor(Math.random()*5)+1:1}}generateItemName(e,t){const s={common:["Simple","Basic","Common","Standard"],uncommon:["Quality","Enhanced","Superior","Fine"],rare:["Rare","Exquisite","Exceptional","Masterwork"],epic:["Epic","Legendary","Ancient","Mythical"],legendary:["Godlike","Divine","Transcendent","Eternal"]},i={weapons:["Sword","Blade","Staff","Wand","Bow"],armor:["Armor","Plate","Mail","Robe","Guard"],accessories:["Ring","Amulet","Charm","Talisman"],consumables:["Potion","Elixir","Tonic"],potions:["Potion","Elixir"],materials:["Material","Essence","Crystal","Fragment"]},a=s[t][Math.floor(Math.random()*s[t].length)],n=i[e]?i[e][Math.floor(Math.random()*i[e].length)]:"Item";return`${a} ${n}`}generateItemStats(e,t,s){const i={common:10,uncommon:25,rare:50,epic:100,legendary:200}[t],a=1+s*.1,n={};return e.includes("weapon")?(n.attack=Math.floor(i*a),t!=="common"&&(n.critChance=.05*Object.keys(i).indexOf(t))):e.includes("armor")?(n.defense=Math.floor(i*a),n.hp=Math.floor(i*2*a)):e.includes("accessory")&&(n.attack=Math.floor(i*.5*a),n.defense=Math.floor(i*.5*a)),n}calculatePrice(e,t,s,i){const a={common:50,uncommon:150,rare:500,epic:2e3,legendary:1e4}[t],n=1+s*.05,o=i.buyMultiplier||1,r=1+(Math.random()*.2-.1),l=Math.floor(a*n*o*r);return Math.max(1,l)}buyItem(e,t,s=1){if(!this.merchants.get(e))return{success:!1,reason:"Merchant not found"};const a=this.shopInventories.get(e),n=a?.find(r=>r.id===t);if(!n)return{success:!1,reason:"Item not found"};if(n.stock<s)return{success:!1,reason:"Not enough stock"};const o=n.price*s;if(this.currencies.gold<o)return{success:!1,reason:"Not enough gold"};if(this.currencies.gold-=o,n.stock-=s,n.stock<=0){const r=a.indexOf(n);r>-1&&a.splice(r,1)}if(this.gameEngine.inventorySystem)for(let r=0;r<s;r++)this.gameEngine.inventorySystem.addItem({...n});return this.recordTransaction({type:"buy",merchantId:e,item:n.name,quantity:s,cost:o,timestamp:Date.now()}),{success:!0,item:n,quantity:s,cost:o}}sellItem(e,t,s=1){const i=this.merchants.get(e);if(!i)return{success:!1,reason:"Merchant not found"};const a=this.calculateItemValue(t),n=Math.floor(a*i.sellMultiplier*s);return this.currencies.gold+=n,this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.removeItem(t.id,s),this.recordTransaction({type:"sell",merchantId:e,item:t.name,quantity:s,value:n,timestamp:Date.now()}),{success:!0,item:t,quantity:s,value:n}}calculateItemValue(e){let s={common:25,uncommon:75,rare:250,epic:1e3,legendary:5e3}[e.rarity]||10;if(e.level&&(s+=e.level*5),e.stats){const i=Object.values(e.stats).filter(a=>typeof a=="number").reduce((a,n)=>a+n,0);s+=i*2}return Math.max(1,Math.floor(s))}checkMerchantEvents(e){const t=this.merchants.get("traveling_merchant");t&&!t.spawnTime&&Math.random()<t.spawnChance&&this.spawnTravelingMerchant(),t?.spawnTime&&Date.now()-t.spawnTime>t.duration&&this.despawnTravelingMerchant(),e%10===0&&Math.random()<.3&&this.triggerMerchantEvent(e)}spawnTravelingMerchant(){const e=this.merchants.get("traveling_merchant");return e?(e.spawnTime=Date.now(),this.generateShopInventory(e),console.log("🧙 A traveling merchant has appeared!"),!0):!1}despawnTravelingMerchant(){const e=this.merchants.get("traveling_merchant");return e?(e.spawnTime=null,this.shopInventories.set("traveling_merchant",[]),console.log("🧙 The traveling merchant has left..."),!0):!1}triggerMerchantEvent(e){const t=[{name:"Flash Sale",description:"All items 30% off!",effect:()=>{for(const i of this.merchants.values())i.buyMultiplier*=.7},duration:18e4,endEffect:()=>{this.initializeMerchants()}},{name:"Merchant Festival",description:"Merchants buy items at 80% value!",effect:()=>{for(const i of this.merchants.values())i.sellMultiplier=.8},duration:3e5,endEffect:()=>{this.initializeMerchants()}},{name:"Rare Item Shipment",description:"Legendary items available!",effect:()=>{for(const i of this.merchants.keys()){const a=this.merchants.get(i);if(a.permanent){const n=this.shopInventories.get(i);for(let o=0;o<3;o++){const r=this.generateShopItem("weapons",e,{...a,buyMultiplier:a.buyMultiplier*1.5});r.rarity="legendary",n.push(r)}}}},duration:6e5,endEffect:()=>{}}],s=t[Math.floor(Math.random()*t.length)];s.effect(),console.log(`🎉 Merchant Event: ${s.name} - ${s.description}`),setTimeout(()=>{s.endEffect(),console.log(`Event ended: ${s.name}`)},s.duration),this.merchantEvents.push({...s,startTime:Date.now(),floor:e})}restockMerchant(e){const t=this.merchants.get(e);return t&&Date.now()-t.lastRestock>=t.restockTime?(this.generateShopInventory(t),t.lastRestock=Date.now(),console.log(`${t.name} has restocked their inventory!`),!0):!1}convertCurrency(e,t,s){const i={gold_to_gems:100,gems_to_tokens:10,tokens_to_gold:1e3},a=`${e}_to_${t}`,n=i[a];return n?this.currencies[e]<s*n?{success:!1,reason:`Not enough ${e}`}:(this.currencies[e]-=s*n,this.currencies[t]+=s,{success:!0,converted:s,spent:s*n,rate:n}):{success:!1,reason:"Invalid conversion"}}addCurrency(e,t){return this.currencies.hasOwnProperty(e)?(this.currencies[e]+=t,this.currencies[e]):0}removeCurrency(e,t){return this.currencies.hasOwnProperty(e)&&this.currencies[e]>=t?(this.currencies[e]-=t,!0):!1}getCurrency(e){return this.currencies[e]||0}recordTransaction(e){this.transactionHistory.push(e),this.dailyTransactionCount++,this.transactionHistory.length>100&&this.transactionHistory.shift()}getMerchantInventory(e){return this.shopInventories.get(e)||[]}getAvailableMerchants(){const e=this.gameEngine.endlessMode?.currentFloor||1,t=[];for(const[s,i]of this.merchants.entries())i.permanent?t.push({id:s,...i}):i.spawnTime?t.push({id:s,...i}):i.unlockRequirement&&e>=i.unlockRequirement.floor&&t.push({id:s,...i});return t}resetDaily(){const e=Date.now();(e-this.lastResetDate)/(1e3*60*60*24)>=1&&(this.dailyTransactionCount=0,this.lastResetDate=e,console.log("Economy daily counters reset"))}save(){return{currencies:{...this.currencies},merchants:Array.from(this.merchants.entries()).map(([e,t])=>({id:e,lastRestock:t.lastRestock,spawnTime:t.spawnTime,unlocked:t.unlocked})),shopInventories:Array.from(this.shopInventories.entries()),transactionHistory:this.transactionHistory.slice(-50),dailyTransactionCount:this.dailyTransactionCount,lastResetDate:this.lastResetDate}}load(e){if(e){if(e.currencies&&(this.currencies={...e.currencies}),e.merchants)for(const t of e.merchants){const s=this.merchants.get(t.id);s&&(s.lastRestock=t.lastRestock,s.spawnTime=t.spawnTime,s.unlocked=t.unlocked)}e.shopInventories&&(this.shopInventories=new Map(e.shopInventories)),e.transactionHistory&&(this.transactionHistory=e.transactionHistory),e.dailyTransactionCount!==void 0&&(this.dailyTransactionCount=e.dailyTransactionCount),e.lastResetDate&&(this.lastResetDate=e.lastResetDate)}}update(e){for(const t of this.merchants.keys())this.restockMerchant(t);this.resetDaily(),this.gameEngine.endlessMode&&this.checkMerchantEvents(this.gameEngine.endlessMode.currentFloor)}}class es{constructor(e){this.gameEngine=e,this.maxEnhancementLevel=15,this.enhancementCosts=this.initializeEnhancementCosts(),this.maxSockets=3,this.gemTypes=this.initializeGemTypes(),this.reforgeStats=["attack","defense","hp","magicPower","critChance","critDamage"],this.maxDurability=100,this.repairCostPerPoint=5,this.transmogCollection=new Set,this.enhancementSuccessRates=this.initializeSuccessRates()}initializeEnhancementCosts(){const e={};for(let t=1;t<=this.maxEnhancementLevel;t++)e[t]={gold:Math.floor(50*Math.pow(1.5,t)),materials:{essence_shard:Math.floor(2*t),mystical_ore:t>5?Math.floor(t-5):0,corrupted_crystal:t>10?Math.floor(t-10):0}};return e}initializeSuccessRates(){const e={};for(let t=1;t<=this.maxEnhancementLevel;t++)t<=5?e[t]=1:t<=10?e[t]=.9-(t-5)*.1:e[t]=.4-(t-10)*.05;return e}initializeGemTypes(){return{ruby:{name:"Ruby",rarity:"uncommon",stats:{attack:10},color:"#ff0000"},sapphire:{name:"Sapphire",rarity:"uncommon",stats:{defense:10},color:"#0000ff"},emerald:{name:"Emerald",rarity:"uncommon",stats:{hp:30},color:"#00ff00"},diamond:{name:"Diamond",rarity:"rare",stats:{attack:15,defense:15},color:"#ffffff"},amethyst:{name:"Amethyst",rarity:"rare",stats:{magicPower:20},color:"#9966cc"},topaz:{name:"Topaz",rarity:"rare",stats:{critChance:.05},color:"#ffaa00"},onyx:{name:"Onyx",rarity:"epic",stats:{critDamage:.5},color:"#000000"},opal:{name:"Opal",rarity:"epic",stats:{attack:20,magicPower:20},color:"#ccffff"},prismatic:{name:"Prismatic Gem",rarity:"legendary",stats:{attack:30,defense:30,hp:50},color:"rainbow"}}}enhanceItem(e,t=!1){if(!e)return{success:!1,reason:"No item provided"};if(e.enhancement||(e.enhancement=0),e.enhancement>=this.maxEnhancementLevel)return{success:!1,reason:"Maximum enhancement level reached"};const s=e.enhancement+1,i=this.enhancementCosts[s];if(this.gameEngine.economySystem&&this.gameEngine.economySystem.getCurrency("gold")<i.gold)return{success:!1,reason:"Not enough gold"};if(this.gameEngine.craftingSystem){for(const[o,r]of Object.entries(i.materials))if(r>0&&this.gameEngine.craftingSystem.getMaterialCount(o)<r)return{success:!1,reason:`Not enough ${o}`}}let a=this.enhancementSuccessRates[s];if(t){a=1,i.gold*=2;for(const o in i.materials)i.materials[o]*=2}if(this.gameEngine.economySystem&&this.gameEngine.economySystem.removeCurrency("gold",i.gold),this.gameEngine.craftingSystem)for(const[o,r]of Object.entries(i.materials))r>0&&this.gameEngine.craftingSystem.removeMaterial(o,r);return Math.random()<a?(e.enhancement=s,this.applyEnhancementBonus(e),{success:!0,level:s,item:e,message:`Enhanced ${e.name} to +${s}!`}):s>10?Math.random()<.3?{success:!1,destroyed:!0,message:`Enhancement failed! ${e.name} was destroyed!`}:(e.enhancement=Math.max(0,e.enhancement-1),this.applyEnhancementBonus(e),{success:!1,reduced:!0,level:e.enhancement,message:`Enhancement failed! ${e.name} reduced to +${e.enhancement}`}):{success:!1,message:"Enhancement failed! Resources lost."}}applyEnhancementBonus(e){if(!e.stats||!e.enhancement)return;e.baseStats||(e.baseStats={...e.stats});const t=1+e.enhancement*.1;for(const[s,i]of Object.entries(e.baseStats))typeof i=="number"&&(e.stats[s]=Math.floor(i*t))}addSocket(e,t={}){if(!e)return{success:!1,reason:"No item provided"};if(e.sockets||(e.sockets=[]),e.sockets.length>=this.maxSockets)return{success:!1,reason:"Maximum sockets reached"};const s=t.gold||1e3*(e.sockets.length+1);if(this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<s)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",s)}return e.sockets.push(null),{success:!0,sockets:e.sockets.length,message:`Added socket to ${e.name}! (${e.sockets.length}/${this.maxSockets})`}}insertGem(e,t,s){if(!e||!e.sockets)return{success:!1,reason:"Item has no sockets"};if(t<0||t>=e.sockets.length)return{success:!1,reason:"Invalid socket index"};if(e.sockets[t]!==null)return{success:!1,reason:"Socket already occupied"};const i=this.gemTypes[s];return i?(e.sockets[t]=s,this.applySocketBonuses(e),{success:!0,gem:i,message:`Inserted ${i.name} into ${e.name}!`}):{success:!1,reason:"Invalid gem type"}}removeGem(e,t,s=!1){if(!e||!e.sockets)return{success:!1,reason:"Item has no sockets"};if(t<0||t>=e.sockets.length)return{success:!1,reason:"Invalid socket index"};const i=e.sockets[t];if(!i)return{success:!1,reason:"Socket is empty"};if(s&&this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<500)return{success:!1,reason:"Not enough gold to preserve gem"};this.gameEngine.economySystem.removeCurrency("gold",500)}return e.sockets[t]=null,this.applySocketBonuses(e),{success:!0,gem:i,preserved:s,message:s?`Removed and preserved ${this.gemTypes[i].name}`:`Removed ${this.gemTypes[i].name} (destroyed)`}}applySocketBonuses(e){if(!(!e.sockets||!e.stats)){if(e.baseStats){for(const t in e.baseStats)e.stats[t]=e.baseStats[t];e.enhancement&&this.applyEnhancementBonus(e)}e.socketBonuses={};for(const t of e.sockets)if(t){const s=this.gemTypes[t];if(s&&s.stats)for(const[i,a]of Object.entries(s.stats))e.socketBonuses[i]=(e.socketBonuses[i]||0)+a,e.stats[i]=(e.stats[i]||0)+a}}}reforgeItem(e,t=null){if(!e||!e.stats)return{success:!1,reason:"Invalid item"};const s=500,i={common:1,uncommon:2,rare:4,epic:8,legendary:16}[e.rarity]||1,a=s*i;if(this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<a)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",a)}const n=Object.keys(e.stats),o=t||n[Math.floor(Math.random()*n.length)];if(!n.includes(o))return{success:!1,reason:"Stat not found on item"};const r=e.stats[o],l=.2,c=Math.floor(r*(1-l)),m=Math.ceil(r*(1+l)),u=Math.floor(Math.random()*(m-c+1))+c;return e.stats[o]=Math.max(1,u),e.baseStats&&e.baseStats[o]&&(e.baseStats[o]=e.stats[o]),{success:!0,stat:o,oldValue:r,newValue:e.stats[o],improved:e.stats[o]>r,message:`Reforged ${o}: ${r} → ${e.stats[o]}`}}fuseItems(e,t){if(!e||!t)return{success:!1,reason:"Need two items to fuse"};if(e.type!==t.type)return{success:!1,reason:"Items must be same type"};const s=2e3;if(this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<s)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",s)}const i={...e,id:`fused_${Date.now()}`,name:`Fused ${e.name}`,fused:!0,stats:{}},a=new Set([...Object.keys(e.stats||{}),...Object.keys(t.stats||{})]);for(const n of a){const o=e.stats?.[n]||0,r=t.stats?.[n]||0;typeof o=="number"&&typeof r=="number"?i.stats[n]=Math.floor((o+r)/2*1.1):i.stats[n]=o||r}if((e.enhancement||t.enhancement)&&(i.enhancement=Math.max(e.enhancement||0,t.enhancement||0)),(e.sockets||t.sockets)&&(i.sockets=[...e.sockets||[],...t.sockets||[]].slice(0,this.maxSockets)),e.rarity===t.rarity){const n={common:"uncommon",uncommon:"rare",rare:"epic",epic:"legendary",legendary:"legendary"};i.rarity=n[e.rarity]||e.rarity}return{success:!0,fusedItem:i,message:`Fused items into ${i.name}!`}}applyTransmog(e,t){if(!e||!t)return{success:!1,reason:"Need base item and appearance item"};const s=250;if(this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<s)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",s)}return e.transmog={appearance:t.name,rarity:t.rarity,appliedAt:Date.now()},this.transmogCollection.add(t.name),{success:!0,message:`${e.name} now appears as ${t.name}!`}}removeTransmog(e){return!e||!e.transmog?{success:!1,reason:"Item has no transmog"}:(delete e.transmog,{success:!0,message:"Transmog removed"})}reduceDurability(e,t=1){if(e)return e.durability===void 0&&(e.durability=this.maxDurability),e.durability=Math.max(0,e.durability-t),e.durability===0?(e.broken=!0,{broken:!0}):{durability:e.durability}}repairItem(e,t=null){if(!e)return{success:!1,reason:"No item provided"};if(e.durability===void 0&&(e.durability=this.maxDurability),e.durability>=this.maxDurability)return{success:!1,reason:"Item is already at full durability"};const s=t||this.maxDurability-e.durability,i=Math.min(s,this.maxDurability-e.durability),a=i*this.repairCostPerPoint;if(this.gameEngine.economySystem){if(this.gameEngine.economySystem.getCurrency("gold")<a)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",a)}return e.durability+=i,e.broken=!1,{success:!0,repaired:i,cost:a,durability:e.durability,message:`Repaired ${e.name} (${e.durability}/${this.maxDurability})`}}getItemPowerLevel(e){if(!e||!e.stats)return 0;let t=0;for(const i of Object.values(e.stats))typeof i=="number"&&(t+=i);return e.enhancement&&(t*=1+e.enhancement*.1),t*={common:1,uncommon:1.5,rare:2.5,epic:4,legendary:7}[e.rarity]||1,Math.floor(t)}save(){return{transmogCollection:Array.from(this.transmogCollection)}}load(e){e&&e.transmogCollection&&(this.transmogCollection=new Set(e.transmogCollection))}update(e){}}class ts{constructor(e){this.gameEngine=e,this.activeTraders=new Map,this.traderSpawnPoints=[],this.availableTrades=[],this.completedTrades=new Set,this.tradeQuests=[],this.activeTradeQuests=[],this.barterOffers=new Map,this.initializeTraders(),this.initializeTradeQuests()}initializeTraders(){this.traderTypes={dungeon_trader:{name:"Dungeon Trader",description:"Offers emergency supplies",spawnChance:.15,location:"dungeon",offerTypes:["healing","emergency_gear","escape_items"],trades:[{id:"dt_health_potion",give:{gold:100},receive:{type:"consumable",name:"Health Potion",effect:"heal",value:50}},{id:"dt_mana_potion",give:{gold:100},receive:{type:"consumable",name:"Mana Potion",effect:"mana",value:50}},{id:"dt_escape_scroll",give:{gold:500},receive:{type:"consumable",name:"Scroll of Escape",effect:"teleport",value:1}}]},wandering_merchant:{name:"Wandering Merchant",description:"Sells rare and exotic goods",spawnChance:.05,location:"random",offerTypes:["rare_items","materials","special_goods"],trades:[],dynamicInventory:!0},material_exchanger:{name:"Material Exchanger",description:"Exchanges crafting materials",spawnChance:.1,location:"dungeon",offerTypes:["material_exchange"],trades:[{id:"me_common_to_uncommon",give:{material:"essence_shard",amount:10},receive:{material:"mystical_ore",amount:1}},{id:"me_uncommon_to_rare",give:{material:"mystical_ore",amount:5},receive:{material:"void_essence",amount:1}},{id:"me_rare_to_epic",give:{material:"void_essence",amount:3},receive:{material:"primordial_dust",amount:1}}]},gear_exchanger:{name:"Gear Exchanger",description:"Exchanges equipment for different items",spawnChance:.08,location:"dungeon",offerTypes:["gear_exchange"],acceptsItems:!0},quest_trader:{name:"Quest Trader",description:"Offers trading challenges",spawnChance:.06,location:"special",offerTypes:["trade_quests"],questGiver:!0}}}initializeTradeQuests(){this.tradeQuestTemplates=[{id:"tq_material_collection",name:"Material Collector",description:"Deliver specific materials",type:"collection",requirements:[{material:"essence_shard",amount:50},{material:"mystical_ore",amount:20}],rewards:{gold:2e3,exp:500,item:{type:"weapon",rarity:"rare"}},repeatable:!0,cooldown:36e5},{id:"tq_rare_item_hunt",name:"Rare Item Hunter",description:"Find and deliver a rare item",type:"item_delivery",requirements:[{itemType:"weapon",minRarity:"rare",amount:1}],rewards:{gold:5e3,gems:10,materials:[{id:"celestial_fragment",amount:2}]},repeatable:!1},{id:"tq_bulk_trade",name:"Bulk Trader",description:"Trade multiple items for a reward package",type:"bulk_trade",requirements:[{itemType:"any",minRarity:"uncommon",amount:10}],rewards:{gold:3e3,exp:1e3,randomItems:5},repeatable:!0,cooldown:72e5},{id:"tq_artifact_exchange",name:"Artifact Exchange",description:"Exchange artifacts for legendary rewards",type:"special",requirements:[{material:"godstone",amount:1},{gold:1e4}],rewards:{item:{type:"weapon",rarity:"legendary",guaranteed:!0},gems:50},repeatable:!1,unlockRequirement:{floor:50}}]}spawnTrader(e,t="dungeon"){for(const[s,i]of Object.entries(this.traderTypes))if(!(i.location!==t&&i.location!=="random")&&Math.random()<i.spawnChance){const a=this.createTrader(s,e);if(a)return this.activeTraders.set(a.id,a),console.log(`🧙 ${a.name} has appeared!`),a}return null}createTrader(e,t){const s=this.traderTypes[e];if(!s)return null;const i={id:`trader_${e}_${Date.now()}`,type:e,name:s.name,description:s.description,floor:t,spawnTime:Date.now(),location:this.generateTraderLocation(),...s};return s.dynamicInventory&&(i.trades=this.generateDynamicTrades(t,s)),i}generateDynamicTrades(e,t){const s=[],i=3+Math.floor(Math.random()*3);for(let a=0;a<i;a++){const n=this.generateRandomTrade(e);n&&s.push(n)}return s}generateRandomTrade(e){const t=["item_for_gold","material_for_item","item_for_item"];switch(t[Math.floor(Math.random()*t.length)]){case"item_for_gold":return{id:`trade_${Date.now()}_${Math.random()}`,give:{gold:Math.floor(500+e*50+Math.random()*500)},receive:this.generateRandomItem(e,"uncommon")};case"material_for_item":return{id:`trade_${Date.now()}_${Math.random()}`,give:{material:this.getRandomMaterial("common"),amount:10+Math.floor(Math.random()*20)},receive:this.generateRandomItem(e,"rare")};case"item_for_item":return{id:`trade_${Date.now()}_${Math.random()}`,give:{item:this.generateRandomItem(e,"uncommon")},receive:this.generateRandomItem(e,"rare")}}return null}generateRandomItem(e,t="common"){const s=["common","uncommon","rare","epic","legendary"],i=s.indexOf(t),a=s[i+Math.floor(Math.random()*(s.length-i))],n=["weapon","armor","accessory","consumable"],o=n[Math.floor(Math.random()*n.length)];return{type:o,rarity:a,level:e,name:`${a} ${o}`,stats:this.generateItemStats(o,a,e)}}generateItemStats(e,t,s){const i={common:10,uncommon:25,rare:50,epic:100,legendary:200}[t]||10,a=1+s*.1,n={};switch(e){case"weapon":n.attack=Math.floor(i*a);break;case"armor":n.defense=Math.floor(i*a),n.hp=Math.floor(i*2*a);break;case"accessory":n.attack=Math.floor(i*.5*a),n.defense=Math.floor(i*.5*a);break}return n}getRandomMaterial(e="common"){const t={common:["essence_shard","monster_hide","bone_fragment"],uncommon:["mystical_ore","corrupted_crystal","ethereal_fiber"],rare:["dragons_scale","void_essence","phoenix_feather"],epic:["celestial_fragment","primordial_dust","arcane_catalyst"],legendary:["godstone","chaos_core","reality_crystal"]},s=t[e]||t.common;return s[Math.floor(Math.random()*s.length)]}generateTraderLocation(){return{x:Math.random()*100-50,y:1,z:Math.random()*100-50}}executeTrade(e,t){const s=this.activeTraders.get(e);if(!s)return{success:!1,reason:"Trader not found"};const i=s.trades.find(o=>o.id===t);if(!i)return{success:!1,reason:"Trade not found"};const a=this.validateTradeRequirements(i.give);if(!a.success)return a;this.consumeTradeRequirements(i.give),this.giveTradeRewards(i.receive),this.completedTrades.add(t);const n=s.trades.indexOf(i);return n>-1&&s.trades.splice(n,1),{success:!0,trade:i,message:`Trade completed with ${s.name}!`}}validateTradeRequirements(e){return e.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.getCurrency("gold")<e.gold?{success:!1,reason:"Not enough gold"}:e.material&&e.amount&&this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.getMaterialCount(e.material)<e.amount?{success:!1,reason:`Not enough ${e.material}`}:e.item&&this.gameEngine.inventorySystem&&!this.gameEngine.inventorySystem.hasItem(e.item)?{success:!1,reason:"Required item not in inventory"}:{success:!0}}consumeTradeRequirements(e){e.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.removeCurrency("gold",e.gold),e.material&&e.amount&&this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.removeMaterial(e.material,e.amount),e.item&&this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.removeItem(e.item.id||e.item)}giveTradeRewards(e){if(e.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",e.gold),e.gems&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gems",e.gems),e.material&&e.amount&&this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.addMaterial(e.material,e.amount),e.type&&this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.addItem(e),e.materials&&this.gameEngine.craftingSystem)for(const t of e.materials)this.gameEngine.craftingSystem.addMaterial(t.id,t.amount)}proposeBarterOffer(e,t,s){if(!this.activeTraders.get(e))return{success:!1,reason:"Trader not found"};const a=this.calculateItemsValue(t),n=this.calculateItemsValue(s),o=1.2;if(a>=n*o){for(const l of t)this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.removeItem(l.id);for(const l of s)this.gameEngine.inventorySystem&&this.gameEngine.inventorySystem.addItem(l);return{success:!0,message:"Barter accepted!",offerValue:a,requestValue:n}}else return{success:!1,reason:"Offer too low",counterOffer:{...s,adjustedValue:a/o},offerValue:a,requestValue:n}}calculateItemsValue(e){let t=0;for(const s of e)this.gameEngine.enhancementSystem?t+=this.gameEngine.enhancementSystem.getItemPowerLevel(s):t+={common:50,uncommon:150,rare:500,epic:2e3,legendary:1e4}[s.rarity]||50;return t}createTradeQuest(e){const t=this.tradeQuestTemplates.find(i=>i.id===e);if(!t)return null;const s={...t,questId:`${e}_${Date.now()}`,startTime:Date.now(),progress:{},completed:!1};for(const i of t.requirements)i.material?s.progress[i.material]=0:i.itemType&&(s.progress[i.itemType]=0);return this.activeTradeQuests.push(s),s}completeTradeQuest(e){const t=this.activeTradeQuests.find(i=>i.questId===e);if(!t)return{success:!1,reason:"Quest not found"};for(const i of t.requirements)if(i.material&&this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.getMaterialCount(i.material)<i.amount)return{success:!1,reason:`Not enough ${i.material}`};for(const i of t.requirements)i.material&&this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.removeMaterial(i.material,i.amount),i.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.removeCurrency("gold",i.gold);this.giveTradeRewards(t.rewards),t.completed=!0,t.completedTime=Date.now();const s=this.activeTradeQuests.indexOf(t);return s>-1&&this.activeTradeQuests.splice(s,1),{success:!0,quest:t,rewards:t.rewards,message:`Completed trade quest: ${t.name}!`}}despawnTrader(e){const t=this.activeTraders.get(e);return t?(this.activeTraders.delete(e),console.log(`${t.name} has left.`),!0):!1}getActiveTraders(){return Array.from(this.activeTraders.values())}getTraderTrades(e){const t=this.activeTraders.get(e);return t?t.trades:[]}save(){return{activeTraders:Array.from(this.activeTraders.entries()),completedTrades:Array.from(this.completedTrades),activeTradeQuests:this.activeTradeQuests}}load(e){e&&(e.activeTraders&&(this.activeTraders=new Map(e.activeTraders)),e.completedTrades&&(this.completedTrades=new Set(e.completedTrades)),e.activeTradeQuests&&(this.activeTradeQuests=e.activeTradeQuests))}update(e){const t=Date.now();for(const[s,i]of this.activeTraders.entries())t-i.spawnTime>3e5&&this.despawnTrader(s);if(this.gameEngine.endlessMode){const s=this.gameEngine.endlessMode.currentFloor;this.activeTraders.size===0&&Math.random()<.01&&this.spawnTrader(s)}}}class ss{constructor(e){this.gameEngine=e,this.ownedPets=new Map,this.activePet=null,this.petSlots=3,this.activeTeam=[],this.petTypes=new Map,this.evolutionPaths=new Map,this.initializePetTypes(),this.initializeEvolutionPaths()}initializePetTypes(){this.addPetType({id:"smoke_pup",name:"Smoke Pup",rarity:"common",element:"smoke",description:"A playful pup made of swirling smoke",baseStats:{hp:100,attack:15,defense:10,speed:12,magicPower:8},abilities:[{id:"smoke_bite",name:"Smoke Bite",damage:20,cooldown:3,mpCost:10}],evolvesTo:"smoke_wolf",evolveLevel:10,equipmentSlots:["collar","accessory"]}),this.addPetType({id:"flame_sprite",name:"Flame Sprite",rarity:"common",element:"fire",description:"A tiny spirit of pure flame",baseStats:{hp:80,attack:20,defense:8,speed:15,magicPower:12},abilities:[{id:"fireball",name:"Fireball",damage:25,cooldown:4,mpCost:15}],evolvesTo:"flame_guardian",evolveLevel:10,equipmentSlots:["charm","accessory"]}),this.addPetType({id:"crystal_imp",name:"Crystal Imp",rarity:"uncommon",element:"crystal",description:"A mischievous creature formed from living crystal",baseStats:{hp:120,attack:18,defense:15,speed:10,magicPower:15},abilities:[{id:"crystal_shard",name:"Crystal Shard",damage:30,cooldown:5,mpCost:20},{id:"crystal_shield",name:"Crystal Shield",effect:"defense_buff",value:30,duration:1e4,cooldown:15,mpCost:25}],evolvesTo:"crystal_golem",evolveLevel:15,equipmentSlots:["collar","armor","accessory"]}),this.addPetType({id:"smoke_wolf",name:"Smoke Wolf",rarity:"uncommon",element:"smoke",description:"An ethereal wolf that phases through enemies",baseStats:{hp:200,attack:35,defense:25,speed:20,magicPower:18},abilities:[{id:"smoke_bite",name:"Smoke Bite",damage:40,cooldown:3,mpCost:10},{id:"phase_strike",name:"Phase Strike",damage:60,cooldown:8,mpCost:30,ignoreDefense:!0}],evolvesTo:"shadow_fenrir",evolveLevel:25,equipmentSlots:["collar","armor","accessory"]}),this.addPetType({id:"flame_guardian",name:"Flame Guardian",rarity:"rare",element:"fire",description:"A powerful flame elemental sworn to protect",baseStats:{hp:180,attack:45,defense:20,speed:22,magicPower:30},abilities:[{id:"fireball",name:"Fireball",damage:50,cooldown:4,mpCost:15},{id:"flame_nova",name:"Flame Nova",damage:80,aoe:!0,cooldown:12,mpCost:40}],evolvesTo:"inferno_titan",evolveLevel:30,equipmentSlots:["charm","armor","accessory"]}),this.addPetType({id:"crystal_golem",name:"Crystal Golem",rarity:"rare",element:"crystal",description:"A massive construct of animated crystal",baseStats:{hp:300,attack:40,defense:50,speed:15,magicPower:35},abilities:[{id:"crystal_shard",name:"Crystal Shard",damage:60,cooldown:5,mpCost:20},{id:"crystal_shield",name:"Crystal Shield",effect:"defense_buff",value:50,duration:15e3,cooldown:15,mpCost:25},{id:"earthquake",name:"Earthquake",damage:100,aoe:!0,stun:2e3,cooldown:20,mpCost:50}],evolvesTo:null,evolveLevel:null,equipmentSlots:["collar","armor","accessory","relic"]}),this.addPetType({id:"shadow_fenrir",name:"Shadow Fenrir",rarity:"legendary",element:"shadow",description:"The legendary shadow wolf of ancient prophecy",baseStats:{hp:400,attack:80,defense:50,speed:35,magicPower:40},abilities:[{id:"shadow_maul",name:"Shadow Maul",damage:100,cooldown:3,mpCost:20},{id:"phase_strike",name:"Phase Strike",damage:120,cooldown:8,mpCost:30,ignoreDefense:!0},{id:"shadow_rampage",name:"Shadow Rampage",damage:200,aoe:!0,cooldown:25,mpCost:80,ultimate:!0}],evolvesTo:null,evolveLevel:null,equipmentSlots:["collar","armor","accessory","relic"]}),this.addPetType({id:"inferno_titan",name:"Inferno Titan",rarity:"legendary",element:"fire",description:"A colossal titan wreathed in eternal flames",baseStats:{hp:350,attack:100,defense:40,speed:28,magicPower:70},abilities:[{id:"molten_strike",name:"Molten Strike",damage:120,cooldown:4,mpCost:25,burn:5e3},{id:"flame_nova",name:"Flame Nova",damage:150,aoe:!0,cooldown:12,mpCost:40},{id:"apocalypse",name:"Apocalypse",damage:300,aoe:!0,burn:1e4,cooldown:30,mpCost:100,ultimate:!0}],evolvesTo:null,evolveLevel:null,equipmentSlots:["charm","armor","accessory","relic"]}),this.addPetType({id:"void_dragon",name:"Void Dragon",rarity:"epic",element:"void",description:"A dragon from the spaces between realities",baseStats:{hp:500,attack:90,defense:60,speed:30,magicPower:80},abilities:[{id:"void_breath",name:"Void Breath",damage:150,aoe:!0,cooldown:10,mpCost:50},{id:"reality_tear",name:"Reality Tear",damage:250,cooldown:20,mpCost:80,ignoreDefense:!0,ultimate:!0}],evolvesTo:null,evolveLevel:null,equipmentSlots:["collar","armor","accessory","relic"],unlockRequirement:{floor:50}}),this.addPetType({id:"celestial_phoenix",name:"Celestial Phoenix",rarity:"legendary",element:"celestial",description:"The immortal bird of rebirth and light",baseStats:{hp:450,attack:85,defense:55,speed:40,magicPower:90},abilities:[{id:"divine_flame",name:"Divine Flame",damage:140,heal:50,cooldown:8,mpCost:40},{id:"resurrection",name:"Resurrection",effect:"revive",value:.5,cooldown:120,mpCost:100},{id:"supernova",name:"Supernova",damage:400,aoe:!0,heal:100,cooldown:40,mpCost:150,ultimate:!0}],evolvesTo:null,evolveLevel:null,equipmentSlots:["charm","armor","accessory","relic"],unlockRequirement:{achievement:"legendary_collector"}})}addPetType(e){this.petTypes.set(e.id,e)}initializeEvolutionPaths(){this.evolutionPaths.set("smoke_pup",{stage1:"smoke_wolf",stage2:"shadow_fenrir"}),this.evolutionPaths.set("flame_sprite",{stage1:"flame_guardian",stage2:"inferno_titan"}),this.evolutionPaths.set("crystal_imp",{stage1:"crystal_golem"})}obtainPet(e){const t=this.petTypes.get(e);if(!t)return{success:!1,reason:"Pet type not found"};if(t.unlockRequirement){if(t.unlockRequirement.floor&&(this.gameEngine.endlessMode?.currentFloor||1)<t.unlockRequirement.floor)return{success:!1,reason:"Floor requirement not met"};t.unlockRequirement.achievement}const s=this.createPetInstance(t);return this.ownedPets.set(s.instanceId,s),console.log(`🐾 Obtained new pet: ${s.name}!`),{success:!0,pet:s}}createPetInstance(e){return{instanceId:`pet_${Date.now()}_${Math.random()}`,typeId:e.id,name:e.name,rarity:e.rarity,element:e.element,description:e.description,level:1,exp:0,stats:{...e.baseStats},baseStats:{...e.baseStats},abilities:[...e.abilities],evolvesTo:e.evolvesTo,evolveLevel:e.evolveLevel,equipment:{},equipmentSlots:[...e.equipmentSlots],happiness:100,hunger:100,obtainedAt:Date.now()}}addExp(e,t){if(!e)return;e.exp+=t;const s=this.getExpForLevel(e.level+1);e.exp>=s&&this.levelUpPet(e)}getExpForLevel(e){return Math.floor(100*Math.pow(1.15,e-1))}levelUpPet(e){e.level++,e.exp=0;for(const t in e.baseStats)e.baseStats[t]=Math.floor(e.baseStats[t]*1.05),e.stats[t]=e.baseStats[t];this.applyEquipmentBonuses(e),console.log(`🐾 ${e.name} leveled up to ${e.level}!`),e.evolvesTo&&e.level>=e.evolveLevel&&this.evolvePet(e)}evolvePet(e){if(!e.evolvesTo)return{success:!1,reason:"Pet cannot evolve"};if(e.level<e.evolveLevel)return{success:!1,reason:"Level requirement not met"};const t=this.petTypes.get(e.evolvesTo);if(!t)return{success:!1,reason:"Evolution type not found"};const s=e.name;e.typeId=t.id,e.name=t.name,e.rarity=t.rarity,e.element=t.element,e.description=t.description,e.abilities=[...t.abilities],e.evolvesTo=t.evolvesTo,e.evolveLevel=t.evolveLevel,e.equipmentSlots=[...t.equipmentSlots];for(const i in t.baseStats)e.baseStats[i]=t.baseStats[i]+Math.floor(e.level*5),e.stats[i]=e.baseStats[i];return this.applyEquipmentBonuses(e),console.log(`✨ ${s} evolved into ${e.name}!`),{success:!0,pet:e,oldName:s}}equipItem(e,t,s){return e?e.equipmentSlots.includes(s)?(e.equipment[s]&&this.unequipItem(e,s),e.equipment[s]=t,this.applyEquipmentBonuses(e),{success:!0,pet:e}):{success:!1,reason:"Invalid equipment slot for this pet"}:{success:!1,reason:"Pet not found"}}unequipItem(e,t){if(!e||!e.equipment[t])return{success:!1};const s=e.equipment[t];return delete e.equipment[t],this.applyEquipmentBonuses(e),{success:!0,item:s}}applyEquipmentBonuses(e){for(const t in e.baseStats)e.stats[t]=e.baseStats[t];for(const t of Object.values(e.equipment))if(t&&t.stats)for(const[s,i]of Object.entries(t.stats))e.stats[s]=(e.stats[s]||0)+i}feedPet(e,t){if(!e)return{success:!1,reason:"Pet not found"};const s=t.hungerValue||20,i=t.happinessValue||10;return e.hunger=Math.min(100,e.hunger+s),e.happiness=Math.min(100,e.happiness+i),e.happiness>=80&&this.addExp(e,50),{success:!0,hunger:e.hunger,happiness:e.happiness}}usePetAbility(e,t,s){if(!e)return{success:!1,reason:"Pet not found"};const i=e.abilities.find(a=>a.id===t);return i?{success:!0,ability:i,damage:i.damage,effect:i.effect}:{success:!1,reason:"Ability not found"}}setActivePet(e){const t=this.ownedPets.get(e);return t?(this.activePet=t,console.log(`🐾 ${t.name} is now active!`),{success:!0,pet:t}):{success:!1,reason:"Pet not found"}}addToTeam(e){return this.activeTeam.length>=this.petSlots?{success:!1,reason:"Team is full"}:this.ownedPets.get(e)?this.activeTeam.includes(e)?{success:!1,reason:"Pet already in team"}:(this.activeTeam.push(e),{success:!0,team:this.getActiveTeam()}):{success:!1,reason:"Pet not found"}}removeFromTeam(e){const t=this.activeTeam.indexOf(e);return t===-1?{success:!1,reason:"Pet not in team"}:(this.activeTeam.splice(t,1),{success:!0,team:this.getActiveTeam()})}getActiveTeam(){return this.activeTeam.map(e=>this.ownedPets.get(e)).filter(e=>e)}getAllPets(){return Array.from(this.ownedPets.values())}save(){return{ownedPets:Array.from(this.ownedPets.entries()),activePet:this.activePet?.instanceId,activeTeam:this.activeTeam}}load(e){e&&(e.ownedPets&&(this.ownedPets=new Map(e.ownedPets)),e.activePet&&(this.activePet=this.ownedPets.get(e.activePet)),e.activeTeam&&(this.activeTeam=e.activeTeam))}update(e){const t=e,s=.01,i=.005;for(const a of this.ownedPets.values()){a.hunger=Math.max(0,a.hunger-s*t);const n=a.hunger<30?2:1;a.happiness=Math.max(0,a.happiness-i*t*n)}}}class is{constructor(e){this.gameEngine=e,this.behaviors={aggressive:{attackRange:15,preferredDistance:5,attackPriority:"nearest",useAbilities:!0},defensive:{attackRange:10,preferredDistance:8,attackPriority:"weakest",protectPlayer:!0},balanced:{attackRange:12,preferredDistance:6,attackPriority:"strategic",useAbilities:!0},support:{attackRange:8,preferredDistance:10,attackPriority:"heal_priority",focusHealing:!0}},this.currentBehavior="balanced",this.commandQueue=[],this.formations=this.initializeFormations(),this.currentFormation="standard",this.synergies=this.initializeSynergies(),this.activeSynergies=[],this.ultimates=new Map,this.ultimateCooldowns=new Map,this.companionQuests=[],this.initializeUltimates(),this.initializeCompanionQuests()}initializeFormations(){return{standard:{name:"Standard Formation",description:"Basic balanced formation",positions:[{x:0,z:-2},{x:-2,z:0},{x:2,z:0}],bonuses:{}},defensive:{name:"Defensive Circle",description:"Surrounds and protects player",positions:[{x:0,z:-3},{x:-2,z:-1},{x:2,z:-1}],bonuses:{defense:1.2,damageReduction:.1}},aggressive:{name:"Spearhead Formation",description:"Focuses damage on single targets",positions:[{x:0,z:-4},{x:-1,z:-2},{x:1,z:-2}],bonuses:{attack:1.3,critChance:.1}},pincer:{name:"Pincer Attack",description:"Flanks enemies from sides",positions:[{x:-4,z:-2},{x:4,z:-2},{x:0,z:0}],bonuses:{flanking:1.25,evasion:.15}},support:{name:"Support Line",description:"Maximizes healing and buffs",positions:[{x:-2,z:2},{x:2,z:2},{x:0,z:3}],bonuses:{healing:1.5,buffDuration:1.3}}}}initializeSynergies(){return{elemental_mastery:{name:"Elemental Mastery",description:"Fire + Ice companions increase all elemental damage",requirements:["fire","ice"],bonus:{elementalDamage:1.25}},trinity_force:{name:"Trinity Force",description:"3 different element types boost all stats",requirements:["different_elements","count:3"],bonus:{allStats:1.15}},pack_tactics:{name:"Pack Tactics",description:"Multiple beast-type companions increase attack speed",requirements:["type:beast","count:2"],bonus:{attackSpeed:1.3}},arcane_resonance:{name:"Arcane Resonance",description:"Magic companions boost magic power",requirements:["type:magic","count:2"],bonus:{magicPower:1.4}},guardian_bond:{name:"Guardian Bond",description:"Tank + Healer provide massive survivability",requirements:["role:tank","role:healer"],bonus:{defense:1.3,hpRegen:2}},strike_team:{name:"Strike Team",description:"All DPS companions increase critical damage",requirements:["role:dps","count:3"],bonus:{critDamage:1.5}}}}initializeUltimates(){this.ultimates.set("smoke_siren",{id:"charm_of_eternity",name:"Charm of Eternity",description:"Charms all enemies in large area",cooldown:6e4,effect:{type:"charm",duration:1e4,radius:20,damage:200}}),this.ultimates.set("blade_muse",{id:"dance_of_blades",name:"Dance of Blades",description:"Unleashes a flurry of devastating strikes",cooldown:45e3,effect:{type:"multi_strike",strikes:10,damagePerStrike:80,range:10}}),this.ultimates.set("herb_witch",{id:"natures_blessing",name:"Nature's Blessing",description:"Heals entire team and grants regeneration",cooldown:5e4,effect:{type:"heal",healAmount:300,regen:50,regenDuration:15e3,range:25}}),this.ultimates.set("cyber_dryad",{id:"system_overload",name:"System Overload",description:"Massive AOE tech damage and enemy debuff",cooldown:55e3,effect:{type:"aoe_damage",damage:400,debuff:"slow",debuffValue:.5,debuffDuration:8e3,radius:15}})}initializeCompanionQuests(){this.companionQuestTemplates=[{id:"smoke_siren_bond",companion:"smoke_siren",name:"Smoke Siren's Secret",description:"Help Smoke Siren recover her lost memories",stages:[{objective:"Defeat 50 smoke enemies",reward:{bond:10,ability:"enhanced_charm"}},{objective:"Reach floor 20",reward:{bond:15,cosmetic:"ethereal_dress"}},{objective:"Use charm ability 100 times",reward:{bond:20,ultimate_upgrade:!0}}]},{id:"blade_muse_training",companion:"blade_muse",name:"Blade Muse Training",description:"Master the art of blade dancing",stages:[{objective:"Perform 1000 attacks",reward:{bond:10,ability:"blade_dash"}},{objective:"Achieve 50 perfect combos",reward:{bond:15,cosmetic:"shadow_blades"}},{objective:"Defeat a boss without taking damage",reward:{bond:25,ultimate_upgrade:!0}}]},{id:"herb_witch_garden",companion:"herb_witch",name:"Herb Witch's Garden",description:"Collect rare herbs for powerful potions",stages:[{objective:"Collect 50 herbs",reward:{bond:10,ability:"poison_brew"}},{objective:"Heal 10000 HP total",reward:{bond:15,cosmetic:"flower_crown"}},{objective:"Brew 25 legendary potions",reward:{bond:20,ultimate_upgrade:!0}}]},{id:"cyber_dryad_network",companion:"cyber_dryad",name:"Cyber Dryad Network",description:"Connect to the ancient network",stages:[{objective:"Hack 30 systems",reward:{bond:10,ability:"nano_swarm"}},{objective:"Deal 50000 tech damage",reward:{bond:15,cosmetic:"hologram_skin"}},{objective:"Complete starship dungeon 10 times",reward:{bond:20,ultimate_upgrade:!0}}]}]}setBehavior(e){return this.behaviors[e]?(this.currentBehavior=e,console.log(`🤖 Companion AI set to ${e} behavior`),!0):!1}setFormation(e){return this.formations[e]?(this.currentFormation=e,console.log(`⚔️ Formation changed to ${this.formations[e].name}`),this.updateCompanionPositions(),!0):!1}updateCompanionPositions(){if(!this.gameEngine.player)return;const e=this.formations[this.currentFormation],t=this.gameEngine.player.mesh.position;return e.positions.map(i=>({x:t.x+i.x,z:t.z+i.z}))}issueCommand(e,t=null){return["attack","defend","follow","hold","retreat","use_ultimate"].includes(e)?(this.commandQueue.push({command:e,target:t,timestamp:Date.now()}),this.executeCommand(e,t),{success:!0,command:e}):{success:!1,reason:"Invalid command"}}executeCommand(e,t){switch(e){case"attack":this.setBehavior("aggressive");break;case"defend":this.setBehavior("defensive"),this.setFormation("defensive");break;case"follow":this.setBehavior("balanced"),this.setFormation("standard");break;case"retreat":this.setBehavior("support"),this.setFormation("support");break;case"use_ultimate":this.triggerUltimate(t);break}}triggerUltimate(e){const t=e||this.gameEngine.companionManager?.activeCompanion;if(!t)return{success:!1,reason:"No active companion"};const s=this.ultimates.get(t);if(!s)return{success:!1,reason:"Ultimate not found"};const i=this.ultimateCooldowns.get(t)||0,a=Date.now()-i;return a<s.cooldown?{success:!1,reason:`Ultimate on cooldown (${Math.ceil((s.cooldown-a)/1e3)}s remaining)`}:(this.ultimateCooldowns.set(t,Date.now()),console.log(`💥 ${s.name} activated!`),this.applyUltimateEffects(s),{success:!0,ultimate:s,cooldown:s.cooldown})}applyUltimateEffects(e){console.log(`⚡ Ultimate effect: ${e.effect.type}`)}calculateSynergies(){this.activeSynergies=[];const e=this.getActiveUnits();for(const[t,s]of Object.entries(this.synergies))this.checkSynergyRequirements(s,e)&&this.activeSynergies.push({id:t,...s});return this.activeSynergies}checkSynergyRequirements(e,t){return t.length>=2}getActiveUnits(){const e=[];if(this.gameEngine.companionManager?.activeCompanion&&e.push({type:"companion",id:this.gameEngine.companionManager.activeCompanion}),this.gameEngine.petSystem){const t=this.gameEngine.petSystem.getActiveTeam();e.push(...t.map(s=>({type:"pet",id:s.instanceId,element:s.element})))}return e}getFormationBonuses(){const e=this.formations[this.currentFormation];return e?e.bonuses:{}}getTotalBonuses(){const e={},t=this.getFormationBonuses();Object.assign(e,t);for(const s of this.activeSynergies)for(const[i,a]of Object.entries(s.bonus))e[i]=(e[i]||1)*a;return e}makeTacticalDecision(e,t,s){const i=this.behaviors[this.currentBehavior];let a=null;switch(i.attackPriority){case"nearest":a=this.findNearestEnemy(e,t);break;case"weakest":a=this.findWeakestEnemy(t);break;case"strategic":a=this.findStrategicTarget(e,t);break;case"heal_priority":a=this.findHealTarget(s);break}return{type:"move",target:a,useAbility:i.useAbilities&&Math.random()<.3}}findNearestEnemy(e,t){return t[0]}findWeakestEnemy(e){return!e||e.length===0?null:e.reduce((t,s)=>s.stats.hp<t.stats.hp?s:t)}findStrategicTarget(e,t){return t.find(s=>s.isBoss)||t[0]}findHealTarget(e){return!e||e.length===0?null:e.reduce((t,s)=>{const i=s.stats.hp/s.stats.maxHp,a=t.stats.hp/t.stats.maxHp;return i<a?s:t})}startCompanionQuest(e){const t=this.companionQuestTemplates.find(a=>a.id===e);if(!t)return{success:!1,reason:"Quest not found"};if(this.gameEngine.companionManager?.activeCompanion!==t.companion)return{success:!1,reason:"This companion is not active"};const i={...t,startedAt:Date.now(),currentStage:0,progress:{}};return this.companionQuests.push(i),{success:!0,quest:i}}updateQuestProgress(e,t,s=1){const i=this.companionQuests.find(n=>n.id===e);if(!i)return;i.progress[t]=(i.progress[t]||0)+s;const a=i.stages[i.currentStage];this.isStageComplete(a,i.progress)&&this.completeQuestStage(i)}isStageComplete(e,t){return!0}completeQuestStage(e){const t=e.stages[e.currentStage];console.log(`✨ Completed quest stage: ${t.objective}`),e.currentStage++,e.currentStage>=e.stages.length&&console.log(`🏆 Completed companion quest: ${e.name}!`)}save(){return{currentBehavior:this.currentBehavior,currentFormation:this.currentFormation,activeSynergies:this.activeSynergies,ultimateCooldowns:Array.from(this.ultimateCooldowns.entries()),companionQuests:this.companionQuests}}load(e){e&&(e.currentBehavior&&(this.currentBehavior=e.currentBehavior),e.currentFormation&&(this.currentFormation=e.currentFormation),e.activeSynergies&&(this.activeSynergies=e.activeSynergies),e.ultimateCooldowns&&(this.ultimateCooldowns=new Map(e.ultimateCooldowns)),e.companionQuests&&(this.companionQuests=e.companionQuests))}update(e){for(this.calculateSynergies();this.commandQueue.length>0;)this.commandQueue.shift();this.updateCompanionPositions()}}class as{constructor(e){this.gameEngine=e,this.ownedMounts=new Map,this.activeMount=null,this.isMounted=!1,this.mountTypes=new Map,this.breedingPairs=[],this.eggs=[],this.initializeMountTypes()}initializeMountTypes(){this.addMountType({id:"smoke_horse",name:"Smoke Horse",rarity:"common",type:"terrestrial",description:"A spectral horse made of smoke",baseStats:{speed:15,stamina:100,jump:2},abilities:[{id:"smoke_dash",name:"Smoke Dash",description:"Burst of speed leaving smoke trail",cooldown:1e4,effect:{speedBoost:2,duration:3e3}}],unlockRequirement:{level:5}}),this.addMountType({id:"crystal_stag",name:"Crystal Stag",rarity:"uncommon",type:"terrestrial",description:"A majestic stag with crystalline antlers",baseStats:{speed:18,stamina:120,jump:3},abilities:[{id:"crystal_leap",name:"Crystal Leap",description:"High jump with crystal shockwave on landing",cooldown:15e3,effect:{jumpBoost:3,landingDamage:100,landingRadius:5}}],unlockRequirement:{level:10}}),this.addMountType({id:"shadow_wolf",name:"Shadow Wolf",rarity:"rare",type:"terrestrial",description:"A wolf that runs through shadows",baseStats:{speed:22,stamina:150,jump:2.5},abilities:[{id:"shadow_run",name:"Shadow Run",description:"Phase through enemies and obstacles",cooldown:2e4,effect:{phaseMode:!0,duration:5e3,speedBoost:1.5}},{id:"pack_call",name:"Pack Call",description:"Summon shadow wolves to fight",cooldown:6e4,effect:{summonCount:3,duration:3e4}}],unlockRequirement:{level:20}}),this.addMountType({id:"flame_raptor",name:"Flame Raptor",rarity:"rare",type:"terrestrial",description:"A fierce raptor wreathed in flames",baseStats:{speed:25,stamina:130,jump:4},abilities:[{id:"flame_charge",name:"Flame Charge",description:"Charge forward dealing fire damage",cooldown:12e3,effect:{chargeDamage:150,burnDuration:5e3,chargeDistance:20}}],unlockRequirement:{achievement:"fire_master"}}),this.addMountType({id:"sky_manta",name:"Sky Manta",rarity:"epic",type:"flying",description:"A graceful manta ray that glides through air",baseStats:{speed:20,stamina:200,jump:10,canFly:!0},abilities:[{id:"aerial_dive",name:"Aerial Dive",description:"Dive bomb enemies from above",cooldown:15e3,effect:{diveDamage:200,stunDuration:2e3,diveSpeed:40}},{id:"wind_current",name:"Wind Current",description:"Create updraft for sustained flight",cooldown:3e4,effect:{flightDuration:2e4,noStamina:!0}}],unlockRequirement:{floor:30}}),this.addMountType({id:"void_drake",name:"Void Drake",rarity:"epic",type:"flying",description:"A dragon-like creature from the void",baseStats:{speed:28,stamina:250,jump:12,canFly:!0},abilities:[{id:"void_breath",name:"Void Breath",description:"Breathe void energy at enemies",cooldown:2e4,effect:{breathDamage:300,coneRange:15,voidEffect:!0}},{id:"dimension_shift",name:"Dimension Shift",description:"Teleport to any visible location",cooldown:4e4,effect:{teleport:!0,maxRange:50}}],unlockRequirement:{floor:50,achievement:"void_walker"}}),this.addMountType({id:"celestial_phoenix",name:"Celestial Phoenix",rarity:"legendary",type:"flying",description:"The immortal phoenix of legend",baseStats:{speed:35,stamina:999,jump:20,canFly:!0,infiniteStamina:!0},abilities:[{id:"rebirth",name:"Rebirth",description:"Resurrect at phoenix with full stats",cooldown:3e5,effect:{autoRevive:!0,fullHealth:!0}},{id:"solar_flare",name:"Solar Flare",description:"Massive AOE fire damage",cooldown:6e4,effect:{damage:1e3,radius:30,burn:1e4}},{id:"divine_flight",name:"Divine Flight",description:"Unlimited flight with healing aura",cooldown:0,effect:{flight:!0,healOverTime:10,auraRadius:15}}],unlockRequirement:{achievement:"legendary_collector",floor:100}}),this.addMountType({id:"nightmare_steed",name:"Nightmare Steed",rarity:"legendary",type:"terrestrial",description:"A terrifying horse from nightmares",baseStats:{speed:40,stamina:500,jump:5,combatMount:!0},abilities:[{id:"terror_charge",name:"Terror Charge",description:"Charge that fears all enemies",cooldown:3e4,effect:{damage:500,fearDuration:8e3,chargeSpeed:50}},{id:"nightmare_realm",name:"Nightmare Realm",description:"Create realm where you are invincible",cooldown:12e4,effect:{invincible:!0,duration:15e3,damageBoost:2}}],unlockRequirement:{achievement:"nightmare_complete"}}),this.addMountType({id:"tidal_serpent",name:"Tidal Serpent",rarity:"rare",type:"aquatic",description:"A serpentine creature of the depths",baseStats:{speed:30,stamina:180,jump:1,waterSpeed:40},abilities:[{id:"tidal_wave",name:"Tidal Wave",description:"Summon wave that knocks back enemies",cooldown:25e3,effect:{damage:200,knockback:10,waveWidth:20}}],unlockRequirement:{floor:25}})}addMountType(e){this.mountTypes.set(e.id,e)}obtainMount(e){const t=this.mountTypes.get(e);if(!t)return{success:!1,reason:"Mount type not found"};if(t.unlockRequirement){const i=t.unlockRequirement;if(i.level&&this.gameEngine.player.level<i.level)return{success:!1,reason:`Requires level ${i.level}`};if(i.floor&&(this.gameEngine.endlessMode?.currentFloor||1)<i.floor)return{success:!1,reason:`Requires floor ${i.floor}`}}const s=this.createMountInstance(t);return this.ownedMounts.set(s.instanceId,s),console.log(`🐴 Obtained new mount: ${s.name}!`),{success:!0,mount:s}}createMountInstance(e){return{instanceId:`mount_${Date.now()}_${Math.random()}`,typeId:e.id,name:e.name,rarity:e.rarity,type:e.type,description:e.description,level:1,exp:0,stats:{...e.baseStats},baseStats:{...e.baseStats},abilities:[...e.abilities],customization:{color:null,armor:null,saddle:null,accessories:[]},obtainedAt:Date.now()}}mount(e){if(this.isMounted)return{success:!1,reason:"Already mounted"};const t=this.ownedMounts.get(e);return t?(this.activeMount=t,this.isMounted=!0,this.gameEngine.player&&(this.gameEngine.player.stats.speed*=t.stats.speed/10),console.log(`🐴 Mounted ${t.name}!`),{success:!0,mount:t}):{success:!1,reason:"Mount not found"}}dismount(){return this.isMounted?(this.gameEngine.player&&this.activeMount&&(this.gameEngine.player.stats.speed/=this.activeMount.stats.speed/10),console.log(`🐴 Dismounted ${this.activeMount.name}`),this.isMounted=!1,this.activeMount=null,{success:!0}):{success:!1,reason:"Not mounted"}}useMountAbility(e){if(!this.isMounted||!this.activeMount)return{success:!1,reason:"Not mounted"};const t=this.activeMount.abilities.find(s=>s.id===e);return t?(console.log(`⚡ Used mount ability: ${t.name}!`),{success:!0,ability:t,effect:t.effect}):{success:!1,reason:"Ability not found"}}customizeMount(e,t){const s=this.ownedMounts.get(e);return s?(t.color&&(s.customization.color=t.color),t.armor&&(s.customization.armor=t.armor),t.saddle&&(s.customization.saddle=t.saddle),t.accessories&&(s.customization.accessories=t.accessories),{success:!0,mount:s}):{success:!1,reason:"Mount not found"}}breedMounts(e,t){const s=this.ownedMounts.get(e),i=this.ownedMounts.get(t);if(!s||!i)return{success:!1,reason:"One or both mounts not found"};if(s.typeId===i.typeId)return{success:!1,reason:"Cannot breed same type"};const a={id:`breeding_${Date.now()}`,mount1:e,mount2:t,startTime:Date.now(),duration:36e5,completed:!1};return this.breedingPairs.push(a),console.log(`💕 Started breeding ${s.name} and ${i.name}!`),{success:!0,pair:a}}checkBreeding(){const e=Date.now();for(const t of this.breedingPairs)if(!t.completed&&e-t.startTime>=t.duration){t.completed=!0;const s=this.createEgg(t);this.eggs.push(s),console.log("🥚 Breeding complete! Received a mount egg!")}}createEgg(e){const t=this.ownedMounts.get(e.mount1),s=this.ownedMounts.get(e.mount2),i=["common","uncommon","rare","epic","legendary"],a=i.indexOf(t.rarity),n=i.indexOf(s.rarity),o=Math.floor((a+n)/2);return{id:`egg_${Date.now()}`,parent1:e.mount1,parent2:e.mount2,rarity:i[Math.min(o,i.length-1)],hatchTime:18e5,createdAt:Date.now()}}hatchEgg(e){const t=this.eggs.find(n=>n.id===e);if(!t)return{success:!1,reason:"Egg not found"};const s=Date.now()-t.createdAt;if(s<t.hatchTime)return{success:!1,reason:`Egg needs ${Math.ceil((t.hatchTime-s)/1e3/60)} more minutes to hatch`};const i=this.createHybridMount(t);this.ownedMounts.set(i.instanceId,i);const a=this.eggs.indexOf(t);return a>-1&&this.eggs.splice(a,1),console.log(`🐣 Egg hatched into ${i.name}!`),{success:!0,mount:i}}createHybridMount(e){const t=this.ownedMounts.get(e.parent1),s=this.ownedMounts.get(e.parent2),i={};for(const n in t.baseStats)i[n]=Math.floor((t.baseStats[n]+s.baseStats[n])/2*1.1);const a=[...t.abilities.slice(0,2),...s.abilities.slice(0,1)];return{instanceId:`mount_${Date.now()}_${Math.random()}`,typeId:"hybrid",name:`Hybrid ${t.name}-${s.name}`,rarity:e.rarity,type:t.type,description:"A unique hybrid mount",level:1,exp:0,stats:i,baseStats:i,abilities:a,hybrid:!0,parents:[e.parent1,e.parent2],customization:{color:null,armor:null,saddle:null,accessories:[]},obtainedAt:Date.now()}}getAllMounts(){return Array.from(this.ownedMounts.values())}save(){return{ownedMounts:Array.from(this.ownedMounts.entries()),activeMount:this.activeMount?.instanceId,isMounted:this.isMounted,breedingPairs:this.breedingPairs,eggs:this.eggs}}load(e){e&&(e.ownedMounts&&(this.ownedMounts=new Map(e.ownedMounts)),e.activeMount&&(this.activeMount=this.ownedMounts.get(e.activeMount)),e.isMounted!==void 0&&(this.isMounted=e.isMounted),e.breedingPairs&&(this.breedingPairs=e.breedingPairs),e.eggs&&(this.eggs=e.eggs))}update(e){this.checkBreeding(),!this.isMounted&&this.activeMount&&(this.activeMount.stats.stamina=Math.min(this.activeMount.baseStats.stamina,this.activeMount.stats.stamina+e*10))}}class ns{constructor(e){this.gameEngine=e,this.leaderboards=new Map,this.rankings=new Map,this.resetSchedule={daily:{interval:864e5,lastReset:Date.now()},weekly:{interval:6048e5,lastReset:Date.now()},monthly:{interval:2592e6,lastReset:Date.now()}},this.initializeLeaderboards()}initializeLeaderboards(){this.addLeaderboard({id:"floor_progression",name:"Floor Progression",description:"Highest floor reached",type:"highest",resetPeriod:"never",rewards:{rank1:{gold:1e4,gems:100,title:"Floor Master"},rank2:{gold:7500,gems:75,title:"Floor Champion"},rank3:{gold:5e3,gems:50,title:"Floor Hero"},top10:{gold:2e3,gems:20},top100:{gold:500,gems:5}}}),this.addLeaderboard({id:"fastest_clear",name:"Speedrun Records",description:"Fastest floor 1-50 clear time",type:"lowest",resetPeriod:"never",rewards:{rank1:{gold:15e3,gems:150,cosmetic:"speedster_aura"},rank2:{gold:1e4,gems:100},rank3:{gold:7500,gems:75},top10:{gold:3e3,gems:30}}}),this.addLeaderboard({id:"highest_damage",name:"Maximum Damage",description:"Highest single hit damage",type:"highest",resetPeriod:"weekly",rewards:{rank1:{gold:5e3,gems:50},rank2:{gold:3e3,gems:30},rank3:{gold:2e3,gems:20},top10:{gold:1e3,gems:10}}}),this.addLeaderboard({id:"longest_survival",name:"Survival Time",description:"Longest single run duration",type:"highest",resetPeriod:"monthly",rewards:{rank1:{gold:8e3,gems:80,title:"Survivor"},rank2:{gold:5e3,gems:50},rank3:{gold:3e3,gems:30},top10:{gold:1500,gems:15}}}),this.addLeaderboard({id:"enemies_defeated",name:"Exterminator",description:"Total enemies defeated",type:"highest",resetPeriod:"weekly",rewards:{rank1:{gold:6e3,gems:60},rank2:{gold:4e3,gems:40},rank3:{gold:2500,gems:25},top10:{gold:1e3,gems:10}}}),this.addLeaderboard({id:"achievement_score",name:"Achievement Masters",description:"Total achievement points",type:"highest",resetPeriod:"never",rewards:{rank1:{gold:2e4,gems:200,title:"Perfectionist"},rank2:{gold:15e3,gems:150},rank3:{gold:1e4,gems:100},top10:{gold:5e3,gems:50}}}),this.addLeaderboard({id:"boss_kill_speed",name:"Boss Slayer",description:"Fastest boss kill time",type:"lowest",resetPeriod:"weekly",rewards:{rank1:{gold:7e3,gems:70,cosmetic:"boss_slayer_badge"},rank2:{gold:5e3,gems:50},rank3:{gold:3e3,gems:30},top10:{gold:1500,gems:15}}}),this.addLeaderboard({id:"highest_combo",name:"Combo Master",description:"Highest combo multiplier achieved",type:"highest",resetPeriod:"daily",rewards:{rank1:{gold:3e3,gems:30},rank2:{gold:2e3,gems:20},rank3:{gold:1e3,gems:10},top10:{gold:500,gems:5}}}),this.addLeaderboard({id:"gold_earned",name:"Treasure Hunter",description:"Total gold earned",type:"highest",resetPeriod:"monthly",rewards:{rank1:{gems:100,cosmetic:"golden_aura"},rank2:{gems:75},rank3:{gems:50},top10:{gems:25}}}),this.addLeaderboard({id:"pet_collection",name:"Pet Collector",description:"Unique pets collected",type:"highest",resetPeriod:"never",rewards:{rank1:{gold:1e4,gems:100,title:"Pet Master"},rank2:{gold:7500,gems:75},rank3:{gold:5e3,gems:50},top10:{gold:2e3,gems:20}}})}addLeaderboard(e){this.leaderboards.set(e.id,{...e,entries:[]})}submitScore(e,t,s,i={}){const a=this.leaderboards.get(e);if(!a)return{success:!1,reason:"Leaderboard not found"};const n={playerId:t,playerName:i.playerName||"Player",score:s,metadata:i,timestamp:Date.now()},o=a.entries.find(r=>r.playerId===t);return o?(a.type==="highest"?s>o.score:s<o.score)?(o.score=s,o.metadata=i,o.timestamp=Date.now(),this.sortLeaderboard(e),{success:!0,newRecord:!0,rank:this.getPlayerRank(e,t)}):{success:!0,newRecord:!1,message:"Score not better than existing record"}:(a.entries.push(n),this.sortLeaderboard(e),{success:!0,newEntry:!0,rank:this.getPlayerRank(e,t)})}sortLeaderboard(e){const t=this.leaderboards.get(e);t&&(t.type==="highest"?t.entries.sort((s,i)=>i.score-s.score):t.entries.sort((s,i)=>s.score-i.score),this.updateRankingsCache(e))}updateRankingsCache(e){const t=this.leaderboards.get(e);if(!t)return;const s=new Map;t.entries.forEach((i,a)=>{s.set(i.playerId,a+1)}),this.rankings.set(e,s)}getLeaderboard(e,t=0,s=100){const i=this.leaderboards.get(e);return i?{id:i.id,name:i.name,description:i.description,type:i.type,resetPeriod:i.resetPeriod,entries:i.entries.slice(t,t+s).map((a,n)=>({...a,rank:t+n+1}))}:null}getPlayerRank(e,t){const s=this.rankings.get(e);return s&&s.get(t)||null}getPlayerSurrounding(e,t,s=5){const i=this.getPlayerRank(e,t);if(!i)return null;const a=Math.max(0,i-s-1),n=s*2+1;return this.getLeaderboard(e,a,n)}getTopPlayers(e,t=10){return this.getLeaderboard(e,0,t)}distributeRewards(e){const t=this.leaderboards.get(e);if(!t||!t.rewards)return;const s=[];return t.entries.forEach((i,a)=>{const n=a+1;let o=null;n===1&&t.rewards.rank1?o=t.rewards.rank1:n===2&&t.rewards.rank2?o=t.rewards.rank2:n===3&&t.rewards.rank3?o=t.rewards.rank3:n<=10&&t.rewards.top10?o=t.rewards.top10:n<=100&&t.rewards.top100&&(o=t.rewards.top100),o&&(s.push({playerId:i.playerId,rank:n,reward:o}),i.playerId==="current_player"&&this.grantReward(o))}),s}grantReward(e){e.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",e.gold),e.gems&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gems",e.gems),e.title&&console.log(`🏆 Earned title: ${e.title}!`),e.cosmetic&&console.log(`✨ Unlocked cosmetic: ${e.cosmetic}!`)}resetLeaderboard(e){const t=this.leaderboards.get(e);return t?(this.distributeRewards(e),t.entries=[],this.rankings.set(e,new Map),console.log(`🔄 Leaderboard reset: ${t.name}`),!0):!1}checkResets(){const e=Date.now();for(const[t,s]of Object.entries(this.resetSchedule))if(e-s.lastReset>=s.interval){for(const[a,n]of this.leaderboards.entries())n.resetPeriod===t&&this.resetLeaderboard(a);s.lastReset=e,console.log(`🔄 ${t} leaderboard reset complete`)}}getAllLeaderboards(){return Array.from(this.leaderboards.values()).map(e=>({id:e.id,name:e.name,description:e.description,type:e.type,resetPeriod:e.resetPeriod,entryCount:e.entries.length}))}getPlayerStats(e){const t={};for(const[s,i]of this.leaderboards.entries()){const a=this.getPlayerRank(s,e),n=i.entries.find(o=>o.playerId===e);a&&n&&(t[s]={rank:a,score:n.score,leaderboardName:i.name})}return t}trackAchievement(e,t,s={}){const i="current_player";switch(e){case"floor_reached":this.submitScore("floor_progression",i,t,s);break;case"clear_time":this.submitScore("fastest_clear",i,t,s);break;case"damage_dealt":this.submitScore("highest_damage",i,t,s);break;case"survival_time":this.submitScore("longest_survival",i,t,s);break;case"enemies_defeated":this.submitScore("enemies_defeated",i,t,s);break;case"boss_kill_time":this.submitScore("boss_kill_speed",i,t,s);break;case"combo":this.submitScore("highest_combo",i,t,s);break;case"gold_earned":this.submitScore("gold_earned",i,t,s);break;case"pets_collected":this.submitScore("pet_collection",i,t,s);break}}generateMockData(e,t=50){const s=this.leaderboards.get(e);if(!s)return;const i=["DragonSlayer","ShadowNinja","MysticMage","IronWarrior","SwiftRogue","HolyKnight","DarkSorcerer","BladeDancer","StormCaller","FireMage","IceQueen","ThunderGod","PhoenixRider","VoidWalker","StarGazer"];for(let a=0;a<t;a++){const n=i[Math.floor(Math.random()*i.length)]+Math.floor(Math.random()*1e3),o=s.type==="highest"?Math.floor(Math.random()*1e3)+100:Math.floor(Math.random()*1e4)+1e3;this.submitScore(e,`mock_${a}`,o,{playerName:n})}}save(){const e={};for(const[t,s]of this.leaderboards.entries())e[t]={entries:s.entries};return{leaderboards:e,resetSchedule:this.resetSchedule}}load(e){if(e){if(e.leaderboards)for(const[t,s]of Object.entries(s.leaderboards)){const i=this.leaderboards.get(t);i&&s.entries&&(i.entries=s.entries,this.sortLeaderboard(t))}e.resetSchedule&&(this.resetSchedule=e.resetSchedule)}}update(e){(!this.lastResetCheck||Date.now()-this.lastResetCheck>6e4)&&(this.checkResets(),this.lastResetCheck=Date.now())}}class os{constructor(e){this.gameEngine=e,this.guilds=new Map,this.playerGuild=null,this.guildInvites=[],this.ranks={seedling:{name:"Seedling",level:1,permissions:["chat"]},cultivator:{name:"Cultivator",level:2,permissions:["chat","invite"]},grower:{name:"Grower",level:3,permissions:["chat","invite","kick"]},master_grower:{name:"Master Grower",level:4,permissions:["chat","invite","kick","promote","edit"]},founder:{name:"Founder",level:5,permissions:["all"]}},this.guildPerks=this.initializePerks(),this.guildQuests=[],this.guildQuestTemplates=this.initializeGuildQuests()}initializePerks(){return{experience_boost:{name:"Collective Growth",description:"All members gain bonus XP",maxLevel:10,bonusPerLevel:.05,cost:e=>1e3*e},loot_boost:{name:"Shared Harvest",description:"Increased loot drop chance",maxLevel:10,bonusPerLevel:.03,cost:e=>1500*e},crafting_speed:{name:"Workshop Efficiency",description:"Faster crafting times",maxLevel:5,bonusPerLevel:.1,cost:e=>2e3*e},storage_capacity:{name:"Guild Vault",description:"Shared storage space",maxLevel:20,bonusPerLevel:10,cost:e=>500*e},discount_merchant:{name:"Bulk Purchase",description:"Discount at all merchants",maxLevel:5,bonusPerLevel:.05,cost:e=>3e3*e}}}initializeGuildQuests(){return[{id:"guild_harvest",name:"Collective Harvest",description:"Guild members collectively gather materials",type:"collection",goal:{materials:{essence_shard:500,mystical_ore:200,corrupted_crystal:100}},duration:6048e5,rewards:{gold:1e4,guildXP:500,perk_points:2}},{id:"guild_boss_hunt",name:"Boss Extermination",description:"Defeat bosses as a guild",type:"boss_kills",goal:{boss_kills:50},duration:6048e5,rewards:{gold:15e3,guildXP:750,perk_points:3}},{id:"guild_floor_push",name:"Depth Exploration",description:"Reach high floors collectively",type:"floor_progression",goal:{total_floors:1e3},duration:6048e5,rewards:{gold:2e4,guildXP:1e3,perk_points:5}},{id:"guild_crafting",name:"Master Craftsmen",description:"Craft high quality items",type:"crafting",goal:{items_crafted:100,min_rarity:"rare"},duration:6048e5,rewards:{gold:12e3,guildXP:600,perk_points:2}}]}createGuild(e,t,s){if(!e||e.length<3||e.length>30)return{success:!1,reason:"Guild name must be 3-30 characters"};for(const n of this.guilds.values())if(n.name.toLowerCase()===e.toLowerCase())return{success:!1,reason:"Guild name already taken"};if(this.playerGuild)return{success:!1,reason:"Already in a guild"};const i=5e3;if(this.gameEngine.economySystem?.getCurrency("gold")<i)return{success:!1,reason:"Not enough gold (5000 required)"};const a={id:`guild_${Date.now()}`,name:e,emblem:t||"🌿",motto:s||"Smoke together, grow together",founder:"player",createdAt:Date.now(),level:1,experience:0,members:[{id:"player",name:"Player",rank:"founder",joinedAt:Date.now(),contribution:0}],bank:{gold:0,materials:new Map,items:[]},perks:{experience_boost:0,loot_boost:0,crafting_speed:0,storage_capacity:1,discount_merchant:0},perkPoints:0,activeQuests:[],completedQuests:[],chatLog:[]};return this.guilds.set(a.id,a),this.playerGuild=a.id,this.gameEngine.economySystem&&this.gameEngine.economySystem.removeCurrency("gold",i),console.log(`🌿 Created Smoke Circle: ${e}!`),{success:!0,guild:a}}joinGuild(e){const t=this.guilds.get(e);return t?this.playerGuild?{success:!1,reason:"Already in a guild"}:t.members.length>=50?{success:!1,reason:"Guild is full"}:(t.members.push({id:"player",name:"Player",rank:"seedling",joinedAt:Date.now(),contribution:0}),this.playerGuild=e,console.log(`🌿 Joined ${t.name}!`),{success:!0,guild:t}):{success:!1,reason:"Guild not found"}}leaveGuild(){if(!this.playerGuild)return{success:!1,reason:"Not in a guild"};const e=this.guilds.get(this.playerGuild),t=e.members.findIndex(i=>i.id==="player");return t===-1?{success:!1,reason:"Member not found"}:e.members[t].rank==="founder"?{success:!1,reason:"Founder must disband guild"}:(e.members.splice(t,1),this.playerGuild=null,console.log(`Left ${e.name}`),{success:!0})}disbandGuild(){return this.playerGuild?this.guilds.get(this.playerGuild).members.find(s=>s.id==="player").rank!=="founder"?{success:!1,reason:"Only founder can disband"}:(this.guilds.delete(this.playerGuild),this.playerGuild=null,console.log("🌿 Disbanded guild"),{success:!0}):{success:!1,reason:"Not in a guild"}}contribute(e){if(!this.playerGuild)return{success:!1,reason:"Not in a guild"};const t=this.guilds.get(this.playerGuild),s=t.members.find(i=>i.id==="player");if(e.gold){if(this.gameEngine.economySystem?.getCurrency("gold")<e.gold)return{success:!1,reason:"Not enough gold"};this.gameEngine.economySystem.removeCurrency("gold",e.gold),t.bank.gold+=e.gold,s.contribution+=e.gold}if(e.materials)for(const[i,a]of Object.entries(e.materials)){if(this.gameEngine.craftingSystem?.getMaterialCount(i)<a)return{success:!1,reason:`Not enough ${i}`};this.gameEngine.craftingSystem.removeMaterial(i,a);const n=t.bank.materials.get(i)||0;t.bank.materials.set(i,n+a),s.contribution+=a*10}return{success:!0,contribution:s.contribution}}withdraw(e,t="player"){if(!this.playerGuild)return{success:!1,reason:"Not in a guild"};const s=this.guilds.get(this.playerGuild),i=s.members.find(a=>a.id===t);if(this.ranks[i.rank].level<3)return{success:!1,reason:"Insufficient rank"};if(e.gold){if(s.bank.gold<e.gold)return{success:!1,reason:"Not enough gold in bank"};s.bank.gold-=e.gold,this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",e.gold)}if(e.materials)for(const[a,n]of Object.entries(e.materials)){const o=s.bank.materials.get(a)||0;if(o<n)return{success:!1,reason:`Not enough ${a}`};s.bank.materials.set(a,o-n),this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.addMaterial(a,n)}return{success:!0}}upgradePerk(e){if(!this.playerGuild)return{success:!1,reason:"Not in a guild"};const t=this.guilds.get(this.playerGuild),s=t.members.find(o=>o.id==="player");if(this.ranks[s.rank].level<4)return{success:!1,reason:"Insufficient rank (Master Grower required)"};const i=this.guildPerks[e];if(!i)return{success:!1,reason:"Perk not found"};const a=t.perks[e]||0;if(a>=i.maxLevel)return{success:!1,reason:"Perk at max level"};const n=i.cost(a+1);return t.bank.gold<n?{success:!1,reason:"Not enough gold in guild bank"}:t.perkPoints<=0?{success:!1,reason:"No perk points available"}:(t.bank.gold-=n,t.perks[e]=a+1,t.perkPoints--,console.log(`🌿 Upgraded ${i.name} to level ${t.perks[e]}`),{success:!0,level:t.perks[e]})}startGuildQuest(e){if(!this.playerGuild)return{success:!1,reason:"Not in a guild"};const t=this.guilds.get(this.playerGuild),s=this.guildQuestTemplates.find(a=>a.id===e);if(!s)return{success:!1,reason:"Quest not found"};if(t.activeQuests.find(a=>a.templateId===e))return{success:!1,reason:"Quest already active"};const i={id:`quest_${Date.now()}`,templateId:s.id,name:s.name,description:s.description,type:s.type,goal:{...s.goal},progress:{},startedAt:Date.now(),expiresAt:Date.now()+s.duration,rewards:s.rewards};return s.type==="collection"?i.progress=Object.keys(s.goal.materials).reduce((a,n)=>(a[n]=0,a),{}):i.progress={count:0},t.activeQuests.push(i),console.log(`🌿 Started guild quest: ${i.name}`),{success:!0,quest:i}}updateQuestProgress(e,t){if(!this.playerGuild)return;const s=this.guilds.get(this.playerGuild);for(const i of s.activeQuests)if(i.type===e){if(e==="collection"&&t.material)i.progress[t.material]=(i.progress[t.material]||0)+t.amount;else if(e==="boss_kills")i.progress.count=(i.progress.count||0)+1;else if(e==="floor_progression"&&t.floor)i.progress.count=(i.progress.count||0)+1;else if(e==="crafting"&&t.rarity){const a=["common","uncommon","rare","epic","legendary"];a.indexOf(t.rarity)>=a.indexOf(i.goal.min_rarity)&&(i.progress.count=(i.progress.count||0)+1)}this.checkQuestCompletion(i)}}checkQuestCompletion(e){this.guilds.get(this.playerGuild);let t=!1;e.type==="collection"?t=Object.entries(e.goal.materials).every(([s,i])=>(e.progress[s]||0)>=i):e.type==="boss_kills"?t=e.progress.count>=e.goal.boss_kills:e.type==="floor_progression"?t=e.progress.count>=e.goal.total_floors:e.type==="crafting"&&(t=e.progress.count>=e.goal.items_crafted),t&&this.completeGuildQuest(e)}completeGuildQuest(e){const t=this.guilds.get(this.playerGuild),s=t.activeQuests.indexOf(e);s>-1&&t.activeQuests.splice(s,1),e.completedAt=Date.now(),t.completedQuests.push(e),e.rewards.gold&&(t.bank.gold+=e.rewards.gold),e.rewards.guildXP&&(t.experience+=e.rewards.guildXP,this.checkGuildLevelUp(t)),e.rewards.perk_points&&(t.perkPoints+=e.rewards.perk_points),console.log(`🌿 Completed guild quest: ${e.name}!`)}checkGuildLevelUp(e){const t=e.level*1e3;e.experience>=t&&(e.level++,e.experience-=t,e.perkPoints+=2,console.log(`🌿 Guild leveled up to ${e.level}!`))}getGuildInfo(e){const t=this.guilds.get(e||this.playerGuild);return t?{...t,memberCount:t.members.length,activePerkBonuses:this.getActivePerkBonuses(t)}:null}getActivePerkBonuses(e){const t={};for(const[s,i]of Object.entries(e.perks))if(i>0){const a=this.guildPerks[s];t[s]=a.bonusPerLevel*i}return t}save(){return{guilds:Array.from(this.guilds.entries()).map(([e,t])=>[e,{...t,bank:{...t.bank,materials:Array.from(t.bank.materials.entries())}}]),playerGuild:this.playerGuild,guildInvites:this.guildInvites}}load(e){e&&(e.guilds&&(this.guilds=new Map(e.guilds.map(([t,s])=>[t,{...s,bank:{...s.bank,materials:new Map(s.bank.materials)}}]))),e.playerGuild&&(this.playerGuild=e.playerGuild),e.guildInvites&&(this.guildInvites=e.guildInvites))}update(e){if(!this.playerGuild)return;const t=this.guilds.get(this.playerGuild);if(!t)return;const s=Date.now();t.activeQuests=t.activeQuests.filter(i=>s>i.expiresAt?(console.log(`🌿 Guild quest expired: ${i.name}`),!1):!0)}}class rs{constructor(e){this.gameEngine=e,this.activeChallenges=[],this.completedChallenges=[],this.challengeTokens=0,this.modifiers=this.initializeModifiers(),this.challengeTemplates=this.initializeChallengeTemplates(),this.dailyResetTime=Date.now(),this.weeklyResetTime=Date.now(),this.monthlyResetTime=Date.now(),this.shopItems=this.initializeShopItems()}initializeModifiers(){return{purple_haze:{name:"Purple Haze",description:"Vision distortion and purple tint",effect:"visual",difficulty:1.2},green_crack:{name:"Green Crack",description:"Everything moves 50% faster",effect:"speed",speedMultiplier:1.5,difficulty:1.3},white_widow:{name:"White Widow",description:"Enemies appear frozen but deal double damage",effect:"illusion",damageMultiplier:2,difficulty:1.5},glass_cannon:{name:"Glass Cannon",description:"Double damage dealt and received",effect:"combat",damageDealt:2,damageReceived:2,difficulty:1.4},one_hit:{name:"One Hit Wonder",description:"You have 1 HP but deal massive damage",effect:"combat",hp:1,damageBonus:5,difficulty:2},no_abilities:{name:"Pure Melee",description:"All abilities disabled, basic attacks only",effect:"restriction",disableAbilities:!0,difficulty:1.6},swarm:{name:"Infestation",description:"3x enemy count, 50% health each",effect:"enemies",enemyMultiplier:3,enemyHealth:.5,difficulty:1.7},champions:{name:"Champion Horde",description:"All enemies are mini-bosses",effect:"enemies",enemyBoost:2.5,difficulty:1.8},no_healing:{name:"Hardcore",description:"No health regeneration or potions",effect:"restriction",disableHealing:!0,difficulty:1.5},infinite_mana:{name:"Mana Overload",description:"Unlimited mana but reduced defense",effect:"buff",infiniteMana:!0,defenseMultiplier:.7,difficulty:1.1}}}initializeChallengeTemplates(){return{daily:[{id:"daily_quick_toke",name:"Quick Toke",description:"Complete 5 floors in under 10 minutes",type:"speed_run",goal:{floors:5,timeLimit:6e5},modifiers:["green_crack"],rewards:{tokens:10,gold:1e3,exp:500}},{id:"daily_no_damage",name:"Smooth Session",description:"Complete 3 floors without taking damage",type:"no_damage",goal:{floors:3,maxDamage:0},modifiers:["glass_cannon"],rewards:{tokens:15,gold:1500,exp:750}},{id:"daily_boss_rush",name:"Blunt Force",description:"Defeat 5 bosses",type:"boss_kills",goal:{bosses:5},modifiers:["champions"],rewards:{tokens:12,gold:1200,item:{rarity:"rare"}}}],weekly:[{id:"weekly_harvest",name:"Weekly Harvest",description:"Reach floor 50 with Purple Haze active",type:"floor_reach",goal:{floor:50},modifiers:["purple_haze","swarm"],rewards:{tokens:50,gold:1e4,gems:25,item:{rarity:"epic"}}},{id:"weekly_collector",name:"Material Collector",description:"Gather 1000 materials in one week",type:"collection",goal:{materials:1e3},modifiers:[],rewards:{tokens:40,gold:8e3,materials:{primordial_dust:10}}},{id:"weekly_ironman",name:"Ironman Run",description:"Complete 30 floors with no healing",type:"survival",goal:{floors:30},modifiers:["no_healing","champions"],rewards:{tokens:75,gold:15e3,gems:50,cosmetic:"ironman_badge"}}],monthly:[{id:"monthly_blunt_run",name:"Monthly Blunt Run",description:"Reach floor 100 with multiple modifiers",type:"floor_reach",goal:{floor:100},modifiers:["purple_haze","green_crack","swarm","no_healing"],rewards:{tokens:200,gold:5e4,gems:150,item:{rarity:"legendary",guaranteed:!0},title:"Blunt Master"}},{id:"monthly_champion",name:"Champion of the Month",description:"Top 10% in all weekly challenges",type:"ranking",goal:{weeklyRank:.1},modifiers:[],rewards:{tokens:300,gold:1e5,gems:250,cosmetic:"champion_crown",title:"Monthly Champion"}}],special:[{id:"special_420_fest",name:"4/20 Festival Challenge",description:"Special celebration challenge",type:"special_event",goal:{floors:42,time:42e5},modifiers:["green_crack","infinite_mana"],rewards:{tokens:420,gold:42e3,gems:420,item:{rarity:"legendary"},cosmetic:"420_badge",title:"420 Blazer"}}]}}initializeShopItems(){return[{id:"token_weapon",name:"Challenge Weapon",rarity:"epic",cost:100,type:"weapon",stats:{attack:50,critChance:.15}},{id:"token_armor",name:"Challenge Armor",rarity:"epic",cost:100,type:"armor",stats:{defense:50,hp:100}},{id:"token_pet",name:"Challenge Companion",rarity:"rare",cost:150,type:"pet",petId:"challenge_pet"},{id:"token_mount",name:"Speed Demon Mount",rarity:"epic",cost:200,type:"mount",mountId:"speed_demon"},{id:"token_boost_xp",name:"XP Boost (7 days)",cost:50,type:"boost",effect:"xp",multiplier:1.5,duration:6048e5},{id:"token_boost_loot",name:"Loot Boost (7 days)",cost:50,type:"boost",effect:"loot",multiplier:1.5,duration:6048e5},{id:"token_cosmetic_aura",name:"Challenge Aura",cost:75,type:"cosmetic",cosmetic:"challenge_aura"}]}generateDailyChallenge(){const e=this.challengeTemplates.daily,t=e[Math.floor(Math.random()*e.length)];return this.createChallenge(t,"daily")}generateWeeklyChallenge(){const e=this.challengeTemplates.weekly,t=e[Math.floor(Math.random()*e.length)];return this.createChallenge(t,"weekly")}generateMonthlyChallenge(){const e=this.challengeTemplates.monthly,t=e[Math.floor(Math.random()*e.length)];return this.createChallenge(t,"monthly")}createChallenge(e,t){const s={daily:864e5,weekly:6048e5,monthly:2592e6};return{id:`${e.id}_${Date.now()}`,templateId:e.id,name:e.name,description:e.description,type:e.type,period:t,goal:{...e.goal},modifiers:[...e.modifiers],rewards:{...e.rewards},progress:{},startedAt:Date.now(),expiresAt:Date.now()+s[t],completed:!1,active:!1}}startChallenge(e){const t=this.activeChallenges.find(s=>s.id===e);return t?t.active?{success:!1,reason:"Challenge already active"}:Date.now()>t.expiresAt?{success:!1,reason:"Challenge expired"}:(t.active=!0,t.attemptStartedAt=Date.now(),this.applyModifiers(t.modifiers),console.log(`🎯 Started challenge: ${t.name}`),{success:!0,challenge:t}):{success:!1,reason:"Challenge not found"}}applyModifiers(e){for(const t of e){const s=this.modifiers[t];s&&(console.log(`⚡ Applied modifier: ${s.name}`),this.activeModifiers||(this.activeModifiers=[]),this.activeModifiers.push(s))}}removeModifiers(){this.activeModifiers=[],console.log("⚡ Removed all challenge modifiers")}updateProgress(e,t){const s=this.activeChallenges.find(i=>i.id===e&&i.active);if(s){switch(s.type){case"speed_run":t.floorsCompleted&&(s.progress.floors=t.floorsCompleted,s.progress.timeElapsed=Date.now()-s.attemptStartedAt);break;case"no_damage":t.floorsCompleted&&(s.progress.floors=t.floorsCompleted),t.damageTaken!==void 0&&(s.progress.damageTaken=(s.progress.damageTaken||0)+t.damageTaken);break;case"boss_kills":t.bossKilled&&(s.progress.bosses=(s.progress.bosses||0)+1);break;case"floor_reach":t.floorReached&&(s.progress.floor=Math.max(s.progress.floor||0,t.floorReached));break;case"collection":t.materialGathered&&(s.progress.materials=(s.progress.materials||0)+1);break;case"survival":t.floorsCompleted&&(s.progress.floors=t.floorsCompleted);break}this.checkChallengeCompletion(s)}}checkChallengeCompletion(e){let t=!1;switch(e.type){case"speed_run":t=e.progress.floors>=e.goal.floors&&e.progress.timeElapsed<=e.goal.timeLimit;break;case"no_damage":t=e.progress.floors>=e.goal.floors&&(e.progress.damageTaken||0)<=e.goal.maxDamage;break;case"boss_kills":t=(e.progress.bosses||0)>=e.goal.bosses;break;case"floor_reach":t=(e.progress.floor||0)>=e.goal.floor;break;case"collection":t=(e.progress.materials||0)>=e.goal.materials;break;case"survival":t=(e.progress.floors||0)>=e.goal.floors;break}t&&this.completeChallenge(e)}completeChallenge(e){e.completed=!0,e.active=!1,e.completedAt=Date.now(),this.removeModifiers(),this.grantRewards(e.rewards);const t=this.activeChallenges.indexOf(e);t>-1&&this.activeChallenges.splice(t,1),this.completedChallenges.push(e),console.log(`🏆 Completed challenge: ${e.name}!`),this.gameEngine.leaderboardSystem&&this.submitChallengeScore(e)}grantRewards(e){if(e.tokens&&(this.challengeTokens+=e.tokens),e.gold&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",e.gold),e.gems&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gems",e.gems),e.exp&&this.gameEngine.player&&this.gameEngine.player.gainExp(e.exp),e.item&&console.log(`📦 Received ${e.item.rarity} item!`),e.materials)for(const[t,s]of Object.entries(e.materials))this.gameEngine.craftingSystem&&this.gameEngine.craftingSystem.addMaterial(t,s);e.title&&console.log(`👑 Earned title: ${e.title}!`),e.cosmetic&&console.log(`✨ Unlocked cosmetic: ${e.cosmetic}!`)}submitChallengeScore(e){const t=this.calculateChallengeScore(e);console.log(`📊 Challenge score: ${t}`)}calculateChallengeScore(e){let t=1e3;if(e.type==="speed_run"&&e.progress.timeElapsed){const i=Math.max(0,e.goal.timeLimit-e.progress.timeElapsed);t+=Math.floor(i/1e3)}let s=1;for(const i of e.modifiers){const a=this.modifiers[i];a&&(s*=a.difficulty)}return t=Math.floor(t*s),t}purchaseShopItem(e){const t=this.shopItems.find(s=>s.id===e);return t?this.challengeTokens<t.cost?{success:!1,reason:"Not enough challenge tokens"}:(this.challengeTokens-=t.cost,console.log(`🛒 Purchased: ${t.name}`),{success:!0,item:t}):{success:!1,reason:"Item not found"}}checkResets(){const e=Date.now();e-this.dailyResetTime>=864e5&&(this.resetDaily(),this.dailyResetTime=e),e-this.weeklyResetTime>=6048e5&&(this.resetWeekly(),this.weeklyResetTime=e),e-this.monthlyResetTime>=2592e6&&(this.resetMonthly(),this.monthlyResetTime=e)}resetDaily(){this.activeChallenges=this.activeChallenges.filter(t=>t.period!=="daily");const e=this.generateDailyChallenge();this.activeChallenges.push(e),console.log("🔄 Daily challenge reset")}resetWeekly(){this.activeChallenges=this.activeChallenges.filter(t=>t.period!=="weekly");const e=this.generateWeeklyChallenge();this.activeChallenges.push(e),console.log("🔄 Weekly challenge reset")}resetMonthly(){this.activeChallenges=this.activeChallenges.filter(t=>t.period!=="monthly");const e=this.generateMonthlyChallenge();this.activeChallenges.push(e),console.log("🔄 Monthly challenge reset")}getActiveModifiers(){return this.activeModifiers||[]}save(){return{activeChallenges:this.activeChallenges,completedChallenges:this.completedChallenges.slice(-50),challengeTokens:this.challengeTokens,dailyResetTime:this.dailyResetTime,weeklyResetTime:this.weeklyResetTime,monthlyResetTime:this.monthlyResetTime}}load(e){e&&(e.activeChallenges&&(this.activeChallenges=e.activeChallenges),e.completedChallenges&&(this.completedChallenges=e.completedChallenges),e.challengeTokens!==void 0&&(this.challengeTokens=e.challengeTokens),e.dailyResetTime&&(this.dailyResetTime=e.dailyResetTime),e.weeklyResetTime&&(this.weeklyResetTime=e.weeklyResetTime),e.monthlyResetTime&&(this.monthlyResetTime=e.monthlyResetTime))}update(e){this.checkResets();for(const t of this.activeChallenges)t.active&&Date.now()>t.expiresAt&&(t.active=!1,this.removeModifiers(),console.log(`⏰ Challenge expired: ${t.name}`))}}class ls{constructor(e){this.gameEngine=e,this.prestigeLevel=0,this.astralEssence=0,this.totalPrestiges=0,this.prestigeRequirements={minLevel:50,minFloor:100},this.permanentUpgrades=this.initializePermanentUpgrades(),this.purchasedUpgrades=new Map,this.ascensionSkills=this.initializeAscensionSkills(),this.unlockedSkills=new Set,this.prestigeBonuses=this.calculatePrestigeBonuses(),this.prestigeZones=this.initializePrestigeZones(),this.unlockedZones=new Set,this.prestigeCosmetics=this.initializePrestigeCosmetics(),this.unlockedCosmetics=new Set}initializePermanentUpgrades(){return{starting_gold:{name:"Starter Wealth",description:"Start new runs with bonus gold",maxLevel:20,cost:e=>10*Math.pow(2,e),bonus:e=>e*1e3},starting_level:{name:"Experience of Ages",description:"Start at higher level",maxLevel:10,cost:e=>50*Math.pow(2,e),bonus:e=>e*5},starting_gear:{name:"Ancient Arsenal",description:"Start with better equipment",maxLevel:5,cost:e=>100*Math.pow(2,e),bonus:e=>["common","uncommon","rare","epic","legendary"][Math.min(e,4)]},cosmic_power:{name:"Cosmic Power",description:"Permanent attack bonus",maxLevel:50,cost:e=>5*e,bonus:e=>e*2},cosmic_defense:{name:"Cosmic Shield",description:"Permanent defense bonus",maxLevel:50,cost:e=>5*e,bonus:e=>e*2},cosmic_vitality:{name:"Cosmic Vitality",description:"Permanent HP bonus",maxLevel:50,cost:e=>5*e,bonus:e=>e*10},essence_magnet:{name:"Essence Magnet",description:"Increased XP gain",maxLevel:10,cost:e=>20*e,bonus:e=>e*.05},loot_fortune:{name:"Fortune's Blessing",description:"Increased loot drop rate",maxLevel:10,cost:e=>30*e,bonus:e=>e*.03},gold_multiplier:{name:"Midas Touch",description:"Gold drops multiplier",maxLevel:10,cost:e=>25*e,bonus:e=>1+e*.1},extra_lives:{name:"Phoenix Soul",description:"Extra lives per run",maxLevel:3,cost:e=>200*Math.pow(2,e),bonus:e=>e},skill_points:{name:"Knowledge Keeper",description:"Bonus skill points on start",maxLevel:10,cost:e=>30*e,bonus:e=>e*5},inventory_space:{name:"Dimensional Pockets",description:"Permanent inventory expansion",maxLevel:20,cost:e=>10*e,bonus:e=>e*5}}}initializeAscensionSkills(){return{ethereal_step:{name:"Ethereal Step",description:"Dash leaves afterimage that damages enemies",tier:1,prestigeRequired:1,cost:50,cooldown:8e3,damage:100},astral_shield:{name:"Astral Shield",description:"Absorb next 3 hits completely",tier:1,prestigeRequired:1,cost:75,cooldown:3e4,charges:3},void_blast:{name:"Void Blast",description:"AOE that ignores armor",tier:1,prestigeRequired:1,cost:60,cooldown:12e3,damage:200,radius:10},time_dilation:{name:"Time Dilation",description:"Slow all enemies for 10 seconds",tier:2,prestigeRequired:5,cost:150,cooldown:45e3,duration:1e4,slowAmount:.5},dimension_shift:{name:"Dimension Shift",description:"Become invulnerable for 5 seconds",tier:2,prestigeRequired:5,cost:200,cooldown:6e4,duration:5e3},cosmic_storm:{name:"Cosmic Storm",description:"Rain meteors across entire floor",tier:2,prestigeRequired:5,cost:175,cooldown:4e4,duration:8e3,meteorsPerSecond:3},reality_break:{name:"Reality Break",description:"Stop time and deal massive damage",tier:3,prestigeRequired:10,cost:300,cooldown:9e4,duration:3e3,damageMultiplier:10},ascended_form:{name:"Ascended Form",description:"Transform into cosmic entity for 15 seconds",tier:3,prestigeRequired:10,cost:350,cooldown:12e4,duration:15e3,statMultiplier:3},singularity:{name:"Singularity",description:"Pull all enemies to point and crush",tier:3,prestigeRequired:10,cost:400,cooldown:1e5,damage:1e3,pullRadius:50}}}initializePrestigeZones(){return{cosmic_greenhouse:{name:"The Cosmic Greenhouse",description:"Floating grow operation in space",prestigeRequired:1,minFloor:1,maxFloor:50,biome:"space",rewards:"Double material drops"},astral_temple:{name:"Astral Temple",description:"Ancient temple in the void",prestigeRequired:3,minFloor:25,maxFloor:75,biome:"void",rewards:"Unique legendary drops"},dimension_rift:{name:"Dimension Rift",description:"Unstable reality between worlds",prestigeRequired:5,minFloor:50,maxFloor:100,biome:"rift",rewards:"Triple XP and gold"},higher_plane:{name:"The Higher Plane",description:"Realm of pure consciousness",prestigeRequired:10,minFloor:100,maxFloor:999,biome:"transcendent",rewards:"Exclusive prestige gear"}}}initializePrestigeCosmetics(){return{aura_cosmic:{name:"Cosmic Aura",type:"aura",prestigeRequired:1,color:65535},aura_astral:{name:"Astral Aura",type:"aura",prestigeRequired:5,color:16711935},aura_void:{name:"Void Aura",type:"aura",prestigeRequired:10,color:10027263},aura_transcendent:{name:"Transcendent Aura",type:"aura",prestigeRequired:25,color:16766720},trail_stardust:{name:"Stardust Trail",type:"trail",prestigeRequired:1},trail_nebula:{name:"Nebula Trail",type:"trail",prestigeRequired:5},trail_galaxy:{name:"Galaxy Trail",type:"trail",prestigeRequired:10},title_enlightened:{name:"The Enlightened",type:"title",prestigeRequired:1},title_ascended:{name:"Ascended Master",type:"title",prestigeRequired:5},title_cosmic:{name:"Cosmic Entity",type:"title",prestigeRequired:10},title_transcendent:{name:"Transcendent One",type:"title",prestigeRequired:25},weapon_cosmic_glow:{name:"Cosmic Weapon Glow",type:"weapon",prestigeRequired:3},weapon_astral_flames:{name:"Astral Flames",type:"weapon",prestigeRequired:7},weapon_void_energy:{name:"Void Energy",type:"weapon",prestigeRequired:15}}}canPrestige(){const e=this.gameEngine.player,t=this.gameEngine.endlessMode;if(!e||!t)return!1;const s=e.level>=this.prestigeRequirements.minLevel,i=t.currentFloor>=this.prestigeRequirements.minFloor;return s&&i}calculatePrestigeRewards(){const e=this.gameEngine.player,t=this.gameEngine.endlessMode;if(!e||!t)return 0;let s=0;if(s+=Math.floor(e.level*2),s+=Math.floor(t.currentFloor*1.5),this.gameEngine.achievementSystem){const a=this.gameEngine.achievementSystem.getCompletedCount();s+=Math.floor(a*.5)}this.gameEngine.petSystem&&(s+=Math.floor(this.gameEngine.petSystem.ownedPets.size*2));const i=1+this.prestigeLevel*.1;return s=Math.floor(s*i),s}prestige(){if(!this.canPrestige())return{success:!1,reason:"Requirements not met"};const e=this.calculatePrestigeRewards();return this.astralEssence+=e,this.prestigeLevel++,this.totalPrestiges++,this.prestigeBonuses=this.calculatePrestigeBonuses(),this.checkUnlocks(),console.log(`✨ Ascended to Prestige ${this.prestigeLevel}! Gained ${e} Astral Essence!`),{success:!0,essence:e,prestigeLevel:this.prestigeLevel,newUnlocks:this.getNewUnlocks()}}checkUnlocks(){for(const[e,t]of Object.entries(this.ascensionSkills))this.prestigeLevel>=t.prestigeRequired&&!this.unlockedSkills.has(e)&&(this.unlockedSkills.add(e),console.log(`🌟 Unlocked ascension skill: ${t.name}!`));for(const[e,t]of Object.entries(this.prestigeZones))this.prestigeLevel>=t.prestigeRequired&&!this.unlockedZones.has(e)&&(this.unlockedZones.add(e),console.log(`🚪 Unlocked prestige zone: ${t.name}!`));for(const[e,t]of Object.entries(this.prestigeCosmetics))this.prestigeLevel>=t.prestigeRequired&&!this.unlockedCosmetics.has(e)&&(this.unlockedCosmetics.add(e),console.log(`✨ Unlocked cosmetic: ${t.name}!`))}getNewUnlocks(){const e={skills:[],zones:[],cosmetics:[]};for(const[t,s]of Object.entries(this.ascensionSkills))this.prestigeLevel===s.prestigeRequired&&e.skills.push(s.name);for(const[t,s]of Object.entries(this.prestigeZones))this.prestigeLevel===s.prestigeRequired&&e.zones.push(s.name);for(const[t,s]of Object.entries(this.prestigeCosmetics))this.prestigeLevel===s.prestigeRequired&&e.cosmetics.push(s.name);return e}purchaseUpgrade(e){const t=this.permanentUpgrades[e];if(!t)return{success:!1,reason:"Upgrade not found"};const s=this.purchasedUpgrades.get(e)||0;if(s>=t.maxLevel)return{success:!1,reason:"Max level reached"};const i=t.cost(s);return this.astralEssence<i?{success:!1,reason:"Not enough Astral Essence"}:(this.astralEssence-=i,this.purchasedUpgrades.set(e,s+1),this.prestigeBonuses=this.calculatePrestigeBonuses(),console.log(`⭐ Purchased ${t.name} Level ${s+1}!`),{success:!0,level:s+1,bonus:t.bonus(s+1)})}unlockAscensionSkill(e){const t=this.ascensionSkills[e];return t?this.prestigeLevel<t.prestigeRequired?{success:!1,reason:`Prestige ${t.prestigeRequired} required`}:this.unlockedSkills.has(e)?{success:!1,reason:"Skill already unlocked"}:this.astralEssence<t.cost?{success:!1,reason:"Not enough Astral Essence"}:(this.astralEssence-=t.cost,this.unlockedSkills.add(e),console.log(`🌟 Unlocked ${t.name}!`),{success:!0,skill:t}):{success:!1,reason:"Skill not found"}}calculatePrestigeBonuses(){const e={attack:0,defense:0,hp:0,xpMultiplier:1,lootMultiplier:1,goldMultiplier:1,startingGold:0,startingLevel:0,startingGearRarity:"common",extraLives:0,bonusSkillPoints:0,inventorySpace:0};for(const[t,s]of this.purchasedUpgrades.entries()){const a=this.permanentUpgrades[t].bonus(s);switch(t){case"cosmic_power":e.attack+=a;break;case"cosmic_defense":e.defense+=a;break;case"cosmic_vitality":e.hp+=a;break;case"essence_magnet":e.xpMultiplier+=a;break;case"loot_fortune":e.lootMultiplier+=a;break;case"gold_multiplier":e.goldMultiplier=a;break;case"starting_gold":e.startingGold=a;break;case"starting_level":e.startingLevel=a;break;case"starting_gear":e.startingGearRarity=a;break;case"extra_lives":e.extraLives=a;break;case"skill_points":e.bonusSkillPoints=a;break;case"inventory_space":e.inventorySpace=a;break}}return e.attack+=this.prestigeLevel*5,e.defense+=this.prestigeLevel*5,e.hp+=this.prestigeLevel*25,e.xpMultiplier+=this.prestigeLevel*.02,e}applyPrestigeBonuses(e){if(!e)return;const t=this.prestigeBonuses;e.stats.attack+=t.attack,e.stats.defense+=t.defense,e.stats.maxHp+=t.hp,e.stats.hp=e.stats.maxHp,e.prestigeMultipliers={xp:t.xpMultiplier,loot:t.lootMultiplier,gold:t.goldMultiplier}}applyStartingBonuses(e){if(!e)return;const t=this.prestigeBonuses;if(t.startingGold>0&&this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",t.startingGold),t.startingLevel>0)for(let s=0;s<t.startingLevel;s++)e.levelUp();t.extraLives>0&&(e.lives=(e.lives||1)+t.extraLives),t.bonusSkillPoints>0&&this.gameEngine.skillTreeSystem&&(this.gameEngine.skillTreeSystem.skillPoints+=t.bonusSkillPoints),console.log(`✨ Applied prestige bonuses: +${t.startingLevel} levels, ${t.startingGold} gold, ${t.extraLives} lives`)}getPrestigeInfo(){return{level:this.prestigeLevel,essence:this.astralEssence,totalPrestiges:this.totalPrestiges,canPrestige:this.canPrestige(),nextReward:this.calculatePrestigeRewards(),bonuses:this.prestigeBonuses,unlockedSkills:Array.from(this.unlockedSkills),unlockedZones:Array.from(this.unlockedZones),unlockedCosmetics:Array.from(this.unlockedCosmetics)}}save(){return{prestigeLevel:this.prestigeLevel,astralEssence:this.astralEssence,totalPrestiges:this.totalPrestiges,purchasedUpgrades:Array.from(this.purchasedUpgrades.entries()),unlockedSkills:Array.from(this.unlockedSkills),unlockedZones:Array.from(this.unlockedZones),unlockedCosmetics:Array.from(this.unlockedCosmetics)}}load(e){e&&(e.prestigeLevel!==void 0&&(this.prestigeLevel=e.prestigeLevel),e.astralEssence!==void 0&&(this.astralEssence=e.astralEssence),e.totalPrestiges!==void 0&&(this.totalPrestiges=e.totalPrestiges),e.purchasedUpgrades&&(this.purchasedUpgrades=new Map(e.purchasedUpgrades)),e.unlockedSkills&&(this.unlockedSkills=new Set(e.unlockedSkills)),e.unlockedZones&&(this.unlockedZones=new Set(e.unlockedZones)),e.unlockedCosmetics&&(this.unlockedCosmetics=new Set(e.unlockedCosmetics)),this.prestigeBonuses=this.calculatePrestigeBonuses())}update(e){}}class cs{constructor(e){this.gameEngine=e,this.currentFloor=1,this.highestFloor=1,this.checkpoints=new Set([1]),this.activeModifiers=[],this.modifierPool=this.initializeModifiers(),this.milestoneFloors=[10,25,50,75,100,150,200,250,500,750,999],this.floorEvents=this.initializeFloorEvents(),this.isBossFloor=t=>t%5===0,this.isSuperBossFloor=t=>t%25===0,this.difficultyScaling={baseMultiplier:1,perFloorIncrease:.03,perMilestoneBonus:.25},this.lootScaling={baseQuality:1,perFloorIncrease:.02,rarityThresholds:{rare:20,epic:50,legendary:100}},this.depthLeaderboard=[]}initializeModifiers(){return{double_xp:{name:"Essence Overflow",description:"Double XP gains",type:"buff",xpMultiplier:2,icon:"✨"},triple_gold:{name:"Gold Rush",description:"Triple gold drops",type:"buff",goldMultiplier:3,icon:"💰"},super_loot:{name:"Treasure Trove",description:"Guaranteed rare+ drops",type:"buff",minRarity:"rare",icon:"🎁"},speed_boost:{name:"Hyperspace",description:"Increased movement speed",type:"buff",speedMultiplier:1.5,icon:"⚡"},foggy:{name:"Dense Fog",description:"Reduced visibility",type:"challenge",visibilityReduction:.5,icon:"🌫️"},burning:{name:"Burning Floor",description:"Constant fire damage",type:"challenge",damagePerSecond:5,icon:"🔥"},frozen:{name:"Frozen Wasteland",description:"Reduced movement speed",type:"challenge",speedMultiplier:.7,icon:"❄️"},swarming:{name:"Swarm",description:"2x enemy count",type:"challenge",enemyMultiplier:2,icon:"🐝"},elite:{name:"Elite Forces",description:"All enemies are elites",type:"challenge",enemyQuality:"elite",icon:"👑"},cursed:{name:"Cursed Ground",description:"No health regeneration",type:"challenge",disableRegen:!0,icon:"💀"},chaotic:{name:"Chaos Realm",description:"Random enemy abilities",type:"challenge",randomizeEnemies:!0,icon:"🌀"},volatile:{name:"Volatile Energy",description:"Double damage dealt and received",type:"neutral",damageMultiplier:2,icon:"⚠️"},mysterious:{name:"Mystery Box",description:"Random positive or negative effect",type:"neutral",randomEffect:!0,icon:"❓"}}}initializeFloorEvents(){return{treasure_room:{name:"Treasure Room",description:"A room filled with loot",chance:.05,rewards:{gold:1e3,items:3,minRarity:"rare"}},merchant_floor:{name:"Traveling Merchant",description:"A merchant offers rare wares",chance:.08,merchant:"traveling"},puzzle_room:{name:"Puzzle Chamber",description:"Solve puzzles for rewards",chance:.03,puzzleType:"match3",rewards:{astralEssence:10,materials:50}},rest_area:{name:"Safe Haven",description:"Restore HP and save progress",chance:.04,heals:"full",checkpoint:!0},champion_challenge:{name:"Champion Challenge",description:"Fight a mini-boss for big rewards",chance:.06,bossType:"champion",rewards:{gold:2e3,xp:1e3,item:{rarity:"epic"}}},shrine:{name:"Ancient Shrine",description:"Receive a permanent buff",chance:.02,buffOptions:["attack","defense","hp","speed"]},cursed_altar:{name:"Cursed Altar",description:"Risk for reward",chance:.03,risk:"hp",reward:"legendary_item"},dimensional_rift:{name:"Dimensional Rift",description:"Skip 5-10 floors",chance:.01,skipFloors:[5,10]}}}advanceFloor(){return this.currentFloor++,this.currentFloor>this.highestFloor&&(this.highestFloor=this.currentFloor,this.updateLeaderboard()),this.isCheckpointFloor(this.currentFloor)&&(this.checkpoints.add(this.currentFloor),console.log(`📍 Checkpoint reached: Floor ${this.currentFloor}`)),this.applyFloorModifiers(),this.checkFloorEvents(),this.milestoneFloors.includes(this.currentFloor)&&this.handleMilestone(),console.log(`🏢 Entered Floor ${this.currentFloor}`),{floor:this.currentFloor,isBoss:this.isBossFloor(this.currentFloor),isSuperBoss:this.isSuperBossFloor(this.currentFloor),modifiers:this.activeModifiers,difficulty:this.calculateDifficulty()}}isCheckpointFloor(e){return e%10===0}resumeFromCheckpoint(e){return this.checkpoints.has(e)?(this.currentFloor=e,this.applyFloorModifiers(),console.log(`📍 Resumed from Floor ${e}`),{success:!0,floor:e}):{success:!1,reason:"Checkpoint not unlocked"}}applyFloorModifiers(){this.activeModifiers=[];const e=Math.floor(this.currentFloor/10),s=[...Object.entries(this.modifierPool)].sort(()=>Math.random()-.5),i=Math.min(e,5);for(let a=0;a<i&&a<s.length;a++){const[n,o]=s[a];this.activeModifiers.find(r=>r.id===n)||this.activeModifiers.push({id:n,...o})}this.activeModifiers.length>0&&console.log(`⚡ Active modifiers: ${this.activeModifiers.map(a=>a.name).join(", ")}`)}checkFloorEvents(){if(!this.isBossFloor(this.currentFloor)){for(const[e,t]of Object.entries(this.floorEvents))if(Math.random()<t.chance){this.triggerFloorEvent(e,t);break}}}triggerFloorEvent(e,t){switch(console.log(`🎲 Floor Event: ${t.name}!`),e){case"treasure_room":this.handleTreasureRoom(t);break;case"merchant_floor":this.handleMerchantFloor(t);break;case"rest_area":this.handleRestArea(t);break;case"champion_challenge":this.handleChampionChallenge(t);break;case"dimensional_rift":this.handleDimensionalRift(t);break;default:console.log(`Event ${e} triggered!`)}}handleTreasureRoom(e){this.gameEngine.economySystem&&this.gameEngine.economySystem.addCurrency("gold",e.rewards.gold),console.log(`💰 Found ${e.rewards.gold} gold and ${e.rewards.items} rare items!`)}handleMerchantFloor(e){this.gameEngine.tradingSystem&&this.gameEngine.tradingSystem.spawnTrader("wandering"),console.log("🛒 A traveling merchant appears!")}handleRestArea(e){const t=this.gameEngine.player;t&&e.heals==="full"&&(t.stats.hp=t.stats.maxHp,console.log("💚 HP restored to full!")),e.checkpoint&&(this.checkpoints.add(this.currentFloor),console.log("📍 Safe checkpoint created!"))}handleChampionChallenge(e){console.log("⚔️ Champion challenge initiated!")}handleDimensionalRift(e){const t=e.skipFloors[0],i=e.skipFloors[1]-t,a=t+Math.floor(Math.random()*i);this.currentFloor+=a,this.highestFloor=Math.max(this.highestFloor,this.currentFloor),console.log(`🌀 Dimensional rift! Skipped ${a} floors!`)}handleMilestone(){if(console.log(`🏆 Milestone Floor ${this.currentFloor} reached!`),this.gameEngine.economySystem){const e=this.currentFloor*100,t=Math.floor(this.currentFloor/10);this.gameEngine.economySystem.addCurrency("gold",e),this.gameEngine.economySystem.addCurrency("gems",t),console.log(`💎 Milestone rewards: ${e} gold, ${t} gems!`)}this.gameEngine.achievementSystem&&this.gameEngine.achievementSystem.checkAchievement("depth_master",{floor:this.currentFloor})}calculateDifficulty(){let e=this.difficultyScaling.baseMultiplier;e+=this.currentFloor*this.difficultyScaling.perFloorIncrease;const t=this.milestoneFloors.filter(s=>s<=this.currentFloor).length;e+=t*this.difficultyScaling.perMilestoneBonus;for(const s of this.activeModifiers)s.type==="challenge"&&(e*=1.2);return e}calculateLootQuality(){let e=this.lootScaling.baseQuality;e+=this.currentFloor*this.lootScaling.perFloorIncrease;let t="common";return this.currentFloor>=this.lootScaling.rarityThresholds.legendary?t="legendary":this.currentFloor>=this.lootScaling.rarityThresholds.epic?t="epic":this.currentFloor>=this.lootScaling.rarityThresholds.rare&&(t="rare"),{quality:e,guaranteedRarity:t}}getEnemyStats(e){const t=this.calculateDifficulty();return{hp:Math.floor(e.hp*t),attack:Math.floor(e.attack*t),defense:Math.floor(e.defense*t),exp:Math.floor(e.exp*t),gold:Math.floor(e.gold*t)}}updateLeaderboard(){this.gameEngine.leaderboardSystem&&this.gameEngine.leaderboardSystem.submitScore("floor_progression",this.highestFloor)}getFloorInfo(){return{current:this.currentFloor,highest:this.highestFloor,isBoss:this.isBossFloor(this.currentFloor),isSuperBoss:this.isSuperBossFloor(this.currentFloor),modifiers:this.activeModifiers,difficulty:this.calculateDifficulty(),lootQuality:this.calculateLootQuality(),checkpoints:Array.from(this.checkpoints).sort((e,t)=>t-e).slice(0,10)}}getModifierEffects(){const e={xpMultiplier:1,goldMultiplier:1,speedMultiplier:1,damageMultiplier:1,enemyMultiplier:1,disableRegen:!1,minRarity:null};for(const t of this.activeModifiers)t.xpMultiplier&&(e.xpMultiplier*=t.xpMultiplier),t.goldMultiplier&&(e.goldMultiplier*=t.goldMultiplier),t.speedMultiplier&&(e.speedMultiplier*=t.speedMultiplier),t.damageMultiplier&&(e.damageMultiplier*=t.damageMultiplier),t.enemyMultiplier&&(e.enemyMultiplier*=t.enemyMultiplier),t.disableRegen&&(e.disableRegen=!0),t.minRarity&&(e.minRarity=t.minRarity);return e}reset(){this.currentFloor=1,this.activeModifiers=[],console.log("🔄 Reset to Floor 1")}save(){return{currentFloor:this.currentFloor,highestFloor:this.highestFloor,checkpoints:Array.from(this.checkpoints)}}load(e){e&&(e.currentFloor!==void 0&&(this.currentFloor=e.currentFloor),e.highestFloor!==void 0&&(this.highestFloor=e.highestFloor),e.checkpoints&&(this.checkpoints=new Set(e.checkpoints)),this.applyFloorModifiers())}update(e){for(const t of this.activeModifiers)if(t.damagePerSecond){const s=this.gameEngine.player;if(s&&s.isAlive){const i=t.damagePerSecond*e/1e3;s.takeDamage(i)}}}}class ds{constructor(){this.elements=this.initializeElements(),this.spellSchools=this.initializeSpellSchools(),this.magicCircles=this.initializeMagicCircles(),this.ultimateSkills=this.initializeUltimateSkills(),this.playerMagicLevel=1,this.playerMagicExp=0,this.unlockedSpells=[],this.activeBuffs=[],this.comboChain=0,this.elementalAffinity={}}initializeElements(){return{fire:{name:"Fire",color:"#FF4500",strengths:["ice","nature"],weaknesses:["water","earth"],spells:[{id:"fireball",name:"Fireball",damage:100,manaCost:20,level:1},{id:"flame_burst",name:"Flame Burst",damage:250,manaCost:50,level:5},{id:"meteor_strike",name:"Meteor Strike",damage:500,manaCost:100,level:10},{id:"inferno",name:"Inferno",damage:1e3,manaCost:200,level:20},{id:"phoenix_rebirth",name:"Phoenix Rebirth",damage:2e3,manaCost:500,level:50}]},ice:{name:"Ice",color:"#00BFFF",strengths:["water","wind"],weaknesses:["fire","lightning"],spells:[{id:"ice_shard",name:"Ice Shard",damage:80,manaCost:15,level:1},{id:"frost_nova",name:"Frost Nova",damage:200,manaCost:40,level:5},{id:"blizzard",name:"Blizzard",damage:450,manaCost:90,level:10},{id:"absolute_zero",name:"Absolute Zero",damage:900,manaCost:180,level:20},{id:"eternal_winter",name:"Eternal Winter",damage:1800,manaCost:450,level:50}]},lightning:{name:"Lightning",color:"#FFD700",strengths:["water","metal"],weaknesses:["earth","nature"],spells:[{id:"lightning_bolt",name:"Lightning Bolt",damage:120,manaCost:25,level:1},{id:"chain_lightning",name:"Chain Lightning",damage:280,manaCost:60,level:5},{id:"thunder_storm",name:"Thunder Storm",damage:550,manaCost:110,level:10},{id:"judgement",name:"Divine Judgement",damage:1100,manaCost:220,level:20},{id:"gods_wrath",name:"God's Wrath",damage:2200,manaCost:550,level:50}]},water:{name:"Water",color:"#1E90FF",strengths:["fire","earth"],weaknesses:["lightning","ice"],spells:[{id:"water_jet",name:"Water Jet",damage:70,manaCost:12,level:1},{id:"tidal_wave",name:"Tidal Wave",damage:180,manaCost:35,level:5},{id:"tsunami",name:"Tsunami",damage:400,manaCost:80,level:10},{id:"ocean_fury",name:"Ocean Fury",damage:800,manaCost:160,level:20},{id:"leviathan",name:"Summon Leviathan",damage:1600,manaCost:400,level:50}]},earth:{name:"Earth",color:"#8B4513",strengths:["lightning","wind"],weaknesses:["water","ice"],spells:[{id:"stone_spike",name:"Stone Spike",damage:90,manaCost:18,level:1},{id:"earthquake",name:"Earthquake",damage:220,manaCost:45,level:5},{id:"mountain_crush",name:"Mountain Crush",damage:480,manaCost:95,level:10},{id:"continental_shift",name:"Continental Shift",damage:950,manaCost:190,level:20},{id:"titan_fist",name:"Titan Fist",damage:1900,manaCost:475,level:50}]},wind:{name:"Wind",color:"#E0E0E0",strengths:["earth","nature"],weaknesses:["fire","lightning"],spells:[{id:"wind_blade",name:"Wind Blade",damage:85,manaCost:16,level:1},{id:"tornado",name:"Tornado",damage:210,manaCost:42,level:5},{id:"tempest",name:"Tempest",damage:460,manaCost:92,level:10},{id:"sky_dragon",name:"Sky Dragon Roar",damage:920,manaCost:184,level:20},{id:"heaven_pierce",name:"Heaven Pierce",damage:1840,manaCost:460,level:50}]},nature:{name:"Nature",color:"#228B22",strengths:["water","earth"],weaknesses:["fire","ice"],spells:[{id:"vine_whip",name:"Vine Whip",damage:75,manaCost:14,level:1},{id:"thorn_burst",name:"Thorn Burst",damage:190,manaCost:38,level:5},{id:"forest_rage",name:"Forest Rage",damage:420,manaCost:84,level:10},{id:"world_tree",name:"World Tree Wrath",damage:840,manaCost:168,level:20},{id:"gaia_force",name:"Gaia Force",damage:1680,manaCost:420,level:50}]},light:{name:"Light",color:"#FFFACD",strengths:["dark","undead"],weaknesses:["void","shadow"],spells:[{id:"holy_bolt",name:"Holy Bolt",damage:110,manaCost:22,level:1},{id:"divine_beam",name:"Divine Beam",damage:270,manaCost:54,level:5},{id:"celestial_burst",name:"Celestial Burst",damage:520,manaCost:104,level:10},{id:"archangel",name:"Archangel Strike",damage:1040,manaCost:208,level:20},{id:"salvation",name:"Salvation",damage:2080,manaCost:520,level:50}]},dark:{name:"Dark",color:"#4B0082",strengths:["light","living"],weaknesses:["holy","divine"],spells:[{id:"shadow_bolt",name:"Shadow Bolt",damage:105,manaCost:21,level:1},{id:"dark_pulse",name:"Dark Pulse",damage:260,manaCost:52,level:5},{id:"void_strike",name:"Void Strike",damage:510,manaCost:102,level:10},{id:"demon_king",name:"Demon King Wrath",damage:1020,manaCost:204,level:20},{id:"apocalypse",name:"Apocalypse",damage:2040,manaCost:510,level:50}]},arcane:{name:"Arcane",color:"#9370DB",strengths:["all"],weaknesses:["none"],spells:[{id:"magic_missile",name:"Magic Missile",damage:95,manaCost:19,level:1},{id:"arcane_blast",name:"Arcane Blast",damage:240,manaCost:48,level:5},{id:"mana_storm",name:"Mana Storm",damage:490,manaCost:98,level:10},{id:"reality_break",name:"Reality Break",damage:980,manaCost:196,level:20},{id:"universe_end",name:"Universe End",damage:1960,manaCost:490,level:50}]}}}initializeSpellSchools(){return{evocation:{name:"Evocation",description:"Pure damage magic",bonuses:{damage:1.5,manaCost:1}},conjuration:{name:"Conjuration",description:"Summon creatures and objects",bonuses:{summonPower:1.5,duration:1.3}},enchantment:{name:"Enchantment",description:"Buff and debuff magic",bonuses:{buffPower:1.4,debuffDuration:1.5}},illusion:{name:"Illusion",description:"Deceive and confuse enemies",bonuses:{evasion:1.3,critChance:1.2}},necromancy:{name:"Necromancy",description:"Death and undead magic",bonuses:{lifesteal:.3,undeadDamage:2}},abjuration:{name:"Abjuration",description:"Protective magic",bonuses:{defense:1.5,resistance:1.4}},transmutation:{name:"Transmutation",description:"Transform matter and energy",bonuses:{versatility:1.3,adaptability:1.4}}}}initializeMagicCircles(){return[{circle:1,level:1,spellsUnlocked:5,manaBonus:100,description:"Novice Mage"},{circle:2,level:10,spellsUnlocked:10,manaBonus:250,description:"Apprentice Mage"},{circle:3,level:25,spellsUnlocked:20,manaBonus:500,description:"Adept Mage"},{circle:4,level:50,spellsUnlocked:35,manaBonus:1e3,description:"Master Mage"},{circle:5,level:75,spellsUnlocked:50,manaBonus:2e3,description:"Archmage"},{circle:6,level:100,spellsUnlocked:70,manaBonus:4e3,description:"Grand Archmage"},{circle:7,level:150,spellsUnlocked:100,manaBonus:8e3,description:"Sage"},{circle:8,level:200,spellsUnlocked:150,manaBonus:16e3,description:"Transcendent Sage"},{circle:9,level:300,spellsUnlocked:200,manaBonus:32e3,description:"Magic God"}]}initializeUltimateSkills(){return[{id:"time_stop",name:"Time Stop",description:"Freeze time for 5 seconds",manaCost:1e3,cooldown:300,effect:"freeze_time"},{id:"meteor_rain",name:"Meteor Rain",description:"Rain meteors across the battlefield",manaCost:800,cooldown:180,effect:"aoe_damage_5000"},{id:"dimensional_rift",name:"Dimensional Rift",description:"Tear a rift in space-time",manaCost:1200,cooldown:360,effect:"dimensional_damage_8000"},{id:"star_fall",name:"Star Fall",description:"Call down the stars themselves",manaCost:1500,cooldown:480,effect:"cosmic_damage_12000"},{id:"genesis",name:"Genesis",description:"Create a new world",manaCost:2e3,cooldown:600,effect:"ultimate_creation_20000"}]}castSpell(e,t,s,i){const a=this.elements[t];if(!a)return null;const n=a.spells.find(r=>r.id===e);if(!n)return null;if(s.mana<n.manaCost)return{success:!1,reason:"Not enough mana"};let o=n.damage;return i.element&&a.strengths.includes(i.element)&&(o*=1.5),i.element&&a.weaknesses.includes(i.element)&&(o*=.75),this.comboChain>0&&(o*=1+this.comboChain*.1),s.mana-=n.manaCost,this.comboChain++,{success:!0,damage:Math.floor(o),element:t,spellName:n.name,comboChain:this.comboChain,effects:this.generateSpellEffects(n,t)}}generateSpellEffects(e,t){const s=[];return s.push({type:"particle",element:t,intensity:e.damage/100}),e.level>=10&&s.push({type:"status",effect:`${t}_burn`,duration:5,dotDamage:e.damage*.1}),s}learnSpell(e){return this.unlockedSpells.includes(e)?!1:(this.unlockedSpells.push(e),!0)}gainMagicExp(e){this.playerMagicExp+=e;const t=this.magicCircles.find(s=>s.level>this.playerMagicLevel);return t&&this.playerMagicExp>=t.level*1e3?(this.playerMagicLevel=t.level,{levelUp:!0,newCircle:t,spellsUnlocked:t.spellsUnlocked}):{levelUp:!1}}resetComboChain(){this.comboChain=0}update(e){this.activeBuffs=this.activeBuffs.filter(t=>(t.duration-=e,t.duration>0)),this.comboChain>0&&(this.comboChain=Math.max(0,this.comboChain-e*.1))}getPlayerMagicCircle(){return this.magicCircles.find(e=>e.level<=this.playerMagicLevel)||this.magicCircles[0]}getAllSpells(){const e=[];return Object.entries(this.elements).forEach(([t,s])=>{s.spells.forEach(i=>{e.push({...i,element:t,elementColor:s.color})})}),e}}class hs{constructor(){this.baddies=this.initializeBaddies(),this.encounterHistory=[],this.affectionLevels={},this.defeatedCount={}}initializeBaddies(){return[{id:"crimson_empress",name:"Crimson Empress Scarlet",title:"The Flame Enchantress",appearance:{hair:"Long flowing crimson hair",eyes:"Fierce ruby red eyes",outfit:"Elegant red battle dress with gold accents",features:"Confident smirk, battle-hardened beauty"},personality:"Dominant, confident, respects strength",element:"fire",level:50,stats:{hp:5e4,attack:2500,defense:1800,magic:3e3,speed:2200},abilities:["Crimson Dance - Multi-hit fire slashes","Empress Authority - Dominate weaker foes","Flame Temptation - Charm and burn damage","Ultimate: Scarlet Apocalypse"],dropTable:{"Crimson Kiss Token":.1,"Empress Battle Dress":.05,"Flame Heart Crystal":.15,"Legendary Fire Weapon":.03},dialogue:{encounter:"Oh? You dare challenge me? Show me your strength, darling~",halfHealth:"Impressive... You're making my heart race!",defeat:"You've won my respect... and perhaps something more..."},affectionRewards:{50:"Empress Battle Outfit (cosmetic)",100:"Crimson Familiar (pet)",200:"Ultimate Fire Skill: Scarlet Flame",500:"Special Scene: Private Training Session"}},{id:"frost_queen",name:"Frost Queen Elsa",title:"The Ice Princess",appearance:{hair:"Silver-white hair with ice crystals",eyes:"Cold blue eyes that warm when you impress her",outfit:"Regal ice-crystal gown with bare shoulders",features:"Elegant, untouchable beauty"},personality:"Cool and distant, but melts for the right person",element:"ice",level:55,stats:{hp:48e3,attack:2300,defense:2500,magic:3500,speed:1900},abilities:["Frozen Heart - Ice barrier + reflect damage","Absolute Zero Kiss - Freeze and massive damage","Ice Queen's Blessing - Self-heal + attack buff","Ultimate: Eternal Winter Storm"],dropTable:{"Frozen Heart Fragment":.12,"Ice Queen Crown":.04,"Eternal Ice Shard":.18,"Legendary Ice Weapon":.03},dialogue:{encounter:"Few dare approach me... Are you different from the rest?",halfHealth:"This warmth I feel... what is it?",defeat:"You've melted my frozen heart... Stay close to me."},affectionRewards:{50:"Ice Princess Tiara (cosmetic)",100:"Frozen Familiar (pet)",200:"Ultimate Ice Skill: Eternal Freeze",500:"Special Scene: Ice Palace Romance"}},{id:"shadow_assassin",name:"Shadow Assassin Yuki",title:"The Silent Death",appearance:{hair:"Short black hair with purple highlights",eyes:"Mysterious purple eyes",outfit:"Tight black leather assassin suit",features:"Lithe, dangerous, strikingly beautiful"},personality:"Mysterious, playful, deadly serious in battle",element:"dark",level:60,stats:{hp:42e3,attack:3500,defense:1500,magic:2800,speed:4e3},abilities:["Shadow Strike - Teleport behind + critical","Deadly Dance - Multi-hit combo with evasion","Assassination Attempt - One-hit kill chance","Ultimate: Dance of Death"],dropTable:{"Shadow Essence":.15,"Assassin's Kiss Mark":.08,"Void Blade Fragment":.12,"Legendary Dark Weapon":.03},dialogue:{encounter:"Shhh~ Let's dance in the shadows, shall we?",halfHealth:"You can keep up with me? Interesting~",defeat:"I'll be watching you from the shadows... always."},affectionRewards:{50:"Shadow Assassin Outfit (cosmetic)",100:"Shadow Cat Familiar (pet)",200:"Ultimate Shadow Skill: Void Step",500:"Special Scene: Moonlight Rooftop Meeting"}},{id:"lightning_valkyrie",name:"Lightning Valkyrie Freya",title:"The Thunder Goddess",appearance:{hair:"Golden blonde hair flowing with electricity",eyes:"Electric blue eyes crackling with power",outfit:"Divine armor with exposed midriff",features:"Powerful, warrior goddess beauty"},personality:"Proud warrior, seeks worthy opponents",element:"lightning",level:65,stats:{hp:55e3,attack:3800,defense:2200,magic:3200,speed:3500},abilities:["Valkyrie Strike - Lightning-fast slash","Thunder Judgement - AOE lightning damage","Divine Spark - Revive at 1 HP once","Ultimate: Ragnarok Thunder"],dropTable:{"Thunder God Essence":.1,"Valkyrie Wings":.05,"Divine Lightning Spear":.08,"Legendary Lightning Weapon":.03},dialogue:{encounter:"A challenger! Prove yourself worthy of battle with me!",halfHealth:"Magnificent! You fight like a true warrior!",defeat:"You are worthy... Fight by my side, warrior."},affectionRewards:{50:"Valkyrie Armor Set (cosmetic)",100:"Thunder Hawk Familiar (pet)",200:"Ultimate Lightning Skill: Gods Judgement",500:"Special Scene: Hall of Warriors Feast"}},{id:"nature_dryad",name:"Nature Dryad Sylvia",title:"The Forest Enchantress",appearance:{hair:"Green hair adorned with flowers",eyes:"Emerald green eyes full of life",outfit:"Living flower dress, natural beauty",features:"Ethereal, otherworldly gorgeous"},personality:"Gentle but protective of nature",element:"nature",level:52,stats:{hp:45e3,attack:2100,defense:2e3,magic:3800,speed:2e3},abilities:["Forest Embrace - Healing + DOT vines","Nature's Wrath - Summon forest guardians","Life Drain Kiss - Steal HP and buffs","Ultimate: Gaia's Judgement"],dropTable:{"Ancient Seed":.14,"Dryad's Blessing":.1,"World Tree Branch":.09,"Legendary Nature Weapon":.03},dialogue:{encounter:"The forest speaks of your arrival... Show me your intentions.",halfHealth:"You fight with honor... Nature smiles upon you.",defeat:"Join me in protecting this world... my champion."},affectionRewards:{50:"Dryad Outfit (cosmetic)",100:"Forest Spirit Familiar (pet)",200:"Ultimate Nature Skill: World Tree Power",500:"Special Scene: Sacred Forest Grove"}},{id:"celestial_maiden",name:"Celestial Maiden Aurora",title:"The Starlight Princess",appearance:{hair:"Shimmering silver hair like starlight",eyes:"Galaxy-colored eyes with swirling nebulae",outfit:"Flowing celestial robes revealing curves",features:"Divine beauty, literally glowing"},personality:"Innocent yet powerful, curious about mortals",element:"light",level:70,stats:{hp:58e3,attack:2800,defense:2400,magic:4500,speed:2600},abilities:["Starlight Caress - Heal and damage simultaneously","Celestial Judgement - Purifying light beam","Divine Protection - Invulnerability shield","Ultimate: Genesis Star Fall"],dropTable:{"Star Fragment":.11,"Celestial Halo":.06,"Divine Essence":.13,"Legendary Light Weapon":.03},dialogue:{encounter:"A mortal seeking the stars? How fascinating~",halfHealth:"Your determination shines brighter than any star!",defeat:"You've touched my heart... Descend with me to the mortal world."},affectionRewards:{50:"Celestial Wings (cosmetic)",100:"Star Phoenix Familiar (pet)",200:"Ultimate Light Skill: Salvation",500:"Special Scene: Starlit Confession"}},{id:"demon_queen",name:"Demon Queen Lilith",title:"The Temptress of Darkness",appearance:{hair:"Black hair with red streaks",eyes:"Glowing red eyes with slit pupils",outfit:"Revealing demonic armor with chains",features:"Dangerously seductive, demonic horns and tail"},personality:"Seductive, dominant, loves strong souls",element:"dark",level:75,stats:{hp:65e3,attack:3500,defense:2100,magic:4200,speed:2800},abilities:["Demonic Seduction - Charm + life drain","Hell's Embrace - Fire + dark combo attack","Queen's Command - Control summoned demons","Ultimate: Demon King's Bride"],dropTable:{"Demon Queen's Mark":.09,"Succubus Heart":.07,"Hell Flame Core":.12,"Legendary Dark Weapon":.03},dialogue:{encounter:"Your soul looks delicious... Come, entertain me~",halfHealth:"Such passion! I want to devour you!",defeat:"You've conquered the Demon Queen... claim your prize."},affectionRewards:{50:"Demon Queen Outfit (cosmetic)",100:"Imp Familiar (pet)",200:"Ultimate Dark Skill: Demon Transformation",500:"Special Scene: Throne Room Submission"}},{id:"dragon_empress",name:"Dragon Empress Tiamat",title:"The Five-Headed Calamity",appearance:{hair:"Multi-colored hair (red, blue, green, white, black)",eyes:"Dragon eyes that shift colors",outfit:"Dragon scale bikini armor",features:"Majestic, terrifying beauty with dragon features"},personality:"Proud, ancient, respects only the strongest",element:"arcane",level:100,stats:{hp:1e5,attack:5e3,defense:4e3,magic:5500,speed:3e3},abilities:["Five Element Breath - All elements at once","Dragon's Majesty - Intimidate + stat debuff","Empress Transformation - True dragon form","Ultimate: World Eater Dragon"],dropTable:{"Dragon Empress Scale":.05,"Five Element Heart":.02,"Dragon God Core":.08,"Legendary Mythic Weapon":.01},dialogue:{encounter:"Kneel before the Dragon Empress, mortal!",halfHealth:"What?! No one has pushed me this far in centuries!",defeat:"Impossible... You've won my eternal devotion, my king."},affectionRewards:{50:"Dragon Empress Crown (cosmetic)",100:"Baby Dragon Familiar (pet)",200:"Ultimate Dragon Skill: Dragon God Form",500:"Special Scene: Dragon's Lair Ceremony"}}]}encounterBaddie(e,t,s){const i=this.baddies.find(o=>o.id===e);if(!i)return null;const a=s/(i.stats.attack+i.stats.magic),n={baddie:i,difficulty:a<.5?"impossible":a<.7?"very_hard":a<.9?"hard":a<1.2?"fair":"easy",dialogue:i.dialogue.encounter,rewards:this.calculateRewards(i,a)};return this.encounterHistory.push({baddieId:e,timestamp:Date.now(),difficulty:n.difficulty}),n}defeatBaddie(e,t){const s=this.baddies.find(o=>o.id===e);if(!s)return null;this.defeatedCount[e]=(this.defeatedCount[e]||0)+1;const i=t==="perfect"?20:t==="excellent"?15:t==="good"?10:5;this.affectionLevels[e]=(this.affectionLevels[e]||0)+i;const a=[],n=this.affectionLevels[e];return Object.entries(s.affectionRewards).forEach(([o,r])=>{n>=parseInt(o)&&n-i<parseInt(o)&&a.push({type:"affection_reward",reward:r,affectionLevel:o})}),Object.entries(s.dropTable).forEach(([o,r])=>{Math.random()<r&&a.push({type:"drop",item:o})}),{baddie:s,dialogue:s.dialogue.defeat,affectionGain:i,currentAffection:n,rewards:a,defeatsCount:this.defeatedCount[e]}}calculateRewards(e,t){const s=e.level*1e3,i=e.level*500,a=t<.7?2:t<.9?1.5:t<1.2?1:.8;return{exp:Math.floor(s*a),gold:Math.floor(i*a),potentialDrops:Object.keys(e.dropTable)}}getBaddieAffection(e){return this.affectionLevels[e]||0}getAvailableBaddies(e){return this.baddies.filter(t=>t.level<=e+20&&t.level>=e-10)}getNextAffectionReward(e){const t=this.baddies.find(n=>n.id===e);if(!t)return null;const s=this.affectionLevels[e]||0,a=Object.keys(t.affectionRewards).map(Number).sort((n,o)=>n-o).find(n=>n>s);return a?{threshold:a,reward:t.affectionRewards[a],progress:s,remaining:a-s}:null}getAllBaddies(){return this.baddies}}class ms{constructor(){this.powerLevel=1,this.powerExp=0,this.powerMultiplier=1,this.prestigeTier=0,this.trainingMultipliers=this.initializeTrainingMultipliers(),this.powerRanks=this.initializePowerRanks(),this.evolutionStages=this.initializeEvolutionStages(),this.powerAuras=[],this.trainingBonuses={}}initializeTrainingMultipliers(){return{combat:1,dungeon:1.5,boss:3,raid:5,pvp:2.5,quest:1.2,training:.8}}initializePowerRanks(){return[{rank:"F",minPower:1,maxPower:100,title:"Novice",color:"#808080"},{rank:"E",minPower:101,maxPower:500,title:"Beginner",color:"#CD7F32"},{rank:"D",minPower:501,maxPower:2e3,title:"Intermediate",color:"#C0C0C0"},{rank:"C",minPower:2001,maxPower:5e3,title:"Advanced",color:"#FFD700"},{rank:"B",minPower:5001,maxPower:1e4,title:"Expert",color:"#00CED1"},{rank:"A",minPower:10001,maxPower:25e3,title:"Master",color:"#9370DB"},{rank:"S",minPower:25001,maxPower:5e4,title:"Grandmaster",color:"#FF1493"},{rank:"SS",minPower:50001,maxPower:1e5,title:"Legend",color:"#FF4500"},{rank:"SSS",minPower:100001,maxPower:25e4,title:"Mythic",color:"#FF0000"},{rank:"EX",minPower:250001,maxPower:5e5,title:"Transcendent",color:"#8B00FF"},{rank:"Z",minPower:500001,maxPower:1e6,title:"God-Slayer",color:"#FFD700"},{rank:"ZZ",minPower:1000001,maxPower:5e6,title:"Demigod",color:"#00FFFF"},{rank:"ZZZ",minPower:5000001,maxPower:1e7,title:"True God",color:"#FFFFFF"},{rank:"OMEGA",minPower:10000001,maxPower:1/0,title:"Supreme Being",color:"#FF00FF"}]}initializeEvolutionStages(){return[{stage:1,name:"Mortal",powerCap:1e4,bonuses:{stats:1,skills:1}},{stage:2,name:"Awakened",powerCap:5e4,bonuses:{stats:2,skills:1.5},requirement:"Defeat 1000 enemies"},{stage:3,name:"Ascended",powerCap:25e4,bonuses:{stats:4,skills:2},requirement:"Reach power level 25000"},{stage:4,name:"Transcendent",powerCap:1e6,bonuses:{stats:8,skills:3},requirement:"Defeat 10 Legendary bosses"},{stage:5,name:"Divine",powerCap:5e6,bonuses:{stats:16,skills:5},requirement:"Complete Divine Trials"},{stage:6,name:"Godhood",powerCap:1/0,bonuses:{stats:32,skills:10},requirement:"Defeat all Demon Lords and achieve SSS rank"}]}gainPowerExp(e,t="combat"){const s=this.trainingMultipliers[t]||1,i=1+this.prestigeTier*.1,a=e*s*this.powerMultiplier*i;this.powerExp+=a;const n=[];for(;this.powerExp>=this.getExpForNextLevel();)this.powerExp-=this.getExpForNextLevel(),this.powerLevel++,n.push(this.powerLevel),this.powerLevel%10===0&&(this.powerMultiplier+=.05);return{gained:a,levelUps:n,currentLevel:this.powerLevel,currentExp:this.powerExp,nextLevelExp:this.getExpForNextLevel()}}getExpForNextLevel(){const s=Math.pow(this.powerLevel,1.15);return Math.floor(100*s)}getCurrentPowerRank(){const e=this.calculateTotalPower();return this.powerRanks.find(t=>e>=t.minPower&&e<=t.maxPower)||this.powerRanks[this.powerRanks.length-1]}calculateTotalPower(){let e=this.powerLevel*100;return e*=1+this.prestigeTier*.5,Object.values(this.trainingBonuses).forEach(t=>{e*=1+t}),this.powerAuras.forEach(t=>{e*=t.multiplier}),Math.floor(e)}prestige(){if(this.powerLevel<100)return{success:!1,reason:"Must reach power level 100"};const e=this.getCurrentPowerRank();if(e.rank!=="SSS"&&e.rank!=="EX"&&e.rank!=="Z"&&e.rank!=="ZZ"&&e.rank!=="ZZZ"&&e.rank!=="OMEGA"&&this.prestigeTier===0&&e.rank!=="S")return{success:!1,reason:"Must reach at least S rank for first prestige"};const t=this.calculateTotalPower();return this.prestigeTier++,this.powerLevel=1,this.powerExp=0,this.powerMultiplier+=.5,{success:!0,prestigeTier:this.prestigeTier,powerRetained:Math.floor(t*.1),newMultiplier:this.powerMultiplier,rewards:this.getPrestigeRewards()}}getPrestigeRewards(){return{title:`Prestige ${this.prestigeTier} Warrior`,cosmetic:`Prestige ${this.prestigeTier} Aura`,statBonus:this.prestigeTier*100,specialAbility:this.prestigeTier>=5?"Prestige Ultimate Skill":null}}addTrainingBonus(e,t,s=null){this.trainingBonuses[e]={multiplier:t,duration:s,startTime:Date.now()}}addPowerAura(e,t,s=null){this.powerAuras.push({id:e,multiplier:t,duration:s,startTime:Date.now()})}getNextRank(){const e=this.getCurrentPowerRank(),t=this.powerRanks.indexOf(e);if(t<this.powerRanks.length-1){const s=this.powerRanks[t+1],i=this.calculateTotalPower();return{rank:s,progress:i-e.minPower,total:s.minPower-e.minPower,percentage:(i-e.minPower)/(s.minPower-e.minPower)*100}}return null}getEvolutionStage(){const e=this.calculateTotalPower();return this.evolutionStages.findLast(t=>e>=(t.powerCap===1/0?0:t.powerCap))||this.evolutionStages[0]}canEvolve(){const e=this.getEvolutionStage(),t=this.evolutionStages.indexOf(e);if(t<this.evolutionStages.length-1){const s=this.evolutionStages[t+1];return this.calculateTotalPower()>=s.powerCap}return!1}getPowerLeaderboardPosition(e){const t=this.calculateTotalPower();return e.sort((i,a)=>a.power-i.power).findIndex(i=>i.power<=t)+1}update(e){Object.entries(this.trainingBonuses).forEach(([t,s])=>{s.duration&&Date.now()-s.startTime>=s.duration&&delete this.trainingBonuses[t]}),this.powerAuras=this.powerAuras.filter(t=>t.duration?Date.now()-t.startTime<t.duration:!0)}getStats(){return{powerLevel:this.powerLevel,totalPower:this.calculateTotalPower(),rank:this.getCurrentPowerRank(),prestigeTier:this.prestigeTier,powerMultiplier:this.powerMultiplier,evolutionStage:this.getEvolutionStage(),nextRank:this.getNextRank(),expProgress:{current:this.powerExp,needed:this.getExpForNextLevel(),percentage:this.powerExp/this.getExpForNextLevel()*100}}}}class us{constructor(){this.currentWave=1,this.currentFloor=1,this.battleCount=0,this.killStreak=0,this.maxKillStreak=0,this.totalKills=0,this.survivalTime=0,this.difficulties=this.initializeDifficulties(),this.waveRewards=[],this.streakBonuses=this.initializeStreakBonuses(),this.floorModifiers=[],this.bossWaves=[10,25,50,75,100]}initializeDifficulties(){return{easy:{name:"Easy",enemyMultiplier:.5,expMultiplier:.8,goldMultiplier:.8,dropRateMultiplier:1},normal:{name:"Normal",enemyMultiplier:1,expMultiplier:1,goldMultiplier:1,dropRateMultiplier:1},hard:{name:"Hard",enemyMultiplier:1.5,expMultiplier:1.3,goldMultiplier:1.3,dropRateMultiplier:1.2},expert:{name:"Expert",enemyMultiplier:2,expMultiplier:1.8,goldMultiplier:1.8,dropRateMultiplier:1.5},master:{name:"Master",enemyMultiplier:3,expMultiplier:2.5,goldMultiplier:2.5,dropRateMultiplier:2},insane:{name:"Insane",enemyMultiplier:5,expMultiplier:4,goldMultiplier:4,dropRateMultiplier:3},hell:{name:"Hell",enemyMultiplier:10,expMultiplier:8,goldMultiplier:8,dropRateMultiplier:5},nightmare:{name:"Nightmare",enemyMultiplier:20,expMultiplier:15,goldMultiplier:15,dropRateMultiplier:10}}}initializeStreakBonuses(){return[{streak:10,bonus:"Double Damage",multiplier:2},{streak:25,bonus:"Triple Gold",goldMultiplier:3},{streak:50,bonus:"Quad Experience",expMultiplier:4},{streak:100,bonus:"Legendary Drop Guarantee",guaranteedLegendary:!0},{streak:250,bonus:"God Mode (30s)",invulnerability:3e4},{streak:500,bonus:"Mythic Weapon Drop",guaranteedMythic:!0},{streak:1e3,bonus:"Ultimate Power Boost",allMultiplier:10}]}startWave(e="normal"){const t=this.difficulties[e],s=1+this.currentWave*.05,i=1+this.currentFloor*.1,a=this.bossWaves.includes(this.currentWave),n=a?1:5+Math.floor(this.currentWave/10),o=Math.min(n,50),r=[];for(let l=0;l<o;l++)r.push({type:a?"boss":this.getEnemyType(),hp:this.calculateEnemyHP(t,s,i,a),attack:this.calculateEnemyAttack(t,s,i,a),defense:this.calculateEnemyDefense(t,s,i,a),level:this.currentWave+Math.floor(this.currentFloor/10)});return{wave:this.currentWave,floor:this.currentFloor,enemies:r,isBossWave:a,modifiers:this.floorModifiers,streakBonuses:this.getActiveStreakBonuses(),rewards:this.calculateWaveRewards(t,s,i,a)}}getEnemyType(){const e=Math.random();return e<.5?"normal":e<.75?"elite":e<.95?"champion":"legendary"}calculateEnemyHP(e,t,s,i){return Math.floor((i?1e5:1e3)*e.enemyMultiplier*t*s*(i?10:1))}calculateEnemyAttack(e,t,s,i){return Math.floor((i?5e3:100)*e.enemyMultiplier*t*s*(i?8:1))}calculateEnemyDefense(e,t,s,i){return Math.floor((i?3e3:50)*e.enemyMultiplier*t*s*(i?6:1))}calculateWaveRewards(e,t,s,i){const a=i?1e4:1e3,n=i?5e3:500,o=1+this.killStreak*.01;return{exp:Math.floor(a*e.expMultiplier*t*s*o),gold:Math.floor(n*e.goldMultiplier*t*s*o),powerExp:Math.floor(a/10*t*s),dropChance:.1*e.dropRateMultiplier*(i?5:1)}}completeWave(e,t){this.currentWave++,this.totalKills+=e,this.battleCount++,t==="perfect"||t==="flawless"?(this.killStreak+=e,this.killStreak>this.maxKillStreak&&(this.maxKillStreak=this.killStreak)):(t==="death"||t==="failed")&&(this.killStreak=0),this.currentWave%10===1&&this.currentWave>1&&this.advanceFloor();const s=this.checkStreakBonuses();return{wave:this.currentWave,floor:this.currentFloor,killStreak:this.killStreak,totalKills:this.totalKills,newBonuses:s,nextWave:this.startWave()}}advanceFloor(){return this.currentFloor++,this.currentFloor%5===0&&this.addFloorModifier(),{floor:this.currentFloor,modifiers:this.floorModifiers,bonus:this.getFloorBonus()}}addFloorModifier(){const e=[{id:"increased_spawn",name:"Swarm",effect:"enemyCount",multiplier:1.5},{id:"elite_enemies",name:"Elite Force",effect:"eliteChance",multiplier:2},{id:"enraged",name:"Enraged",effect:"enemyDamage",multiplier:1.5},{id:"fortified",name:"Fortified",effect:"enemyDefense",multiplier:1.5},{id:"swift",name:"Swift",effect:"enemySpeed",multiplier:1.3},{id:"regenerating",name:"Regenerating",effect:"enemyRegen",value:.02},{id:"explosive",name:"Explosive",effect:"deathExplosion",damage:1e3},{id:"vampiric",name:"Vampiric",effect:"lifesteal",value:.3},{id:"shielded",name:"Shielded",effect:"shield",value:.2},{id:"berserk",name:"Berserk",effect:"lowHPBoost",multiplier:2}],t=e[Math.floor(Math.random()*e.length)];this.floorModifiers.find(s=>s.id===t.id)||this.floorModifiers.push(t)}getFloorBonus(){return{10:{type:"checkpoint",reward:"Can restart from floor 10"},25:{type:"powerup",reward:"+50% Permanent Attack"},50:{type:"legendary",reward:"Guaranteed Legendary Drop"},75:{type:"ultimate",reward:"Ultimate Skill Unlock"},100:{type:"mythic",reward:"Mythic Tier Equipment"},150:{type:"ascension",reward:"Ascension Point"},200:{type:"godly",reward:"Godly Artifact"},250:{type:"supreme",reward:"Supreme Title"},300:{type:"transcendent",reward:"Transcendent Power"},500:{type:"ultimate",reward:"Ultimate God Weapon"}}[this.currentFloor]||null}checkStreakBonuses(){const e=[];return this.streakBonuses.forEach(t=>{this.killStreak===t.streak&&e.push(t)}),e}getActiveStreakBonuses(){return this.streakBonuses.filter(e=>this.killStreak>=e.streak)}failWave(){return this.killStreak=0,{waveSetback:Math.max(1,this.currentWave-5),goldLoss:Math.floor(this.waveRewards.reduce((t,s)=>t+s.gold,0)*.1)}}resetProgress(){this.currentWave=1,this.currentFloor=1,this.killStreak=0,this.floorModifiers=[],this.waveRewards=[]}getLeaderboardStats(){return{highestWave:this.currentWave,highestFloor:this.currentFloor,maxKillStreak:this.maxKillStreak,totalKills:this.totalKills,battleCount:this.battleCount,survivalTime:this.survivalTime,score:this.calculateScore()}}calculateScore(){return this.currentWave*1e3+this.currentFloor*1e4+this.maxKillStreak*100+this.totalKills*10+Math.floor(this.survivalTime/1e3)}update(e){this.survivalTime+=e}getStats(){return{currentWave:this.currentWave,currentFloor:this.currentFloor,killStreak:this.killStreak,maxKillStreak:this.maxKillStreak,totalKills:this.totalKills,battleCount:this.battleCount,survivalTime:this.survivalTime,floorModifiers:this.floorModifiers,activeStreakBonuses:this.getActiveStreakBonuses(),score:this.calculateScore()}}}class ps{constructor(){this.combos=new Map,this.reactions=new Map,this.mechanicsState=new Map,this.chains=[],this.comboTimer=null,this.reactionQueue=[],this.initializeMechanics()}initializeMechanics(){this.comboTypes={ELEMENTAL_FUSION:{triggers:["fire","ice"],result:"steam_explosion",damageMultiplier:2.5,aoeRadius:5,effectDuration:3e3},TRIPLE_STRIKE:{triggers:["attack","attack","attack"],result:"devastating_blow",damageMultiplier:3,critBonus:50,window:2e3},MAGIC_CHAIN:{triggers:["spell","spell","spell","spell"],result:"arcane_overload",damageMultiplier:4,manaCostReduction:50,window:5e3},PERFECT_COUNTER:{triggers:["block","attack"],result:"counter_strike",damageMultiplier:2,guaranteedCrit:!0,window:500},ASSASSINATE:{triggers:["stealth","backstab"],result:"execution",damageMultiplier:5,instantKillChance:25,window:1e3}},this.reactionTypes={OVERLOAD:{elements:["fire","lightning"],damage:1.5,effect:"explosion",aoeRadius:3,knockback:!0},FREEZE:{elements:["ice","water"],damage:0,effect:"frozen",duration:3e3,immobilize:!0},VAPORIZE:{elements:["fire","water"],damage:2,effect:"steam",damageBonus:100},ELECTRO_CHARGED:{elements:["lightning","water"],damage:1.2,effect:"shocked",duration:5e3,tickDamage:.2},MELT:{elements:["fire","ice"],damage:2.5,effect:"melting",critBonus:50},SUPERCONDUCT:{elements:["ice","lightning"],damage:1.3,effect:"cryo_shock",defenseReduction:40,duration:8e3},SWIRL:{elements:["wind","any_element"],damage:1,effect:"swirl",spreads:!0,aoeRadius:5},CRYSTALLIZE:{elements:["earth","any_element"],damage:0,effect:"shield",shieldStrength:.3,duration:15e3}},this.positioningBonuses={FLANKING:{damageBonus:1.25,critBonus:15,description:"Attacking from the side"},BACKSTAB:{damageBonus:1.5,critBonus:30,guaranteedCrit:!0,description:"Attacking from behind"},HIGH_GROUND:{damageBonus:1.15,accuracyBonus:10,rangeBonus:2,description:"Elevated position"},COVER:{defenseBonus:1.3,evasionBonus:20,description:"Behind cover"},SURROUNDED:{damagePenalty:.8,defensePenalty:.7,description:"Surrounded by enemies"},FORMATION:{defenseBonus:1.2,teamBonus:1.15,description:"In formation with allies"}},this.momentum={current:0,max:100,decayRate:1,gainRates:{KILL:10,CRIT:5,COMBO:3,DODGE:2,PERFECT_BLOCK:5},bonuses:{25:{attackSpeed:1.1,name:"Focused"},50:{attackSpeed:1.2,damage:1.1,name:"In The Zone"},75:{attackSpeed:1.3,damage:1.2,critChance:10,name:"Unstoppable"},100:{attackSpeed:1.5,damage:1.5,critChance:25,invulnerable:3e3,name:"Godmode"}}},this.staggerSystem={enabled:!0,baseThreshold:100,currentDamage:0,staggerMultiplier:2,staggerDuration:5e3,vulnerabilityIncrease:50},this.parrySystem={enabled:!0,parryWindow:300,perfectParryWindow:100,parryMultiplier:1.5,perfectParryMultiplier:3,parryStunDuration:2e3},this.burstSystem={current:0,max:100,gainRates:{DAMAGE_TAKEN:1,DAMAGE_DEALT:.5,ALLY_DOWN:25,TIME:.1},burstModes:{BERSERKER:{damage:2,attackSpeed:1.5,defense:.5,duration:1e4},TANK:{defense:2.5,hp_regen:5,damage:.8,duration:15e3},ASSASSIN:{critChance:50,critDamage:2,evasion:30,duration:8e3},MAGE:{spellPower:2.5,manaCost:0,cooldowns:.5,duration:12e3},SUPPORT:{healing:3,buffPower:2,allyDamage:1.5,duration:2e4}}},this.durabilitySystem={enabled:!0,maxDurability:100,repairCostMultiplier:.1,breakPenalty:.5,fatigueThreshold:20},this.statusStacking={maxStacks:10,stackBonusPerStack:.1,stackDecayRate:1,stackableEffects:["poison","bleed","burn","weakness","vulnerability"]},this.adaptiveDifficulty={enabled:!0,performanceWindow:10,adjustmentRate:.05,minMultiplier:.5,maxMultiplier:2,metrics:{deathCount:0,killCount:0,averageHealth:1,averageTime:0}}}recordAction(e,t=Date.now()){this.combos.has("current_combo")||this.combos.set("current_combo",[]);const s=this.combos.get("current_combo");s.push({action:e,timestamp:t});const i=s.filter(a=>t-a.timestamp<5e3);return this.combos.set("current_combo",i),this.checkCombo(i)}checkCombo(e){for(const[t,s]of Object.entries(this.comboTypes)){const i=e.map(n=>n.action),a=s.triggers;if(this.matchesPattern(i,a))return this.triggerCombo(t,s)}return null}matchesPattern(e,t){if(e.length<t.length)return!1;const s=e.slice(-t.length);return t.every((i,a)=>s[a]===i)}triggerCombo(e,t){return console.log(`🔥 COMBO: ${e}!`),this.chains.push({name:e,timestamp:Date.now(),multiplier:t.damageMultiplier}),this.gainMomentum(this.momentum.gainRates.COMBO*t.damageMultiplier),{name:e,...t}}checkReaction(e,t,s){for(const[i,a]of Object.entries(this.reactionTypes)){const n=a.elements;if(n[0]===e&&n[1]===t||n[1]===e&&n[0]===t||n[1]==="any_element"&&(e||t))return this.triggerReaction(i,a,s)}return null}triggerReaction(e,t,s){console.log(`⚡ REACTION: ${e}!`);const i={name:e,...t,timestamp:Date.now(),target:s};return this.reactionQueue.push(i),t.immobilize&&(s.status=s.status||{},s.status.frozen={duration:t.duration,endTime:Date.now()+t.duration}),t.tickDamage&&(s.status=s.status||{},s.status.dot={damage:t.tickDamage,interval:1e3,duration:t.duration}),i}gainMomentum(e){this.momentum.current=Math.min(this.momentum.max,this.momentum.current+e);for(const[t,s]of Object.entries(this.momentum.bonuses))this.momentum.current>=parseInt(t)&&!this.momentum.activeBonus&&(console.log(`🔥 MOMENTUM: ${s.name}!`),this.momentum.activeBonus=s,s.invulnerable&&setTimeout(()=>{this.momentum.activeBonus=null},s.invulnerable))}updateMomentum(e){this.momentum.current>0&&(this.momentum.current=Math.max(0,this.momentum.current-this.momentum.decayRate*e/1e3),this.momentum.activeBonus&&this.momentum.current<25&&(this.momentum.activeBonus=null))}addStaggerDamage(e,t){return this.staggerSystem.enabled?(t.staggerDamage=(t.staggerDamage||0)+e,t.staggerThreshold=t.staggerThreshold||this.staggerSystem.baseThreshold*(t.stats?.hp/100||1),t.staggerDamage>=t.staggerThreshold?this.triggerStagger(t):!1):!1}triggerStagger(e){return console.log("💥 STAGGER!"),e.staggered=!0,e.staggerEndTime=Date.now()+this.staggerSystem.staggerDuration,e.damageMultiplier=(e.damageMultiplier||1)*this.staggerSystem.staggerMultiplier,e.vulnerability=(e.vulnerability||0)+this.staggerSystem.vulnerabilityIncrease,setTimeout(()=>{e.staggered=!1,e.staggerDamage=0,e.damageMultiplier=1,e.vulnerability=0},this.staggerSystem.staggerDuration),!0}attemptParry(e,t){const s=Math.abs(Date.now()-e);return s<=this.parrySystem.perfectParryWindow?(console.log("⚔️ PERFECT PARRY!"),this.gainMomentum(this.momentum.gainRates.PERFECT_BLOCK*2),{success:!0,perfect:!0,multiplier:this.parrySystem.perfectParryMultiplier}):s<=this.parrySystem.parryWindow?(console.log("🛡️ Parry!"),this.gainMomentum(this.momentum.gainRates.PERFECT_BLOCK),{success:!0,perfect:!1,multiplier:this.parrySystem.parryMultiplier}):{success:!1}}gainBurst(e,t){const s=this.burstSystem.gainRates[e]||0;this.burstSystem.current=Math.min(this.burstSystem.max,this.burstSystem.current+t*s)}activateBurst(e){if(this.burstSystem.current<this.burstSystem.max)return{success:!1,reason:"Not enough burst energy"};const t=this.burstSystem.burstModes[e];return t?(console.log(`💥 BURST MODE: ${e}!`),this.burstSystem.current=0,this.burstSystem.activeMode=e,this.burstSystem.endTime=Date.now()+t.duration,setTimeout(()=>{this.burstSystem.activeMode=null},t.duration),{success:!0,mode:e,...t}):{success:!1,reason:"Invalid burst mode"}}calculatePositioningBonus(e,t){let s={damage:1,crit:0,guaranteedCrit:!1};const i=this.getAngleBetween(e,t);return i<45?Object.assign(s,this.positioningBonuses.BACKSTAB):i<90&&Object.assign(s,this.positioningBonuses.FLANKING),e.position?.y>t.position?.y+2&&(s.damage*=this.positioningBonuses.HIGH_GROUND.damageBonus),s}getAngleBetween(e,t){return Math.random()*180}update(e){this.updateMomentum(e),this.processReactions(),this.updateBurst(e),this.cleanupExpiredEffects()}processReactions(){for(;this.reactionQueue.length>0;)this.reactionQueue.shift()}updateBurst(e){this.gainBurst("TIME",e/1e3)}cleanupExpiredEffects(){const e=Date.now();this.chains=this.chains.filter(t=>e-t.timestamp<5e3)}getActiveBonuses(){return{momentum:this.momentum.activeBonus,burst:this.burstSystem.activeMode?this.burstSystem.burstModes[this.burstSystem.activeMode]:null,comboMultiplier:this.chains.length>0?Math.max(...this.chains.map(e=>e.multiplier)):1}}resetMechanics(){this.combos.clear(),this.chains=[],this.reactionQueue=[]}getSaveData(){return{momentum:this.momentum.current,burst:this.burstSystem.current}}loadSaveData(e){e.momentum!==void 0&&(this.momentum.current=e.momentum),e.burst!==void 0&&(this.burstSystem.current=e.burst)}}class gs{constructor(){this.saveInterval=3e4,this.saveTimer=null,this.saveHistory=[],this.maxHistorySize=10,this.saveInProgress=!1,this.saveQueue=[],this.cloudSyncEnabled=!1,this.lastSaveTime=null,this.corruptionChecks=!0,this.initializeStorage(),this.startAutoSave()}initializeStorage(){this.storageAvailable=this.checkStorageAvailable(),this.storageKeys={PRIMARY:"game_save_primary",BACKUP_1:"game_save_backup_1",BACKUP_2:"game_save_backup_2",BACKUP_3:"game_save_backup_3",METADATA:"game_save_metadata",CLOUD_SYNC:"game_save_cloud_sync",RECOVERY:"game_save_recovery"},this.initializeIndexedDB()}checkStorageAvailable(){try{const e="__storage_test__";return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch{return console.warn("localStorage not available, using IndexedDB only"),!1}}async initializeIndexedDB(){return new Promise((e,t)=>{const s=indexedDB.open("GameSaveDB",1);s.onerror=()=>t(s.error),s.onsuccess=()=>{this.db=s.result,e()},s.onupgradeneeded=i=>{const a=i.target.result;if(!a.objectStoreNames.contains("saves")){const n=a.createObjectStore("saves",{keyPath:"id",autoIncrement:!0});n.createIndex("timestamp","timestamp",{unique:!1}),n.createIndex("version","version",{unique:!1})}a.objectStoreNames.contains("backups")||a.createObjectStore("backups",{keyPath:"id",autoIncrement:!0}),a.objectStoreNames.contains("cloudSync")||a.createObjectStore("cloudSync",{keyPath:"syncId"})}})}startAutoSave(){this.saveTimer&&clearInterval(this.saveTimer),this.saveTimer=setInterval(()=>{this.performAutoSave()},this.saveInterval),console.log(`✅ Auto-save started (every ${this.saveInterval/1e3}s)`)}stopAutoSave(){this.saveTimer&&(clearInterval(this.saveTimer),this.saveTimer=null),console.log("⏸️ Auto-save stopped")}setSaveInterval(e){this.saveInterval=Math.max(5e3,e),this.startAutoSave()}async performAutoSave(){if(this.saveInProgress){console.log("⏳ Save in progress, skipping this cycle");return}try{console.log("💾 Auto-saving..."),await this.saveGame("auto"),console.log("✅ Auto-save complete")}catch(e){console.error("❌ Auto-save failed:",e),this.handleSaveFailure(e)}}async saveGame(e="manual",t=null){if(this.saveInProgress)return new Promise(s=>{this.saveQueue.push({saveType:e,gameState:t,resolve:s})});this.saveInProgress=!0;try{const s=t||this.collectGameState(),i=this.prepareSaveData(s,e);if(this.corruptionChecks&&!this.verifyIntegrity(i))throw new Error("Save data integrity check failed");return await this.performMultiLayerSave(i),this.updateSaveMetadata(i),this.addToHistory(i),this.cloudSyncEnabled&&await this.syncToCloud(i),this.lastSaveTime=Date.now(),{success:!0,timestamp:this.lastSaveTime}}catch(s){throw console.error("Save failed:",s),s}finally{this.saveInProgress=!1,this.processQueue()}}collectGameState(){return{player:window.gameEngine?.player||{},inventory:window.gameEngine?.inventory||{},progression:window.gameEngine?.progression||{},quests:window.gameEngine?.quests||{},guilds:window.gameEngine?.guilds||{},pets:window.gameEngine?.pets||{},mounts:window.gameEngine?.mounts||{},achievements:window.gameEngine?.achievements||{},stats:window.gameEngine?.stats||{},settings:window.gameEngine?.settings||{}}}prepareSaveData(e,t){return{version:"1.0.0",saveType:t,timestamp:Date.now(),checksum:this.calculateChecksum(e),compressed:this.compressData(e),state:e}}calculateChecksum(e){const t=JSON.stringify(e);let s=0;for(let i=0;i<t.length;i++){const a=t.charCodeAt(i);s=(s<<5)-s+a,s=s&s}return s.toString(16)}compressData(e){const t=JSON.stringify(e);return btoa(t)}decompressData(e){try{return JSON.parse(atob(e))}catch(t){return console.error("Decompression failed:",t),null}}verifyIntegrity(e){return this.calculateChecksum(e.state)===e.checksum}async performMultiLayerSave(e){const t=[];this.storageAvailable&&t.push(this.saveToLocalStorage(this.storageKeys.PRIMARY,e)),t.push(this.saveToIndexedDB("saves",e)),t.push(this.rotateBackups(e)),Math.random()<.1&&t.push(this.saveToLocalStorage(this.storageKeys.RECOVERY,e)),await Promise.all(t)}async saveToLocalStorage(e,t){if(this.storageAvailable)try{const s=JSON.stringify(t);localStorage.setItem(e,s)}catch(s){if(s.name==="QuotaExceededError")console.warn("LocalStorage quota exceeded, cleaning old saves"),this.cleanOldSaves(),localStorage.setItem(e,JSON.stringify(t));else throw s}}async saveToIndexedDB(e,t){return new Promise((s,i)=>{if(!this.db){i(new Error("IndexedDB not initialized"));return}const o=this.db.transaction([e],"readwrite").objectStore(e).add(t);o.onsuccess=()=>s(o.result),o.onerror=()=>i(o.error)})}async rotateBackups(e){const t=[this.storageKeys.BACKUP_3,this.storageKeys.BACKUP_2,this.storageKeys.BACKUP_1];for(let s=t.length-1;s>0;s--){const i=localStorage.getItem(t[s-1]);i&&localStorage.setItem(t[s],i)}await this.saveToLocalStorage(this.storageKeys.BACKUP_1,e)}updateSaveMetadata(e){const t={lastSaveTime:e.timestamp,saveType:e.saveType,version:e.version,checksum:e.checksum,saveCount:(this.getSaveMetadata()?.saveCount||0)+1,totalPlayTime:this.calculateTotalPlayTime()};this.storageAvailable&&localStorage.setItem(this.storageKeys.METADATA,JSON.stringify(t))}getSaveMetadata(){if(!this.storageAvailable)return null;const e=localStorage.getItem(this.storageKeys.METADATA);return e?JSON.parse(e):null}calculateTotalPlayTime(){return Date.now()}addToHistory(e){this.saveHistory.unshift({timestamp:e.timestamp,type:e.saveType,checksum:e.checksum}),this.saveHistory.length>this.maxHistorySize&&(this.saveHistory=this.saveHistory.slice(0,this.maxHistorySize))}async loadGame(){console.log("📂 Loading game...");try{let e=await this.loadFromPrimary();if((!e||!this.verifyIntegrity(e))&&(console.warn("Primary save corrupted or missing, trying backups..."),e=await this.loadFromBackups()),e||(console.warn("All saves corrupted, trying recovery save..."),e=await this.loadFromRecovery()),!e)throw new Error("No valid save data found");const t=e.state||this.decompressData(e.compressed);if(!t)throw new Error("Failed to decompress save data");return console.log("✅ Game loaded successfully"),t}catch(e){throw console.error("❌ Load failed:",e),e}}async loadFromPrimary(){try{if(this.storageAvailable){const e=localStorage.getItem(this.storageKeys.PRIMARY);if(e)return JSON.parse(e)}return await this.loadFromIndexedDB("saves")}catch(e){return console.error("Primary load failed:",e),null}}async loadFromBackups(){const e=[this.storageKeys.BACKUP_1,this.storageKeys.BACKUP_2,this.storageKeys.BACKUP_3];for(const t of e)try{const s=localStorage.getItem(t);if(s){const i=JSON.parse(s);if(this.verifyIntegrity(i))return console.log(`Loaded from backup: ${t}`),i}}catch{continue}return null}async loadFromRecovery(){try{const e=localStorage.getItem(this.storageKeys.RECOVERY);if(e){const t=JSON.parse(e);if(this.verifyIntegrity(t))return console.log("Loaded from recovery save"),t}}catch(e){console.error("Recovery load failed:",e)}return null}async loadFromIndexedDB(e){return new Promise((t,s)=>{if(!this.db){s(new Error("IndexedDB not initialized"));return}const o=this.db.transaction([e],"readonly").objectStore(e).index("timestamp").openCursor(null,"prev");o.onsuccess=r=>{const l=r.target.result;t(l?l.value:null)},o.onerror=()=>s(o.error)})}async syncToCloud(e){if(this.cloudSyncEnabled)try{console.log("☁️ Syncing to cloud..."),await this.saveToIndexedDB("cloudSync",{syncId:"latest",data:e,synced:!1,timestamp:Date.now()}),console.log("✅ Cloud sync queued")}catch(t){console.error("Cloud sync failed:",t)}}async downloadFromCloud(){return console.log("☁️ Downloading from cloud..."),null}enableCloudSync(){this.cloudSyncEnabled=!0,console.log("☁️ Cloud sync enabled")}disableCloudSync(){this.cloudSyncEnabled=!1,console.log("Cloud sync disabled")}processQueue(){if(this.saveQueue.length>0){const{saveType:e,gameState:t,resolve:s}=this.saveQueue.shift();this.saveGame(e,t).then(s)}}cleanOldSaves(){[this.storageKeys.BACKUP_3].forEach(t=>{try{localStorage.removeItem(t)}catch{}})}handleSaveFailure(e){console.error("Save system encountered an error:",e),window.gameEngine?.ui&&window.gameEngine.ui.showNotification("Save failed! Your progress may be at risk.","error");try{const t=this.collectGameState(),s=this.prepareSaveData(t,"emergency");this.saveToLocalStorage(this.storageKeys.RECOVERY,s),console.log("Emergency save completed")}catch(t){console.error("Emergency save also failed:",t)}}exportSave(){const e=localStorage.getItem(this.storageKeys.PRIMARY);if(!e)throw new Error("No save data to export");const t=new Blob([e],{type:"application/json"}),s=URL.createObjectURL(t),i=document.createElement("a");i.href=s,i.download=`game_save_${Date.now()}.json`,i.click(),URL.revokeObjectURL(s),console.log("✅ Save exported")}async importSave(e){return new Promise((t,s)=>{const i=new FileReader;i.onload=async a=>{try{const n=JSON.parse(a.target.result);if(!this.verifyIntegrity(n))throw new Error("Imported save data is corrupted");await this.saveGame("import",n.state),console.log("✅ Save imported"),t(n)}catch(n){s(n)}},i.onerror=()=>s(i.error),i.readAsText(e)})}getStatus(){return{autoSaveEnabled:!!this.saveTimer,saveInterval:this.saveInterval,lastSaveTime:this.lastSaveTime,saveInProgress:this.saveInProgress,cloudSyncEnabled:this.cloudSyncEnabled,saveHistory:this.saveHistory,metadata:this.getSaveMetadata()}}destroy(){this.stopAutoSave(),this.db&&this.db.close()}}class fs{constructor(){this.enabled=!0,this.metrics={fps:[],frameTime:[],memory:[],drawCalls:[],entityCount:[]},this.maxMetricSamples=60,this.lastFrameTime=performance.now(),this.targetFPS=60,this.targetFrameTime=1e3/this.targetFPS,this.optimizationLevel="auto",this.adaptiveQuality=!0,this.performanceMode="balanced",this.initialize()}initialize(){this.objectPools=new Map,this.initializeObjectPools(),this.cullingEnabled=!0,this.cullDistance=100,this.frustumCulling=!0,this.lodEnabled=!0,this.lodLevels=[{distance:10,quality:1},{distance:30,quality:.7},{distance:60,quality:.4},{distance:100,quality:.2}],this.batchingEnabled=!0,this.maxBatchSize=1e3,this.lazyLoadDistance=50,this.unloadDistance=150,this.thresholds={fpsLow:30,fpsTarget:60,frameTimeCritical:33,memoryWarning:400*1024*1024,memoryCritical:500*1024*1024},this.startMonitoring()}initializeObjectPools(){this.createPool("particles",1e3,()=>({active:!1,x:0,y:0,vx:0,vy:0})),this.createPool("projectiles",500,()=>({active:!1,x:0,y:0,damage:0})),this.createPool("effects",200,()=>({active:!1,type:"",duration:0})),this.createPool("uiElements",100,()=>({active:!1,text:"",x:0,y:0}))}createPool(e,t,s){const i={objects:[],factory:s,size:t,nextIndex:0};for(let a=0;a<t;a++)i.objects.push(s());this.objectPools.set(e,i)}acquire(e){const t=this.objectPools.get(e);if(!t)return t.factory();for(let i=0;i<t.objects.length;i++){const a=(t.nextIndex+i)%t.objects.length,n=t.objects[a];if(!n.active)return n.active=!0,t.nextIndex=(a+1)%t.objects.length,n}const s=t.factory();return s.active=!0,t.objects.push(s),s}release(e,t){t&&(t.active=!1)}releaseAll(e){const t=this.objectPools.get(e);t&&(t.objects.forEach(s=>s.active=!1),t.nextIndex=0)}startMonitoring(){this.monitoringInterval=setInterval(()=>{this.collectMetrics(),this.analyzePerformance(),this.adaptiveQuality&&this.adjustQuality()},1e3)}collectMetrics(){const e=performance.now(),t=e-this.lastFrameTime;this.lastFrameTime=e;const s=1e3/t;this.addMetric("fps",s),this.addMetric("frameTime",t),performance.memory&&this.addMetric("memory",performance.memory.usedJSHeapSize);const i=this.getEntityCount();this.addMetric("entityCount",i)}addMetric(e,t){this.metrics[e]||(this.metrics[e]=[]),this.metrics[e].push(t),this.metrics[e].length>this.maxMetricSamples&&this.metrics[e].shift()}getMetricAverage(e){const t=this.metrics[e];return!t||t.length===0?0:t.reduce((i,a)=>i+a,0)/t.length}getEntityCount(){return window.gameEngine?.entities?.length||0}analyzePerformance(){const e=this.getMetricAverage("fps"),t=this.getMetricAverage("frameTime"),s=this.getMetricAverage("memory");e<this.thresholds.fpsLow&&(console.warn("⚠️ Low FPS detected:",e.toFixed(1)),this.onLowPerformance()),t>this.thresholds.frameTimeCritical&&console.warn("⚠️ Frame time too high:",t.toFixed(1),"ms"),s>this.thresholds.memoryWarning&&(console.warn("⚠️ High memory usage:",(s/1024/1024).toFixed(1),"MB"),s>this.thresholds.memoryCritical&&(console.error("❌ Critical memory usage!"),this.onCriticalMemory()))}onLowPerformance(){this.adaptiveQuality&&(this.optimizationLevel==="ultra"?this.setOptimizationLevel("high"):this.optimizationLevel==="high"?this.setOptimizationLevel("medium"):this.optimizationLevel==="medium"&&this.setOptimizationLevel("low"))}onCriticalMemory(){console.log("🧹 Performing emergency cleanup...");for(const[e,t]of this.objectPools)this.releaseAll(e);window.gc&&window.gc(),this.clearCaches()}clearCaches(){window.gameEngine?.clearCaches&&window.gameEngine.clearCaches()}adjustQuality(){const e=this.getMetricAverage("fps");e>=this.thresholds.fpsTarget*1.1&&this.optimizationLevel!=="ultra"?this.increaseQuality():e<this.thresholds.fpsTarget*.9&&this.decreaseQuality()}increaseQuality(){const e=["low","medium","high","ultra"],t=e.indexOf(this.optimizationLevel);t<e.length-1&&this.setOptimizationLevel(e[t+1])}decreaseQuality(){const e=["low","medium","high","ultra"],t=e.indexOf(this.optimizationLevel);t>0&&this.setOptimizationLevel(e[t-1])}setOptimizationLevel(e){this.optimizationLevel=e,console.log(`🎮 Quality set to: ${e}`);const t=this.getOptimizationSettings(e);this.applySettings(t)}getOptimizationSettings(e){const t={low:{particleLimit:50,shadowQuality:0,textureQuality:.5,effectsEnabled:!1,lodDistance:30,cullDistance:50,maxEntities:50},medium:{particleLimit:100,shadowQuality:1,textureQuality:.75,effectsEnabled:!0,lodDistance:60,cullDistance:80,maxEntities:100},high:{particleLimit:200,shadowQuality:2,textureQuality:1,effectsEnabled:!0,lodDistance:100,cullDistance:120,maxEntities:200},ultra:{particleLimit:500,shadowQuality:3,textureQuality:1,effectsEnabled:!0,lodDistance:150,cullDistance:200,maxEntities:500}};return t[e]||t.medium}applySettings(e){window.gameEngine&&(window.gameEngine.particleLimit=e.particleLimit,window.gameEngine.shadowQuality=e.shadowQuality,window.gameEngine.textureQuality=e.textureQuality,window.gameEngine.effectsEnabled=e.effectsEnabled,window.gameEngine.maxEntities=e.maxEntities),this.cullDistance=e.cullDistance,this.lodLevels[0].distance=e.lodDistance*.1,this.lodLevels[1].distance=e.lodDistance*.3,this.lodLevels[2].distance=e.lodDistance*.6,this.lodLevels[3].distance=e.lodDistance}shouldCull(e,t){return this.cullingEnabled?!!(this.getDistance(e,t)>this.cullDistance||this.frustumCulling&&!this.isInFrustum(e,t)):!1}getDistance(e,t){const s=e.x-t.x,i=e.y-t.y;return Math.sqrt(s*s+i*i)}isInFrustum(e,t){const s=t.width/2,i=t.height/2;return e.x>=t.x-s&&e.x<=t.x+s&&e.y>=t.y-i&&e.y<=t.y+i}getLODLevel(e,t){if(!this.lodEnabled)return 1;const s=this.getDistance(e,t);for(const i of this.lodLevels)if(s<i.distance)return i.quality;return this.lodLevels[this.lodLevels.length-1].quality}setPerformanceMode(e){switch(this.performanceMode=e,console.log(`⚡ Performance mode: ${e}`),e){case"battery":this.targetFPS=30,this.setOptimizationLevel("low"),this.adaptiveQuality=!1;break;case"balanced":this.targetFPS=60,this.optimizationLevel="auto",this.adaptiveQuality=!0;break;case"performance":this.targetFPS=144,this.setOptimizationLevel("ultra"),this.adaptiveQuality=!0;break}this.targetFrameTime=1e3/this.targetFPS}getPerformanceReport(){return{fps:{current:this.metrics.fps[this.metrics.fps.length-1]||0,average:this.getMetricAverage("fps"),min:Math.min(...this.metrics.fps),max:Math.max(...this.metrics.fps)},frameTime:{current:this.metrics.frameTime[this.metrics.frameTime.length-1]||0,average:this.getMetricAverage("frameTime"),target:this.targetFrameTime},memory:{current:this.metrics.memory[this.metrics.memory.length-1]||0,average:this.getMetricAverage("memory"),warning:this.thresholds.memoryWarning,critical:this.thresholds.memoryCritical},optimizationLevel:this.optimizationLevel,performanceMode:this.performanceMode,adaptiveQuality:this.adaptiveQuality,entityCount:this.getMetricAverage("entityCount")}}update(e){const t=performance.now(),s=t-this.lastFrameTime;this.lastFrameTime=t,this.addMetric("fps",1e3/s),this.addMetric("frameTime",s)}destroy(){this.monitoringInterval&&clearInterval(this.monitoringInterval);for(const[e,t]of this.objectPools)this.releaseAll(e)}enableAdaptiveQuality(){this.adaptiveQuality=!0,console.log("✅ Adaptive quality enabled")}disableAdaptiveQuality(){this.adaptiveQuality=!1,console.log("Adaptive quality disabled")}enableCulling(){this.cullingEnabled=!0,console.log("✅ Culling enabled")}disableCulling(){this.cullingEnabled=!1,console.log("Culling disabled")}enableLOD(){this.lodEnabled=!0,console.log("✅ LOD enabled")}disableLOD(){this.lodEnabled=!1,console.log("LOD disabled")}}class ys{constructor(e){this.gameEngine=e,this.currentScreen="main",this.menuVisible=!1,this.init()}init(){this.createMenuUI(),console.log("🎮 Main Menu System initialized")}createMenuUI(){const e=document.createElement("div");e.id="main-menu",e.style.cssText=`
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0a001a 0%, #1a0033 50%, #2d0a4e 100%);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        `;const t=document.createElement("div");t.style.cssText=`
            font-size: 4em;
            font-weight: bold;
            background: linear-gradient(45deg, #9d4edd, #c77dff, #e0aaff, #9d4edd);
            background-size: 300% 300%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            text-align: center;
            animation: gradientShift 3s ease infinite;
        `,t.textContent="Dynasty of Emberveil";const s=document.createElement("div");s.style.cssText=`
            font-size: 1.5em;
            color: #c77dff;
            margin-bottom: 60px;
            text-align: center;
        `,s.textContent="A Psychedelic Fantasy RPG";const i=document.createElement("div");i.style.cssText=`
            display: flex;
            flex-direction: column;
            gap: 20px;
            min-width: 300px;
        `,[{text:"⚔️ New Game",action:()=>this.startNewGame()},{text:"📂 Load Game",action:()=>this.loadGame()},{text:"🏰 Safe Zone Hub",action:()=>this.enterSafeZone()},{text:"⚙️ Settings",action:()=>this.openSettings()},{text:"📜 Credits",action:()=>this.showCredits()}].forEach(r=>{const l=document.createElement("button");l.textContent=r.text,l.style.cssText=`
                padding: 15px 30px;
                font-size: 1.2em;
                background: linear-gradient(135deg, #2d0a4e, #4a0e7a);
                border: 2px solid #9d4edd;
                border-radius: 10px;
                color: #fff;
                cursor: pointer;
                transition: all 0.3s;
                box-shadow: 0 0 20px rgba(157, 78, 221, 0.3);
            `,l.addEventListener("mouseenter",()=>{l.style.transform="scale(1.05)",l.style.boxShadow="0 0 30px rgba(157, 78, 221, 0.8)"}),l.addEventListener("mouseleave",()=>{l.style.transform="scale(1)",l.style.boxShadow="0 0 20px rgba(157, 78, 221, 0.3)"}),l.addEventListener("click",r.action),i.appendChild(l)});const n=document.createElement("div");n.style.cssText=`
            position: absolute;
            bottom: 20px;
            right: 20px;
            color: #7b2cbf;
            font-size: 0.9em;
        `,n.textContent="v1.1.0 - Enhanced Edition";const o=document.createElement("style");o.textContent=`
            @keyframes gradientShift {
                0% { background-position: 0% 50%; }
                50% { background-position: 100% 50%; }
                100% { background-position: 0% 50%; }
            }
        `,document.head.appendChild(o),e.appendChild(t),e.appendChild(s),e.appendChild(i),e.appendChild(n),document.getElementById("game-container").appendChild(e),this.menuContainer=e}show(){this.menuContainer&&(this.menuContainer.style.display="flex",this.menuVisible=!0)}hide(){this.menuContainer&&(this.menuContainer.style.display="none",this.menuVisible=!1)}startNewGame(){console.log("🎮 Starting new game..."),this.hide(),this.gameEngine.saveSystem&&localStorage.removeItem("dynasty_save"),this.gameEngine.startFromSafeZone=!0}loadGame(){console.log("📂 Loading saved game..."),this.gameEngine.saveSystem&&this.gameEngine.saveSystem.hasSaveData()?(this.hide(),this.gameEngine.saveSystem.loadGame()):alert("No saved game found. Please start a new game.")}enterSafeZone(){console.log("🏰 Entering Safe Zone Hub..."),this.hide(),this.gameEngine.startFromSafeZone=!0}openSettings(){console.log("⚙️ Opening settings..."),alert("Settings panel coming soon!")}showCredits(){console.log("📜 Showing credits..."),alert(`
Dynasty of Emberveil
A Psychedelic Fantasy RPG

Created with passion and powered by Three.js

Special thanks to all contributors and players!

Version 1.1.0 - Enhanced Edition
        `)}}class vs{constructor(e){this.gameEngine=e,this.scene=e.scene,this.isInSafeZone=!1,this.safeZoneObjects=[],this.npcs=[],console.log("🏰 Safe Zone System initialized")}createSafeZone(){console.log("🏰 Creating Safe Zone Hub..."),this.isInSafeZone=!0,this.clearDungeon(),this.createGround(),this.createBuildings(),this.createLighting(),this.createNPCs(),this.createDecorations(),this.createPortals(),this.gameEngine.player&&this.gameEngine.player.mesh&&this.gameEngine.player.mesh.position.set(0,1,0),this.showSafeZoneUI(),console.log("✅ Safe Zone Hub created")}clearDungeon(){this.gameEngine.currentDungeon&&(this.gameEngine.currentDungeon.floor&&this.scene.remove(this.gameEngine.currentDungeon.floor),this.gameEngine.currentDungeon.walls&&this.scene.remove(this.gameEngine.currentDungeon.walls),this.gameEngine.currentDungeon.decorations&&this.gameEngine.currentDungeon.decorations.forEach(e=>{this.scene.remove(e)})),this.gameEngine.enemyManager&&(this.gameEngine.enemyManager.getEnemies().forEach(t=>{t.mesh&&this.scene.remove(t.mesh)}),this.gameEngine.enemyManager.enemies=[])}createGround(){const e=new Fe(30,64),t=new g({color:3825466,roughness:.8,metalness:.2}),s=new d(e,t);s.rotation.x=-Math.PI/2,s.receiveShadow=!0,this.scene.add(s),this.safeZoneObjects.push(s);const i=new $(4,40),a=new g({color:9079434,roughness:.9}),n=new d(i,a);n.rotation.x=-Math.PI/2,n.position.y=.01,n.receiveShadow=!0,this.scene.add(n),this.safeZoneObjects.push(n)}createBuildings(){const e=new x(2,3,4,8),t=new g({color:10309341,emissive:5904538,emissiveIntensity:.3,roughness:.4,metalness:.6}),s=new d(e,t);s.position.set(0,2,0),s.castShadow=!0,this.scene.add(s),this.safeZoneObjects.push(s),[{pos:[10,0,0],color:9127187,name:"Blacksmith"},{pos:[-10,0,0],color:4286945,name:"Magic Shop"},{pos:[0,0,10],color:3050327,name:"Inn"},{pos:[0,0,-10],color:14329120,name:"Market"}].forEach(a=>{const n=new _,o=new C(6,5,6),r=new g({color:a.color,roughness:.8}),l=new d(o,r);l.position.y=2.5,l.castShadow=!0;const c=new z(4.5,2,4),m=new g({color:9109504,roughness:.9}),u=new d(c,m);u.position.y=6,u.rotation.y=Math.PI/4,u.castShadow=!0,n.add(l),n.add(u),n.position.set(...a.pos),this.scene.add(n),this.safeZoneObjects.push(n)})}createLighting(){const e=new oe(16771751,.6);this.scene.add(e),this.safeZoneObjects.push(e);const t=new U(16766720,.8);t.position.set(20,30,10),t.castShadow=!0,t.shadow.mapSize.width=2048,t.shadow.mapSize.height=2048,this.scene.add(t),this.safeZoneObjects.push(t),[[10,4,0],[-10,4,0],[0,4,10],[0,4,-10]].forEach(i=>{const a=new F(16750848,.5,15);a.position.set(...i),this.scene.add(a),this.safeZoneObjects.push(a)})}createNPCs(){[{pos:[10,1,0],name:"Blacksmith",color:16729156},{pos:[-10,1,0],name:"Mage",color:4474111},{pos:[0,1,10],name:"Innkeeper",color:4521796},{pos:[0,1,-10],name:"Merchant",color:16777028}].forEach(t=>{const s=new q(.5,1,8,16),i=new g({color:t.color,emissive:t.color,emissiveIntensity:.3}),a=new d(s,i);a.position.set(...t.pos),a.castShadow=!0,a.userData.npcName=t.name,this.scene.add(a),this.safeZoneObjects.push(a),this.npcs.push({mesh:a,name:t.name})})}createDecorations(){for(let e=0;e<12;e++){const t=e/12*Math.PI*2,s=20+Math.random()*5,i=new x(.3,.5,3,8),a=new g({color:6636321}),n=new d(i,a),o=new f(2,8,8),r=new g({color:2263842}),l=new d(o,r);l.position.y=3;const c=new _;c.add(n),c.add(l),c.position.set(Math.cos(t)*s,1.5,Math.sin(t)*s),this.scene.add(c),this.safeZoneObjects.push(c)}}createPortals(){const e=new De(2,.4,16,32),t=new g({color:10309341,emissive:10309341,emissiveIntensity:.8,transparent:!0,opacity:.8}),s=new d(e,t);s.position.set(0,2,-20),s.rotation.x=Math.PI/2,s.userData.isPortal=!0,this.scene.add(s),this.safeZoneObjects.push(s),this.animatePortal(s)}animatePortal(e){const t=()=>{this.isInSafeZone&&(e.rotation.z+=.01,requestAnimationFrame(t))};t()}showSafeZoneUI(){let e=document.getElementById("safe-zone-info");e||(e=document.createElement("div"),e.id="safe-zone-info",e.style.cssText=`
                position: absolute;
                top: 100px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(157, 78, 221, 0.9);
                padding: 20px 40px;
                border-radius: 15px;
                color: white;
                font-size: 1.2em;
                text-align: center;
                box-shadow: 0 0 30px rgba(157, 78, 221, 0.8);
                z-index: 100;
                pointer-events: none;
            `,document.getElementById("ui-overlay").appendChild(e)),e.innerHTML=`
            <h2 style="margin: 0 0 10px 0;">🏰 Welcome to Safe Zone Hub</h2>
            <p style="margin: 5px 0;">You are safe here. No enemies can harm you.</p>
            <p style="margin: 5px 0; font-size: 0.9em;">
                Visit NPCs to trade, upgrade, and prepare for your journey.
            </p>
            <p style="margin: 10px 0; font-size: 0.8em; color: #e0aaff;">
                Move to the portal at the south to enter the dungeons.
            </p>
        `,setTimeout(()=>{e&&(e.style.opacity="0",e.style.transition="opacity 1s",setTimeout(()=>e.remove(),1e3))},5e3)}leaveSafeZone(){console.log("🚪 Leaving Safe Zone..."),this.isInSafeZone=!1,this.safeZoneObjects.forEach(e=>{this.scene.remove(e)}),this.safeZoneObjects=[],this.npcs=[],this.gameEngine.dungeonGenerator&&this.gameEngine.enemyManager&&(this.gameEngine.currentDungeon=this.gameEngine.dungeonGenerator.generate("crystal_cavern",1),this.gameEngine.loadDungeon(this.gameEngine.currentDungeon),this.gameEngine.enemyManager.spawnEnemiesForDungeon(this.gameEngine.currentDungeon,5))}update(e){if(this.isInSafeZone){if(this.gameEngine.player&&this.gameEngine.player.mesh){const t=this.gameEngine.player.mesh.position,s=new v(0,2,-20);t.distanceTo(s)<5&&this.showPortalPrompt()}if(this.gameEngine.player&&this.gameEngine.player.stats){const t=e*5;this.gameEngine.player.stats.hp=Math.min(this.gameEngine.player.stats.maxHp,this.gameEngine.player.stats.hp+t)}}}showPortalPrompt(){let e=document.getElementById("portal-prompt");if(!e){e=document.createElement("div"),e.id="portal-prompt",e.style.cssText=`
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(157, 78, 221, 0.95);
                padding: 30px;
                border-radius: 15px;
                color: white;
                font-size: 1.2em;
                text-align: center;
                box-shadow: 0 0 40px rgba(157, 78, 221, 1);
                z-index: 200;
            `,e.innerHTML=`
                <h3 style="margin: 0 0 15px 0;">🌀 Dungeon Portal</h3>
                <p style="margin: 10px 0;">Press <strong>E</strong> to enter the dungeons</p>
                <p style="font-size: 0.8em; color: #e0aaff; margin: 10px 0;">
                    Warning: Enemies await beyond this point!
                </p>
            `,document.getElementById("ui-overlay").appendChild(e);const t=s=>{(s.key==="e"||s.key==="E")&&(this.leaveSafeZone(),e.remove(),document.removeEventListener("keydown",t))};document.addEventListener("keydown",t)}}}class ws{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.renderer=e.renderer,this.visualEffects=[],this.screenShakeIntensity=0,this.chromaticAberration=0,this.init()}init(){this.setupEnhancedLighting(),this.setupFog(),this.setupGlowEffects(),console.log("✨ Enhanced Visuals System initialized")}setupEnhancedLighting(){this.scene.children&&this.scene.children.filter(t=>t instanceof oe).forEach(t=>{this.animateAmbientLight(t)})}animateAmbientLight(e){const t=e.intensity,s=()=>{const i=Date.now()*.001;e.intensity=t+Math.sin(i*.5)*.1,requestAnimationFrame(s)};s()}setupFog(){this.scene.fog=new ve(1703987,.02)}setupGlowEffects(){this.glowObjects=[]}addGlowToObject(e,t,s=1){e.material&&(e.material.emissive=new y(t),e.material.emissiveIntensity=s,this.glowObjects.push({object:e,baseIntensity:s,time:0}))}createHitEffect(e,t=16711680){const i=[];for(let a=0;a<20;a++){const n=new f(.1,4,4),o=new D({color:t,transparent:!0,opacity:1}),r=new d(n,o);r.position.copy(e),r.userData.velocity=new v((Math.random()-.5)*2,(Math.random()-.5)*2,(Math.random()-.5)*2),r.userData.lifetime=1,this.scene.add(r),i.push(r)}this.visualEffects.push({type:"hitEffect",particles:i,time:0,duration:1})}createLevelUpEffect(e){const s=[];for(let i=0;i<50;i++){const a=new f(.15,6,6),n=new D({color:16766720,transparent:!0,opacity:1}),o=new d(a,n),r=i/50*Math.PI*2,l=2+Math.random();o.position.set(e.x+Math.cos(r)*l,e.y,e.z+Math.sin(r)*l),o.userData.velocity=new v(0,2+Math.random(),0),o.userData.lifetime=2,this.scene.add(o),s.push(o)}this.visualEffects.push({type:"levelUp",particles:s,time:0,duration:2}),this.flashScreen(16766720,.3)}createTeleportEffect(e,t){const i=[];for(let a=0;a<30;a++){const n=new f(.2,8,8),o=new D({color:10309341,transparent:!0,opacity:1}),r=new d(n,o);r.position.copy(e);const l=a/30;r.userData.startPos=e.clone(),r.userData.endPos=t.clone(),r.userData.progress=l,r.userData.lifetime=1,this.scene.add(r),i.push(r)}this.visualEffects.push({type:"teleport",particles:i,time:0,duration:1})}flashScreen(e,t=.2){const s=document.createElement("div");s.style.cssText=`
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: ${new y(e).getStyle()};
            opacity: 0.5;
            pointer-events: none;
            z-index: 1500;
        `,document.getElementById("ui-overlay").appendChild(s),setTimeout(()=>{s.style.transition=`opacity ${t}s`,s.style.opacity="0",setTimeout(()=>s.remove(),t*1e3)},50)}screenShake(e=1,t=.3){this.screenShakeIntensity=e,setTimeout(()=>{this.screenShakeIntensity=0},t*1e3)}applyScreenShake(){if(this.screenShakeIntensity>0&&this.camera){const e=(Math.random()-.5)*this.screenShakeIntensity,t=(Math.random()-.5)*this.screenShakeIntensity,s=(Math.random()-.5)*this.screenShakeIntensity;this.camera.position.x+=e,this.camera.position.y+=t,this.camera.position.z+=s}}createTrailEffect(e,t=10309341,s=10){const i={object:e,positions:[],color:t,maxLength:s,meshes:[]};for(let a=0;a<s;a++){const n=new f(.3,8,8),o=new D({color:t,transparent:!0,opacity:1-a/s}),r=new d(n,o);r.visible=!1,this.scene.add(r),i.meshes.push(r)}return this.visualEffects.push({type:"trail",trail:i}),i}update(e){for(let t=this.visualEffects.length-1;t>=0;t--){const s=this.visualEffects[t];s.time+=e,s.type==="hitEffect"||s.type==="levelUp"?this.updateParticleEffect(s,e):s.type==="teleport"?this.updateTeleportEffect(s,e):s.type==="trail"&&this.updateTrailEffect(s),s.time>=s.duration&&s.type!=="trail"&&(s.particles?.forEach(i=>this.scene.remove(i)),this.visualEffects.splice(t,1))}this.glowObjects.forEach(t=>{t.time+=e;const s=Math.sin(t.time*3)*.3+.7;t.object.material&&(t.object.material.emissiveIntensity=t.baseIntensity*s)}),this.applyScreenShake()}updateParticleEffect(e,t){e.particles.forEach(s=>{s.position.add(s.userData.velocity.clone().multiplyScalar(t)),e.type==="hitEffect"&&(s.userData.velocity.y-=9.8*t);const i=e.time/e.duration;s.material&&(s.material.opacity=1-i);const a=1-i*.5;s.scale.set(a,a,a)})}updateTeleportEffect(e,t){e.particles.forEach((s,i)=>{const a=(e.time+s.userData.progress)/e.duration;if(a<=1){s.position.lerpVectors(s.userData.startPos,s.userData.endPos,a);const n=a*Math.PI*4,o=1-a;s.position.x+=Math.cos(n)*o,s.position.z+=Math.sin(n)*o,s.material&&(s.material.opacity=1-a)}})}updateTrailEffect(e){const t=e.trail,s=t.object.position;t.positions.unshift(s.clone()),t.positions.length>t.maxLength&&t.positions.pop(),t.meshes.forEach((i,a)=>{a<t.positions.length?(i.position.copy(t.positions[a]),i.visible=!0):i.visible=!1})}cleanup(){this.visualEffects.forEach(e=>{e.particles?.forEach(t=>this.scene.remove(t)),e.trail?.meshes.forEach(t=>this.scene.remove(t))}),this.visualEffects=[],this.glowObjects=[]}}class bs{constructor(e){this.gameEngine=e,this.developmentProgress={completedFeatures:[],plannedFeatures:[],inProgressFeatures:[],systemHealth:{}},this.futureEnhancements=[],this.init()}init(){this.scanCurrentSystems(),this.planFutureEnhancements(),this.setupProgressMonitoring(),console.log("📊 Progress Tracking System initialized"),this.printProgressReport()}scanCurrentSystems(){[{name:"MainMenu",object:this.gameEngine.mainMenuSystem,category:"UI"},{name:"SafeZone",object:this.gameEngine.safeZoneSystem,category:"World"},{name:"EnhancedVisuals",object:this.gameEngine.enhancedVisualsSystem,category:"Graphics"},{name:"Combat",object:this.gameEngine.combatSystem,category:"Gameplay"},{name:"Inventory",object:this.gameEngine.inventorySystem,category:"Gameplay"},{name:"Quests",object:this.gameEngine.questSystem,category:"Gameplay"},{name:"Achievements",object:this.gameEngine.achievementSystem,category:"Progression"},{name:"Audio",object:this.gameEngine.audioSystem,category:"Media"},{name:"SkillTree",object:this.gameEngine.skillTreeSystem,category:"Progression"},{name:"Crafting",object:this.gameEngine.craftingSystem,category:"Gameplay"},{name:"Economy",object:this.gameEngine.economySystem,category:"Gameplay"},{name:"Tutorial",object:this.gameEngine.tutorialSystem,category:"UI"},{name:"Pets",object:this.gameEngine.petSystem,category:"Companions"},{name:"Mounts",object:this.gameEngine.mountSystem,category:"Companions"},{name:"Leaderboards",object:this.gameEngine.leaderboardSystem,category:"Social"},{name:"Guilds",object:this.gameEngine.guildSystem,category:"Social"},{name:"Prestige",object:this.gameEngine.prestigeSystem,category:"Progression"}].forEach(t=>{const s=t.object?"implemented":"missing";this.developmentProgress.systemHealth[t.name]={status:s,category:t.category},s==="implemented"&&this.developmentProgress.completedFeatures.push(t.name)})}planFutureEnhancements(){this.futureEnhancements=[{priority:"high",category:"Graphics",title:"Advanced Shader Effects",description:"Add bloom, depth of field, and other post-processing effects",estimatedEffort:"medium",dependencies:["WebGL2 support"]},{priority:"high",category:"Gameplay",title:"Boss Battle Arenas",description:"Special arena environments for epic boss fights",estimatedEffort:"high",dependencies:["SafeZone system"]},{priority:"high",category:"UI",title:"Interactive NPC Dialogues",description:"Rich dialogue system with branching conversations",estimatedEffort:"high",dependencies:["MainMenu system"]},{priority:"medium",category:"Gameplay",title:"Dynamic Weather System",description:"Weather effects that impact gameplay and visuals",estimatedEffort:"medium",dependencies:["EnhancedVisuals"]},{priority:"medium",category:"Social",title:"Cooperative Multiplayer",description:"Team up with other players in dungeons",estimatedEffort:"very high",dependencies:["Network infrastructure"]},{priority:"medium",category:"Progression",title:"Artifact System",description:"Rare legendary items with unique powers",estimatedEffort:"medium",dependencies:["Economy","Crafting"]},{priority:"low",category:"World",title:"Procedural Dungeon Events",description:"Random events that occur during dungeon runs",estimatedEffort:"medium",dependencies:["DungeonGenerator"]},{priority:"low",category:"UI",title:"Advanced Settings Panel",description:"Comprehensive graphics and gameplay settings",estimatedEffort:"low",dependencies:["MainMenu"]},{priority:"high",category:"Gameplay",title:"Combo & Skill Chaining",description:"Enhanced combat with skill combos and chains",estimatedEffort:"medium",dependencies:["Combat","SkillTree"]},{priority:"medium",category:"World",title:"Multiple Safe Zone Hubs",description:"Different themed safe zones to discover",estimatedEffort:"high",dependencies:["SafeZone"]}];const e={high:0,medium:1,low:2};this.futureEnhancements.sort((t,s)=>e[t.priority]-e[s.priority])}setupProgressMonitoring(){this.metrics={sessionsPlayed:0,totalPlayTime:0,highestFloor:0,enemiesDefeated:0,itemsCrafted:0,questsCompleted:0,achievementsUnlocked:0};const e=localStorage.getItem("dynasty_metrics");if(e)try{this.metrics={...this.metrics,...JSON.parse(e)}}catch(t){console.warn("Failed to load metrics:",t)}setInterval(()=>this.saveMetrics(),3e4)}updateMetric(e,t){this.metrics.hasOwnProperty(e)&&(typeof t=="number"?this.metrics[e]+=t:this.metrics[e]=t,this.saveMetrics())}saveMetrics(){try{localStorage.setItem("dynasty_metrics",JSON.stringify(this.metrics))}catch(e){console.warn("Failed to save metrics:",e)}}printProgressReport(){console.log(`
=== 📊 Dynasty of Emberveil - Development Progress ===
`),console.log("🔧 System Status:");const e={};Object.entries(this.developmentProgress.systemHealth).forEach(([t,s])=>{e[s.category]||(e[s.category]={implemented:0,total:0}),e[s.category].total++,s.status==="implemented"&&e[s.category].implemented++}),Object.entries(e).forEach(([t,s])=>{const i=Math.round(s.implemented/s.total*100);console.log(`  ${t}: ${s.implemented}/${s.total} (${i}%)`)}),console.log(`
📈 Player Metrics:`),console.log(`  Sessions Played: ${this.metrics.sessionsPlayed}`),console.log(`  Total Play Time: ${Math.round(this.metrics.totalPlayTime/60)} minutes`),console.log(`  Highest Floor Reached: ${this.metrics.highestFloor}`),console.log(`  Enemies Defeated: ${this.metrics.enemiesDefeated}`),console.log(`  Achievements Unlocked: ${this.metrics.achievementsUnlocked}`),console.log(`
🚀 Planned Enhancements (Top 5):`),this.futureEnhancements.slice(0,5).forEach((t,s)=>{console.log(`  ${s+1}. [${t.priority.toUpperCase()}] ${t.title}`),console.log(`     ${t.description}`)}),console.log(`
===================================================
`)}getProgressSummary(){const e=this.developmentProgress.completedFeatures.length,t=Object.keys(this.developmentProgress.systemHealth).length,s=Math.round(e/t*100);return{implemented:e,total:t,percentage:s,nextEnhancements:this.futureEnhancements.slice(0,3),metrics:{...this.metrics}}}displayProgressUI(){const e=document.createElement("div");e.id="progress-dashboard",e.style.cssText=`
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(26, 0, 51, 0.9);
            border: 2px solid #9d4edd;
            border-radius: 10px;
            padding: 15px;
            color: white;
            font-size: 0.9em;
            max-width: 300px;
            z-index: 150;
            box-shadow: 0 0 20px rgba(157, 78, 221, 0.5);
        `;const t=this.getProgressSummary();e.innerHTML=`
            <h3 style="margin: 0 0 10px 0; color: #c77dff;">📊 Development Status</h3>
            <div style="margin: 10px 0;">
                <strong>Systems:</strong> ${t.implemented}/${t.total} (${t.percentage}%)
                <div style="background: rgba(0,0,0,0.3); height: 10px; border-radius: 5px; margin-top: 5px;">
                    <div style="background: linear-gradient(90deg, #9d4edd, #c77dff); height: 100%; width: ${t.percentage}%; border-radius: 5px;"></div>
                </div>
            </div>
            <div style="margin: 15px 0 10px 0;">
                <strong>Next Up:</strong>
                ${t.nextEnhancements.map(s=>`<div style="margin: 5px 0; padding: 5px; background: rgba(157, 78, 221, 0.2); border-radius: 5px; font-size: 0.85em;">
                        🎯 ${s.title}
                    </div>`).join("")}
            </div>
            <button id="close-dashboard" style="
                width: 100%;
                padding: 8px;
                background: #9d4edd;
                border: none;
                border-radius: 5px;
                color: white;
                cursor: pointer;
                margin-top: 10px;
            ">Close</button>
        `,document.getElementById("ui-overlay").appendChild(e),document.getElementById("close-dashboard").addEventListener("click",()=>{e.remove()})}update(e){if(this.metrics.totalPlayTime+=e,this.gameEngine.endlessMode){const t=this.gameEngine.endlessMode.currentFloor;t>this.metrics.highestFloor&&(this.metrics.highestFloor=t)}}}class xs{constructor(e){this.gameEngine=e,this.currentTheme="fantasy_realm",this.themes={fantasy_realm:{name:"Fantasy Realm",primary:{dark:"#0a0e27",medium:"#1a2847",light:"#2d4a7c"},secondary:{gold:"#d4af37",crimson:"#dc143c",emerald:"#50c878"},magical:{arcane:"#4169e1",fire:"#ff4500",nature:"#32cd32",frost:"#00ced1",shadow:"#9370db"},seductive:{rose:"#ff69b4",wine:"#722f37",midnight:"#191970",gold:"#ffb6c1"},environment:{grass:"#228b22",stone:"#696969",water:"#4682b4",lava:"#ff4500",crystal:"#e0ffff"}},dark_fantasy:{name:"Dark Fantasy",primary:{dark:"#0d0d0d",medium:"#1a1a1a",light:"#2d2d2d"},secondary:{blood:"#8b0000",bone:"#f5f5dc",shadow:"#36013f"},magical:{arcane:"#8a2be2",fire:"#b22222",nature:"#2e8b57",frost:"#4682b4",shadow:"#483d8b"},seductive:{rose:"#c71585",wine:"#800020",midnight:"#0f0f1e",gold:"#b8860b"},environment:{grass:"#1a4d2e",stone:"#36454f",water:"#2f4f4f",lava:"#cc0000",crystal:"#778899"}},arcane_sanctum:{name:"Arcane Sanctum",primary:{dark:"#1a0033",medium:"#2e1a47",light:"#4a2c6b"},secondary:{arcane:"#9d4edd",gold:"#ffd700",cyan:"#00ffff"},magical:{arcane:"#9370db",fire:"#ff00ff",nature:"#00ff00",frost:"#00ffff",shadow:"#8b00ff"},seductive:{rose:"#ff00ff",wine:"#800080",midnight:"#4b0082",gold:"#da70d6"},environment:{grass:"#9370db",stone:"#8470ff",water:"#7b68ee",lava:"#ff1493",crystal:"#e6e6fa"}},nature_grove:{name:"Nature Grove",primary:{dark:"#0a2e0a",medium:"#1a4d1a",light:"#2d7a2d"},secondary:{gold:"#daa520",brown:"#8b4513",emerald:"#50c878"},magical:{arcane:"#00fa9a",fire:"#ff8c00",nature:"#00ff00",frost:"#00ced1",shadow:"#556b2f"},seductive:{rose:"#ff69b4",wine:"#8b4513",midnight:"#2f4f2f",gold:"#ffd700"},environment:{grass:"#228b22",stone:"#808080",water:"#4682b4",lava:"#ff6347",crystal:"#98fb98"}},infernal_depths:{name:"Infernal Depths",primary:{dark:"#1a0000",medium:"#330000",light:"#4d0000"},secondary:{flame:"#ff4500",ash:"#696969",lava:"#ff6347"},magical:{arcane:"#ff0000",fire:"#ff4500",nature:"#8b0000",frost:"#4169e1",shadow:"#2f1f1f"},seductive:{rose:"#dc143c",wine:"#800020",midnight:"#2b0000",gold:"#ff8c00"},environment:{grass:"#8b0000",stone:"#2f1f1f",water:"#ff4500",lava:"#ff0000",crystal:"#ff6347"}}},this.init()}init(){this.applyTheme(this.currentTheme),console.log("🎨 Advanced Theme System initialized with",this.themes[this.currentTheme].name)}applyTheme(e){this.themes[e]||(console.warn(`Theme ${e} not found, using default`),e="fantasy_realm"),this.currentTheme=e;const t=this.themes[e];this.applyCSSVariables(t),this.updateSceneLighting(t),this.updateUITheme(t),this.gameEngine.particleSystem&&this.updateParticleColors(t),console.log(`🎨 Theme switched to: ${t.name}`)}applyCSSVariables(e){const t=document.documentElement;t.style.setProperty("--color-primary-dark",e.primary.dark),t.style.setProperty("--color-primary-medium",e.primary.medium),t.style.setProperty("--color-primary-light",e.primary.light),Object.entries(e.secondary).forEach(([s,i])=>{t.style.setProperty(`--color-secondary-${s}`,i)}),Object.entries(e.magical).forEach(([s,i])=>{t.style.setProperty(`--color-magic-${s}`,i)}),Object.entries(e.seductive).forEach(([s,i])=>{t.style.setProperty(`--color-seductive-${s}`,i)}),Object.entries(e.environment).forEach(([s,i])=>{t.style.setProperty(`--color-env-${s}`,i)}),document.body.style.background=`linear-gradient(135deg, ${e.primary.dark} 0%, ${e.primary.medium} 50%, ${e.primary.light} 100%)`}updateSceneLighting(e){if(!this.gameEngine.scene)return;const t=[];this.gameEngine.scene.children.forEach(n=>{n.isLight&&n.userData.themeLight&&t.push(n)}),t.forEach(n=>this.gameEngine.scene.remove(n));const s=new THREE.AmbientLight(this.hexToColor(e.magical.arcane),.4);s.userData.themeLight=!0,this.gameEngine.scene.add(s);const i=new THREE.DirectionalLight(this.hexToColor(e.secondary.gold||e.magical.arcane),.6);i.position.set(10,20,10),i.castShadow=!0,i.userData.themeLight=!0,this.gameEngine.scene.add(i);const a=[e.magical.fire,e.magical.frost,e.magical.nature];a.forEach((n,o)=>{const r=o/a.length*Math.PI*2,l=new THREE.PointLight(this.hexToColor(n),.5,20);l.position.set(Math.cos(r)*15,5,Math.sin(r)*15),l.userData.themeLight=!0,this.gameEngine.scene.add(l)}),this.gameEngine.scene.fog&&(this.gameEngine.scene.fog.color=this.hexToColor(e.primary.medium))}updateUITheme(e){const t=document.getElementById("loading-screen");t&&(t.style.background=`linear-gradient(135deg, ${e.primary.dark} 0%, ${e.primary.medium} 50%, ${e.primary.light} 100%)`);const s=document.getElementById("main-menu");s&&(s.style.background=`linear-gradient(135deg, ${e.primary.dark} 0%, ${e.primary.medium} 50%, ${e.primary.light} 100%)`),this.updateButtonStyles(e)}updateButtonStyles(e){const t=document.createElement("style");t.id="theme-button-styles";const s=document.getElementById("theme-button-styles");s&&s.remove(),t.textContent=`
            button, .btn {
                background: linear-gradient(135deg, ${e.primary.medium}, ${e.primary.light}) !important;
                border: 2px solid ${e.secondary.gold||e.magical.arcane} !important;
                box-shadow: 0 0 20px ${e.magical.arcane}50 !important;
            }
            
            button:hover, .btn:hover {
                box-shadow: 0 0 30px ${e.magical.arcane}80 !important;
                border-color: ${e.seductive.rose} !important;
            }
            
            .ui-panel {
                background: ${e.primary.dark}ee !important;
                border: 2px solid ${e.secondary.gold||e.magical.arcane} !important;
            }
            
            .text-primary {
                color: ${e.secondary.gold||e.magical.arcane} !important;
            }
            
            .text-secondary {
                color: ${e.seductive.rose} !important;
            }
        `,document.head.appendChild(t)}updateParticleColors(e){this.gameEngine.particleSystem&&(this.gameEngine.particleSystem.defaultColors={primary:this.hexToColor(e.magical.arcane),secondary:this.hexToColor(e.magical.fire),accent:this.hexToColor(e.seductive.rose)})}hexToColor(e){const t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);if(!t)return 16777215;const s=parseInt(t[1],16),i=parseInt(t[2],16),a=parseInt(t[3],16);return s<<16|i<<8|a}getThemeColor(e,t){const s=this.themes[this.currentTheme];return s[e]&&s[e][t]?s[e][t]:"#ffffff"}switchTheme(e){this.applyTheme(e),localStorage.setItem("dynasty_theme",e),this.playThemeTransitionEffect()}playThemeTransitionEffect(){const e=document.createElement("div");e.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: ${this.getThemeColor("magical","arcane")};
            opacity: 0.5;
            pointer-events: none;
            z-index: 9999;
        `,document.body.appendChild(e),setTimeout(()=>{e.style.transition="opacity 0.5s",e.style.opacity="0",setTimeout(()=>e.remove(),500)},50)}getAvailableThemes(){return Object.keys(this.themes).map(e=>({id:e,name:this.themes[e].name}))}createThemeSwitcher(){const e=document.createElement("div");e.id="theme-switcher",e.style.cssText=`
            position: fixed;
            top: 80px;
            right: 20px;
            background: ${this.getThemeColor("primary","dark")}ee;
            border: 2px solid ${this.getThemeColor("secondary","gold")};
            border-radius: 10px;
            padding: 15px;
            z-index: 1000;
            color: white;
        `;const t=document.createElement("h4");t.textContent="🎨 Themes",t.style.margin="0 0 10px 0",e.appendChild(t),this.getAvailableThemes().forEach(s=>{const i=document.createElement("button");i.textContent=s.name,i.style.cssText=`
                display: block;
                width: 100%;
                margin: 5px 0;
                padding: 8px;
                border-radius: 5px;
                cursor: pointer;
            `,s.id===this.currentTheme&&(i.style.fontWeight="bold"),i.addEventListener("click",()=>{this.switchTheme(s.id),e.querySelectorAll("button").forEach(a=>{a.style.fontWeight="normal"}),i.style.fontWeight="bold"}),e.appendChild(i)}),document.body.appendChild(e)}update(e){this.gameEngine.scene&&this.gameEngine.scene.children.forEach(t=>{if(t.isLight&&t.userData.themeLight&&t.isPointLight){const s=Date.now()*5e-4,i=15;t.position.x=Math.cos(s)*i,t.position.z=Math.sin(s)*i}})}}class ks{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.renderer=e.renderer,this.postProcessing={enabled:!0,bloom:!0,dof:!1,motionBlur:!1},this.graphicsQuality="high",this.init()}init(){this.setupAdvancedLighting(),this.setupShadows(),this.setupFog(),this.createSkybox(),console.log("🎮 Advanced 3D Graphics System initialized")}setupAdvancedLighting(){const e=new oe(4210784,.5);this.scene.add(e);const t=new U(16777215,1);t.position.set(50,100,50),t.castShadow=!0,t.shadow.mapSize.width=4096,t.shadow.mapSize.height=4096,t.shadow.camera.near=.5,t.shadow.camera.far=500,t.shadow.camera.left=-100,t.shadow.camera.right=100,t.shadow.camera.top=100,t.shadow.camera.bottom=-100,t.shadow.bias=-1e-4,t.shadow.radius=2,this.scene.add(t),this.mainLight=t;const s=new Ie(4491519,2241348,.4);this.scene.add(s);const i=new U(6724095,.5);i.position.set(-50,50,-50),this.scene.add(i)}setupShadows(){this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=Le,this.renderer.toneMapping=Ae,this.renderer.toneMappingExposure=1,this.renderer.outputEncoding=yt}setupFog(){const e=new y(1714247);this.scene.fog=new ve(e,.015),this.scene.background=e}createSkybox(){const e=new f(400,32,32),t=new O({uniforms:{topColor:{value:new y(663103)},bottomColor:{value:new y(1714247)},offset:{value:33},exponent:{value:.6}},vertexShader:`
                varying vec3 vWorldPosition;
                void main() {
                    vec4 worldPosition = modelMatrix * vec4(position, 1.0);
                    vWorldPosition = worldPosition.xyz;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform vec3 topColor;
                uniform vec3 bottomColor;
                uniform float offset;
                uniform float exponent;
                varying vec3 vWorldPosition;
                void main() {
                    float h = normalize(vWorldPosition + offset).y;
                    gl_FragColor = vec4(mix(bottomColor, topColor, max(pow(max(h, 0.0), exponent), 0.0)), 1.0);
                }
            `,side:X}),s=new d(e,t);this.scene.add(s),this.skybox=s}createEnhancedPlayerModel(e){e.mesh&&this.scene.remove(e.mesh);const t=new _,s=new q(.5,1.5,8,16),i=new g({color:4886754,metalness:.3,roughness:.7,emissive:1718874,emissiveIntensity:.2}),a=new d(s,i);a.castShadow=!0,a.receiveShadow=!0,t.add(a);const n=new f(.4,16,16),o=new g({color:16767916,metalness:.1,roughness:.8}),r=new d(n,o);r.position.y=1.5,r.castShadow=!0,t.add(r);const l=this.createEyeGlow();l.position.set(.15,1.55,.35),t.add(l);const c=this.createEyeGlow();c.position.set(-.15,1.55,.35),t.add(c);const m=this.createEnhancedWeapon();return m.position.set(.6,.5,0),m.rotation.z=-Math.PI/4,t.add(m),this.addPlayerAura(t),e.mesh=t,this.scene.add(t),t}createEyeGlow(){const e=new f(.08,8,8),t=new D({color:65535,transparent:!0,opacity:.9}),s=new d(e,t),i=new F(65535,.5,2);return s.add(i),s}createEnhancedWeapon(){const e=new _,t=new C(.1,1.5,.02),s=new g({color:12632256,metalness:.9,roughness:.1,emissive:4491519,emissiveIntensity:.3}),i=new d(t,s);i.position.y=.75,i.castShadow=!0,e.add(i);const a=new x(.08,.08,.4,8),n=new g({color:9127187,metalness:.6,roughness:.4}),o=new d(a,n);o.castShadow=!0,e.add(o);const r=new C(.4,.05,.1),l=new g({color:13938487,metalness:.8,roughness:.2}),c=new d(r,l);return c.position.y=.2,c.castShadow=!0,e.add(c),e}addPlayerAura(e){const s=new _;for(let i=0;i<20;i++){const a=new f(.05,4,4),n=new D({color:4491519,transparent:!0,opacity:.6}),o=new d(a,n),r=i/20*Math.PI*2,l=.8;o.position.set(Math.cos(r)*l,Math.random()*2,Math.sin(r)*l),o.userData.angle=r,o.userData.speed=1+Math.random(),o.userData.radius=l,s.add(o)}e.add(s),e.userData.auraParticles=s}createEnhancedEnemy(e,t="default"){const s=new _;switch(t){case"demon":this.createDemonModel(s);break;case"dragon":this.createDragonModel(s);break;case"succubus":this.createSuccubusModel(s);break;default:this.createDefaultEnemyModel(s)}return s}createDemonModel(e){const t=new q(.6,1.2,8,16),s=new g({color:9109504,metalness:.4,roughness:.6,emissive:16711680,emissiveIntensity:.3}),i=new d(t,s);i.castShadow=!0,e.add(i);const a=new z(.15,.6,8),n=new g({color:3088159,metalness:.7,roughness:.3}),o=new d(a,n);o.position.set(.3,1.2,0),o.rotation.z=-Math.PI/6,o.castShadow=!0,e.add(o);const r=new d(a,n);r.position.set(-.3,1.2,0),r.rotation.z=Math.PI/6,r.castShadow=!0,e.add(r);const l=new F(16729344,1,5);l.position.y=.5,e.add(l)}createDragonModel(e){const t=new x(.6,.8,2,8),s=new g({color:3050327,metalness:.5,roughness:.5,emissive:65280,emissiveIntensity:.2}),i=new d(t,s);i.rotation.x=Math.PI/2,i.castShadow=!0,e.add(i);const a=new f(.5,12,12),n=new d(a,s);n.position.set(0,0,1.5),n.scale.set(1,.8,1.2),n.castShadow=!0,e.add(n);const o=new $(1.5,1),r=new g({color:1723694,side:J,transparent:!0,opacity:.8}),l=new d(o,r);l.position.set(1,.5,0),l.rotation.y=Math.PI/4,e.add(l);const c=new d(o,r);c.position.set(-1,.5,0),c.rotation.y=-Math.PI/4,e.add(c)}createSuccubusModel(e){const t=new q(.4,1.6,12,16),s=new g({color:16738740,metalness:.3,roughness:.6,emissive:13047173,emissiveIntensity:.3}),i=new d(t,s);i.castShadow=!0,e.add(i);const a=new f(.35,16,16),n=new g({color:16758465,metalness:.2,roughness:.7}),o=new d(a,n);o.position.y=1.5,o.castShadow=!0,e.add(o);const r=new d(new f(.08,8,8),new D({color:16716947}));r.position.set(.15,1.55,.3),e.add(r);const l=r.clone();l.position.set(-.15,1.55,.3),e.add(l);const c=new $(1,1.2),m=new g({color:8388640,side:J,transparent:!0,opacity:.7,emissive:16716947,emissiveIntensity:.2}),u=new d(c,m);u.position.set(.6,.8,-.2),u.rotation.y=Math.PI/6,e.add(u);const p=new d(c,m);p.position.set(-.6,.8,-.2),p.rotation.y=-Math.PI/6,e.add(p);const S=new F(16738740,.8,5);S.position.y=.5,e.add(S)}createDefaultEnemyModel(e){const t=new q(.5,1,8,16),s=new g({color:16729156,metalness:.3,roughness:.7}),i=new d(t,s);i.castShadow=!0,e.add(i)}createEnhancedEnvironment(e){const t=[];switch(e.theme){case"crystal_cavern":t.push(...this.createCrystalEnvironment());break;case"infernal":t.push(...this.createInfernalEnvironment());break;case"nature":t.push(...this.createNatureEnvironment());break}return t.forEach(s=>this.scene.add(s)),t}createCrystalEnvironment(){const e=[];for(let t=0;t<20;t++){const s=.5+Math.random()*2,i=new z(s*.3,s,6),a=new g({color:65535,metalness:.9,roughness:.1,emissive:35071,emissiveIntensity:.5,transparent:!0,opacity:.8}),n=new d(i,a);n.position.set((Math.random()-.5)*40,s/2,(Math.random()-.5)*40),n.rotation.z=(Math.random()-.5)*.5,n.castShadow=!0;const o=new F(65535,.5,5);o.position.copy(n.position),o.position.y+=s/2,this.scene.add(o),e.push(n)}return e}createInfernalEnvironment(){const e=[];for(let t=0;t<10;t++){const s=new Fe(2+Math.random()*2,32),i=new g({color:16729344,emissive:16711680,emissiveIntensity:.8}),a=new d(s,i);a.rotation.x=-Math.PI/2,a.position.set((Math.random()-.5)*40,.01,(Math.random()-.5)*40);const n=new F(16729344,2,10);n.position.copy(a.position),n.position.y=1,this.scene.add(n),e.push(a)}return e}createNatureEnvironment(){const e=[];for(let t=0;t<15;t++){const s=new _,i=new x(.3,.4,4,8),a=new g({color:9127187,roughness:.9}),n=new d(i,a);n.position.y=2,n.castShadow=!0,s.add(n);const o=new f(2,8,8),r=new g({color:2263842,roughness:.8}),l=new d(o,r);l.position.y=5,l.castShadow=!0,s.add(l),s.position.set((Math.random()-.5)*40,0,(Math.random()-.5)*40),e.push(s)}return e}update(e){if(this.gameEngine.player&&this.gameEngine.player.mesh){const s=this.gameEngine.player.mesh.userData.auraParticles;s&&s.children.forEach(i=>{i.userData.angle+=e*i.userData.speed,i.position.x=Math.cos(i.userData.angle)*i.userData.radius,i.position.z=Math.sin(i.userData.angle)*i.userData.radius,i.position.y+=Math.sin(i.userData.angle*2)*.01})}const t=Date.now()*1e-5%(Math.PI*2);if(this.mainLight){const s=new v(Math.cos(t)*50,Math.sin(t)*100+20,50);this.mainLight.position.copy(s);const i=Math.max(.3,Math.sin(t));this.mainLight.intensity=i}}setGraphicsQuality(e){this.graphicsQuality=e;const s={low:{shadowMapSize:1024,shadowRadius:0,particleCount:10,postProcessing:!1},medium:{shadowMapSize:2048,shadowRadius:1,particleCount:20,postProcessing:!1},high:{shadowMapSize:4096,shadowRadius:2,particleCount:50,postProcessing:!0},ultra:{shadowMapSize:8192,shadowRadius:3,particleCount:100,postProcessing:!0}}[e];this.mainLight&&(this.mainLight.shadow.mapSize.width=s.shadowMapSize,this.mainLight.shadow.mapSize.height=s.shadowMapSize,this.mainLight.shadow.radius=s.shadowRadius),this.postProcessing.enabled=s.postProcessing,console.log(`🎮 Graphics quality set to: ${e}`)}}class Ss{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.currentWeather="clear",this.weatherIntensity=0,this.targetIntensity=0,this.transitionSpeed=.01,this.weatherEffects={rain:null,snow:null,fog:null,storm:null},this.weatherParticles=[],this.lightningFlashes=[],this.init()}init(){this.createRainSystem(),this.createSnowSystem(),this.createFogSystem(),this.createStormSystem(),console.log("🌦️ Weather System initialized")}createRainSystem(){const t=new M,s=[],i=[],a=100,n=80;for(let l=0;l<5e3;l++)s.push((Math.random()-.5)*a,Math.random()*n,(Math.random()-.5)*a),i.push(0,-.5-Math.random()*.3,0);t.setAttribute("position",new b(s,3));const o=new T({color:8956620,size:.1,transparent:!0,opacity:.6,blending:et}),r=new P(t,o);r.visible=!1,this.scene.add(r),this.weatherEffects.rain={particles:r,velocities:i,geometry:t}}createSnowSystem(){const t=new M,s=[],i=[],a=100,n=80;for(let l=0;l<3e3;l++)s.push((Math.random()-.5)*a,Math.random()*n,(Math.random()-.5)*a),i.push((Math.random()-.5)*.1,-.1-Math.random()*.1,(Math.random()-.5)*.1);t.setAttribute("position",new b(s,3));const o=new T({color:16777215,size:.3,transparent:!0,opacity:.8,blending:k}),r=new P(t,o);r.visible=!1,this.scene.add(r),this.weatherEffects.snow={particles:r,velocities:i,geometry:t}}createFogSystem(){this.weatherEffects.fog={near:1,far:100,color:new y(8947848),density:.02}}createStormSystem(){this.weatherEffects.storm={lightningInterval:3e3,lastLightning:0,intensity:1.5}}setWeather(e,t=1){this.currentWeather=e,this.targetIntensity=Math.max(0,Math.min(1,t)),console.log(`🌦️ Setting weather to ${e} (intensity: ${this.targetIntensity})`)}update(e){if(Math.abs(this.weatherIntensity-this.targetIntensity)>.01){const t=this.targetIntensity-this.weatherIntensity;this.weatherIntensity+=t*this.transitionSpeed}switch(this.currentWeather){case"rain":this.updateRain(e);break;case"snow":this.updateSnow(e);break;case"fog":this.updateFog(e);break;case"storm":this.updateStorm(e);break;case"clear":this.updateClear(e);break}this.updateWeatherVisibility()}updateRain(e){const t=this.weatherEffects.rain;if(!t)return;const s=t.geometry.attributes.position.array,i=t.velocities;for(let a=0;a<s.length;a+=3)s[a]+=i[a]*e*60*this.weatherIntensity,s[a+1]+=i[a+1]*e*60*this.weatherIntensity,s[a+2]+=i[a+2]*e*60*this.weatherIntensity,s[a+1]<0&&(s[a+1]=80,this.camera&&(s[a]=this.camera.position.x+(Math.random()-.5)*100,s[a+2]=this.camera.position.z+(Math.random()-.5)*100));t.geometry.attributes.position.needsUpdate=!0}updateSnow(e){const t=this.weatherEffects.snow;if(!t)return;const s=t.geometry.attributes.position.array,i=t.velocities,a=Date.now()*.001;for(let n=0;n<s.length;n+=3){const o=Math.sin(a+n*.1)*.05,r=Math.cos(a+n*.1)*.05;s[n]+=(i[n]+o)*e*60*this.weatherIntensity,s[n+1]+=i[n+1]*e*60*this.weatherIntensity,s[n+2]+=(i[n+2]+r)*e*60*this.weatherIntensity,s[n+1]<0&&(s[n+1]=80,this.camera&&(s[n]=this.camera.position.x+(Math.random()-.5)*100,s[n+2]=this.camera.position.z+(Math.random()-.5)*100))}t.geometry.attributes.position.needsUpdate=!0}updateFog(e){if(this.scene.fog){const t=.05*this.weatherIntensity;if(this.scene.fog.density!==t){const s=t-this.scene.fog.density;this.scene.fog.density+=s*.05}}}updateStorm(e){this.updateRain(e),this.updateLightning()}updateLightning(){const e=this.weatherEffects.storm,t=Date.now();t-e.lastLightning>e.lightningInterval&&Math.random()<this.weatherIntensity*.3&&(this.createLightningFlash(),e.lastLightning=t)}createLightningFlash(){const e=new F(11193599,10,200);e.position.set((Math.random()-.5)*100,50+Math.random()*30,(Math.random()-.5)*100),this.scene.add(e),setTimeout(()=>{this.scene.remove(e)},100+Math.random()*100)}updateClear(e){this.scene.fog&&this.scene.fog.density>.02&&(this.scene.fog.density-=.001)}updateWeatherVisibility(){this.weatherEffects.rain&&this.weatherEffects.rain.particles&&(this.weatherEffects.rain.particles.visible=(this.currentWeather==="rain"||this.currentWeather==="storm")&&this.weatherIntensity>.1,this.weatherEffects.rain.particles.visible&&(this.weatherEffects.rain.particles.material.opacity=.6*this.weatherIntensity)),this.weatherEffects.snow&&this.weatherEffects.snow.particles&&(this.weatherEffects.snow.particles.visible=this.currentWeather==="snow"&&this.weatherIntensity>.1,this.weatherEffects.snow.particles.visible&&(this.weatherEffects.snow.particles.material.opacity=.8*this.weatherIntensity))}setRain(e=.7){this.setWeather("rain",e)}setSnow(e=.5){this.setWeather("snow",e)}setFog(e=.8){this.setWeather("fog",e)}setStorm(e=1){this.setWeather("storm",e)}setClear(){this.setWeather("clear",0)}setRandomWeather(){const e=["clear","rain","snow","fog","storm"],t=[.4,.25,.15,.15,.05];let s=Math.random(),i=0;for(let o=0;o<t.length;o++)if(s-=t[o],s<=0){i=o;break}const a=e[i],n=.3+Math.random()*.7;this.setWeather(a,n),console.log(`🌦️ Random weather: ${a} (${(n*100).toFixed(0)}%)`)}dispose(){Object.values(this.weatherEffects).forEach(e=>{e&&e.particles&&(e.particles.geometry&&e.particles.geometry.dispose(),e.particles.material&&e.particles.material.dispose(),this.scene.remove(e.particles))}),console.log("🌦️ Weather System disposed")}}class Ms{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.renderer=e.renderer,this.enabled=!0,this.effects={bloom:!0,depthOfField:!1,motionBlur:!1,colorGrading:!0,vignette:!0,chromaticAberration:!1},this.bloomStrength=.5,this.bloomRadius=.4,this.bloomThreshold=.85,this.vignetteStrength=.3,this.chromaticAberrationStrength=0,this.screenShake={intensity:0,duration:0,decay:.95},this.init()}init(){this.setupRenderTarget(),this.createShaderPasses(),console.log("🎨 Post-Processing System initialized")}setupRenderTarget(){const e=this.renderer.getSize(new _e);this.renderTarget=new Qe(e.x,e.y,{minFilter:pe,magFilter:pe,format:Ke,type:vt}),this.bloomRenderTarget=new Qe(Math.floor(e.x/2),Math.floor(e.y/2),{minFilter:pe,magFilter:pe,format:Ke})}createShaderPasses(){this.screenQuad=new d(new $(2,2),this.createCompositeMaterial()),this.screenScene=new tt,this.screenScene.add(this.screenQuad),this.screenCamera=new wt(-1,1,1,-1,0,1)}createCompositeMaterial(){return new O({uniforms:{tDiffuse:{value:null},tBloom:{value:null},uBloomStrength:{value:this.bloomStrength},uVignetteStrength:{value:this.vignetteStrength},uChromaticAberration:{value:this.chromaticAberrationStrength},uTime:{value:0},uResolution:{value:new _e}},vertexShader:`
                varying vec2 vUv;
                
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform sampler2D tDiffuse;
                uniform sampler2D tBloom;
                uniform float uBloomStrength;
                uniform float uVignetteStrength;
                uniform float uChromaticAberration;
                uniform float uTime;
                uniform vec2 uResolution;
                
                varying vec2 vUv;
                
                // Vignette effect
                float vignette(vec2 uv, float strength) {
                    vec2 pos = uv - 0.5;
                    float dist = length(pos);
                    return 1.0 - smoothstep(0.3, 1.5, dist * strength);
                }
                
                // Chromatic aberration
                vec3 chromaticAberration(sampler2D tex, vec2 uv, float amount) {
                    vec2 offset = vec2(amount, 0.0);
                    float r = texture2D(tex, uv + offset).r;
                    float g = texture2D(tex, uv).g;
                    float b = texture2D(tex, uv - offset).b;
                    return vec3(r, g, b);
                }
                
                // Color grading (simple)
                vec3 colorGrade(vec3 color) {
                    // Slight desaturation for fantasy feel
                    float gray = dot(color, vec3(0.299, 0.587, 0.114));
                    color = mix(vec3(gray), color, 1.1);
                    
                    // Boost contrast slightly
                    color = (color - 0.5) * 1.1 + 0.5;
                    
                    // Add slight blue tint for nighttime feel
                    color.b *= 1.05;
                    
                    return color;
                }
                
                void main() {
                    vec3 color;
                    
                    // Apply chromatic aberration if enabled
                    if (uChromaticAberration > 0.0) {
                        color = chromaticAberration(tDiffuse, vUv, uChromaticAberration);
                    } else {
                        color = texture2D(tDiffuse, vUv).rgb;
                    }
                    
                    // Add bloom
                    vec3 bloom = texture2D(tBloom, vUv).rgb;
                    color += bloom * uBloomStrength;
                    
                    // Apply color grading
                    color = colorGrade(color);
                    
                    // Apply vignette
                    float vig = vignette(vUv, uVignetteStrength);
                    color *= vig;
                    
                    // Tone mapping
                    color = color / (color + vec3(1.0));
                    
                    // Gamma correction
                    color = pow(color, vec3(1.0 / 2.2));
                    
                    gl_FragColor = vec4(color, 1.0);
                }
            `})}createBloomPass(){return new O({uniforms:{tDiffuse:{value:null},uThreshold:{value:this.bloomThreshold}},vertexShader:`
                varying vec2 vUv;
                void main() {
                    vUv = uv;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform sampler2D tDiffuse;
                uniform float uThreshold;
                varying vec2 vUv;
                
                void main() {
                    vec4 color = texture2D(tDiffuse, vUv);
                    float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
                    
                    if (brightness > uThreshold) {
                        gl_FragColor = color;
                    } else {
                        gl_FragColor = vec4(0.0);
                    }
                }
            `})}applyScreenShake(e,t=.3){this.screenShake.intensity=e,this.screenShake.duration=t}updateScreenShake(e){if(this.screenShake.intensity>.001){const t=this.screenShake.intensity;this.camera.position.x+=(Math.random()-.5)*t,this.camera.position.y+=(Math.random()-.5)*t,this.camera.position.z+=(Math.random()-.5)*t,this.screenShake.intensity*=this.screenShake.decay,this.screenShake.duration-=e,this.screenShake.duration<=0&&(this.screenShake.intensity=0)}}render(e){if(!this.enabled){this.renderer.render(this.scene,this.camera);return}this.updateScreenShake(e),this.renderer.setRenderTarget(this.renderTarget),this.renderer.render(this.scene,this.camera),this.effects.bloom&&this.generateBloom(),this.renderComposite()}generateBloom(){const e=this.createBloomPass();this.screenQuad.material=e,e.uniforms.tDiffuse.value=this.renderTarget.texture,this.renderer.setRenderTarget(this.bloomRenderTarget),this.renderer.render(this.screenScene,this.screenCamera),this.screenQuad.material=this.createCompositeMaterial()}renderComposite(){const e=this.screenQuad.material;e.uniforms.tDiffuse.value=this.renderTarget.texture,e.uniforms.tBloom.value=this.bloomRenderTarget.texture,e.uniforms.uBloomStrength.value=this.bloomStrength,e.uniforms.uVignetteStrength.value=this.vignetteStrength,e.uniforms.uChromaticAberration.value=this.chromaticAberrationStrength,e.uniforms.uTime.value=Date.now()*.001;const t=this.renderer.getSize(new _e);e.uniforms.uResolution.value.set(t.x,t.y),this.renderer.setRenderTarget(null),this.renderer.render(this.screenScene,this.screenCamera)}setBloom(e,t=.5,s=.85){this.effects.bloom=e,this.bloomStrength=t,this.bloomThreshold=s}setVignette(e,t=.3){this.effects.vignette=e,this.vignetteStrength=t}setChromaticAberration(e,t=.002){this.effects.chromaticAberration=e,this.chromaticAberrationStrength=t}setColorGrading(e){this.effects.colorGrading=e}toggleEffect(e){this.effects.hasOwnProperty(e)&&(this.effects[e]=!this.effects[e],console.log(`🎨 ${e}: ${this.effects[e]?"ON":"OFF"}`))}setQualityPreset(e){switch(e){case"low":this.enabled=!1;break;case"medium":this.enabled=!0,this.effects.bloom=!0,this.effects.vignette=!0,this.effects.depthOfField=!1,this.effects.motionBlur=!1,this.effects.chromaticAberration=!1;break;case"high":this.enabled=!0,this.effects.bloom=!0,this.effects.vignette=!0,this.effects.depthOfField=!0,this.effects.motionBlur=!1,this.effects.chromaticAberration=!1;break;case"ultra":this.enabled=!0,Object.keys(this.effects).forEach(t=>{this.effects[t]=!0});break}console.log(`🎨 Graphics quality set to: ${e}`)}handleResize(e,t){this.renderTarget.setSize(e,t),this.bloomRenderTarget.setSize(Math.floor(e/2),Math.floor(t/2))}dispose(){this.renderTarget&&this.renderTarget.dispose(),this.bloomRenderTarget&&this.bloomRenderTarget.dispose(),this.screenQuad.geometry&&this.screenQuad.geometry.dispose(),this.screenQuad.material&&this.screenQuad.material.dispose(),console.log("🎨 Post-Processing System disposed")}}class Cs{constructor(e){this.scene=e,this.particleGroups=[],this.maxParticleGroups=50,this.init()}init(){console.log("✨ Advanced Particle System initialized")}createFireEffect(e,t=2){const i=new M,a=[],n=[],o=[],r=[];for(let m=0;m<100;m++){a.push(e.x+(Math.random()-.5)*.5,e.y,e.z+(Math.random()-.5)*.5);const u=.05+Math.random()*.15,p=new y().setHSL(u,1,.5+Math.random()*.3);n.push(p.r,p.g,p.b),o.push((Math.random()-.5)*.5,1+Math.random()*.5,(Math.random()-.5)*.5),r.push(Math.random())}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const l=new T({size:.3,vertexColors:!0,transparent:!0,opacity:.9,blending:k,depthWrite:!1}),c=new P(i,l);this.scene.add(c),this.addParticleGroup({mesh:c,velocities:o,lifetimes:r,life:t,maxLife:t,type:"fire"})}createIceEffect(e,t=1.5){const i=new M,a=[],n=[],o=[];for(let c=0;c<80;c++){a.push(e.x+(Math.random()-.5)*2,e.y+Math.random()*2,e.z+(Math.random()-.5)*2);const m=.7+Math.random()*.3,u=new y(m,m+.1,1);n.push(u.r,u.g,u.b);const p=Math.random()*Math.PI*2,S=.5+Math.random()*.5;o.push(Math.cos(p)*S,.2+Math.random()*.3,Math.sin(p)*S)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const r=new T({size:.2,vertexColors:!0,transparent:!0,opacity:.8,blending:k}),l=new P(i,r);this.scene.add(l),this.addParticleGroup({mesh:l,velocities:o,life:t,maxLife:t,type:"ice"})}createLightningEffect(e,t,s=3){const i=this.generateLightningPath(e,t,s),a=new M().setFromPoints(i),n=new bt({color:11193599,transparent:!0,opacity:1,blending:k}),o=new xt(a,n);this.scene.add(o),this.createLightningGlow(i),this.addParticleGroup({mesh:o,life:.2,maxLife:.2,type:"lightning"})}generateLightningPath(e,t,s){const i=[e.clone()],a=10+Math.floor(Math.random()*5),n=.5;for(let o=1;o<=a;o++){const r=o/a,l=new v().lerpVectors(e,t,r);l.x+=(Math.random()-.5)*n*(1-r),l.y+=(Math.random()-.5)*n*(1-r),l.z+=(Math.random()-.5)*n*(1-r),i.push(l)}return i.push(t.clone()),i}createLightningGlow(e){e.length*3;const t=new M,s=[],i=[];e.forEach(o=>{for(let r=0;r<3;r++){s.push(o.x+(Math.random()-.5)*.2,o.y+(Math.random()-.5)*.2,o.z+(Math.random()-.5)*.2);const l=new y(.7,.8,1);i.push(l.r,l.g,l.b)}}),t.setAttribute("position",new b(s,3)),t.setAttribute("color",new b(i,3));const a=new T({size:.3,vertexColors:!0,transparent:!0,opacity:1,blending:k}),n=new P(t,a);this.scene.add(n),this.addParticleGroup({mesh:n,life:.3,maxLife:.3,type:"glow"})}createExplosionEffect(e,t=16737792,s=2){const a=new M,n=[],o=[],r=[];for(let m=0;m<150;m++){n.push(e.x,e.y,e.z);const u=new y(t),p=.8+Math.random()*.4;o.push(u.r*p,u.g*p,u.b*p);const S=Math.random()*Math.PI*2,E=Math.random()*Math.PI,A=s*(.5+Math.random()*.5);r.push(Math.sin(E)*Math.cos(S)*A,Math.sin(E)*Math.sin(S)*A,Math.cos(E)*A)}a.setAttribute("position",new b(n,3)),a.setAttribute("color",new b(o,3));const l=new T({size:.25,vertexColors:!0,transparent:!0,opacity:1,blending:k}),c=new P(a,l);this.scene.add(c),this.addParticleGroup({mesh:c,velocities:r,life:1,maxLife:1,type:"explosion"})}createSparkleEffect(e,t=10309341){const i=new M,a=[],n=[],o=[];for(let c=0;c<30;c++){a.push(e.x+(Math.random()-.5)*.5,e.y+Math.random()*1.5,e.z+(Math.random()-.5)*.5);const m=new y(t);n.push(m.r,m.g,m.b),o.push((Math.random()-.5)*.3,.5+Math.random()*.5,(Math.random()-.5)*.3)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const r=new T({size:.15,vertexColors:!0,transparent:!0,opacity:1,blending:k}),l=new P(i,r);this.scene.add(l),this.addParticleGroup({mesh:l,velocities:o,life:1.2,maxLife:1.2,type:"sparkle"})}createSmokeTrail(e,t,s=1){const a=new M,n=[],o=[];for(let m=0;m<20;m++){n.push(e.x+(Math.random()-.5)*.3,e.y+(Math.random()-.5)*.3,e.z+(Math.random()-.5)*.3);const u=.3+Math.random()*.3;o.push(u,u,u)}a.setAttribute("position",new b(n,3)),a.setAttribute("color",new b(o,3));const r=new T({size:.4,vertexColors:!0,transparent:!0,opacity:.5,blending:et}),l=new P(a,r);this.scene.add(l);const c=[];for(let m=0;m<20;m++)c.push(t.x*.3+(Math.random()-.5)*.2,t.y*.3+Math.random()*.2,t.z*.3+(Math.random()-.5)*.2);this.addParticleGroup({mesh:l,velocities:c,life:s,maxLife:s,type:"smoke"})}addParticleGroup(e){if(this.particleGroups.length>=this.maxParticleGroups){const t=this.particleGroups.shift();this.removeParticleGroup(t)}this.particleGroups.push(e)}removeParticleGroup(e){e.mesh&&(this.scene.remove(e.mesh),e.mesh.geometry&&e.mesh.geometry.dispose(),e.mesh.material&&e.mesh.material.dispose())}update(e){const t=[];this.particleGroups.forEach((s,i)=>{if(s.life-=e,s.life<=0){t.push(i);return}if(s.velocities&&s.mesh.geometry){const a=s.mesh.geometry.attributes.position.array,n=s.velocities;for(let o=0;o<a.length;o+=3)a[o]+=n[o]*e*60,a[o+1]+=n[o+1]*e*60,a[o+2]+=n[o+2]*e*60,(s.type==="fire"||s.type==="explosion")&&(n[o+1]-=.02);s.mesh.geometry.attributes.position.needsUpdate=!0}if(s.mesh.material){const a=s.life/s.maxLife;s.mesh.material.opacity=a}}),t.reverse().forEach(s=>{this.removeParticleGroup(this.particleGroups[s]),this.particleGroups.splice(s,1)})}dispose(){this.particleGroups.forEach(e=>this.removeParticleGroup(e)),this.particleGroups=[],console.log("✨ Advanced Particle System disposed")}}class _s{constructor(e){this.gameEngine=e,this.scene=e.scene,this.renderer=e.renderer,this.currentTime=12,this.timeSpeed=.1,this.paused=!1,this.sunLight=null,this.moonLight=null,this.ambientLight=null,this.hemisphereLight=null,this.skyColors={day:{top:new y(30719),bottom:new y(9024235),fog:new y(9024235)},sunset:{top:new y(16739125),bottom:new y(16765503),fog:new y(16751190)},night:{top:new y(658983),bottom:new y(1711678),fog:new y(1714247)}},this.init()}init(){this.createLights(),this.updateLighting(),console.log("🌅 Day/Night Cycle System initialized")}createLights(){this.sunLight=new U(16777215,1),this.sunLight.castShadow=!0,this.sunLight.shadow.mapSize.width=2048,this.sunLight.shadow.mapSize.height=2048,this.sunLight.shadow.camera.near=.5,this.sunLight.shadow.camera.far=500,this.sunLight.shadow.camera.left=-100,this.sunLight.shadow.camera.right=100,this.sunLight.shadow.camera.top=100,this.sunLight.shadow.camera.bottom=-100,this.scene.add(this.sunLight),this.moonLight=new U(6724044,.3),this.moonLight.castShadow=!1,this.scene.add(this.moonLight),this.ambientLight=new oe(4210784,.4),this.scene.add(this.ambientLight),this.hemisphereLight=new Ie(4491519,2241348,.3),this.scene.add(this.hemisphereLight)}update(e){this.paused||(this.currentTime+=this.timeSpeed*e,this.currentTime>=24&&(this.currentTime-=24,console.log("🌅 New day begins!")),this.updateLighting())}updateLighting(){const e=this.currentTime,t=e/24*Math.PI*2-Math.PI/2,s=Math.sin(t),i=200;this.sunLight.position.set(Math.cos(t)*i,s*i,0),this.moonLight.position.set(-Math.cos(t)*i,-s*i,0);let a,n;e>=5&&e<7?(a="dawn",n=(e-5)/2):e>=7&&e<17?(a="day",n=1):e>=17&&e<19?(a="dusk",n=1-(e-17)/2):(a="night",n=0),this.updateLightIntensities(s,n),this.updateSkyColors(a,n)}updateLightIntensities(e,t){const s=Math.max(0,e);this.sunLight.intensity=s*1.2;const i=Math.max(0,-e)*.3;this.moonLight.intensity=i;const a=.2+t*.3;this.ambientLight.intensity=a,this.hemisphereLight.intensity=.1+t*.3,e<.2&&e>-.2?this.sunLight.color.setHex(16755302):this.sunLight.color.setHex(16777215)}updateSkyColors(e,t){let s,i;e==="dawn"||e==="dusk"?(this.blendColors(this.skyColors.night.top,this.skyColors.sunset.top,e==="dawn"?t:1-t),s=this.blendColors(this.skyColors.night.bottom,this.skyColors.sunset.bottom,e==="dawn"?t:1-t),i=this.blendColors(this.skyColors.night.fog,this.skyColors.sunset.fog,e==="dawn"?t:1-t)):e==="day"?(this.skyColors.day.top,s=this.skyColors.day.bottom,i=this.skyColors.day.fog):(this.skyColors.night.top,s=this.skyColors.night.bottom,i=this.skyColors.night.fog),this.scene.background=s.clone(),this.scene.fog&&(this.scene.fog.color=i.clone())}blendColors(e,t,s){return new y(e.r+(t.r-e.r)*s,e.g+(t.g-e.g)*s,e.b+(t.b-e.b)*s)}setTime(e){this.currentTime=Math.max(0,Math.min(24,e)),this.updateLighting(),console.log(`🕐 Time set to ${this.getTimeString()}`)}setTimeSpeed(e){this.timeSpeed=e,console.log(`⏱️ Time speed: ${e}x`)}pause(){this.paused=!0,console.log("⏸️ Day/Night cycle paused")}resume(){this.paused=!1,console.log("▶️ Day/Night cycle resumed")}setMorning(){this.setTime(8)}setNoon(){this.setTime(12)}setEvening(){this.setTime(18)}setMidnight(){this.setTime(0)}getTimeString(){const e=Math.floor(this.currentTime),t=Math.floor((this.currentTime-e)*60);return`${e.toString().padStart(2,"0")}:${t.toString().padStart(2,"0")}`}getTimeOfDay(){const e=this.currentTime;return e>=5&&e<7?"Dawn":e>=7&&e<11?"Morning":e>=11&&e<14?"Midday":e>=14&&e<17?"Afternoon":e>=17&&e<19?"Dusk":e>=19||e<5?"Night":"Unknown"}isDaytime(){return this.currentTime>=6&&this.currentTime<18}isNighttime(){return!this.isDaytime()}dispose(){this.sunLight&&this.scene.remove(this.sunLight),this.moonLight&&this.scene.remove(this.moonLight),this.ambientLight&&this.scene.remove(this.ambientLight),this.hemisphereLight&&this.scene.remove(this.hemisphereLight),console.log("🌅 Day/Night Cycle System disposed")}}class Es{constructor(e){this.gameEngine=e,this.currentTheme="fantasy",this.themes={fantasy:{primary:"#9d4edd",secondary:"#c77dff",accent:"#e0aaff",background:"rgba(26, 0, 51, 0.9)",border:"#9d4edd",text:"#ffffff"},dark:{primary:"#1a1e3e",secondary:"#2d3561",accent:"#4a5f8f",background:"rgba(10, 14, 39, 0.95)",border:"#4a5f8f",text:"#e0e7ff"},arcane:{primary:"#0077ff",secondary:"#00aaff",accent:"#66ccff",background:"rgba(0, 20, 60, 0.9)",border:"#00aaff",text:"#ffffff"},nature:{primary:"#52b788",secondary:"#74c69d",accent:"#95d5b2",background:"rgba(20, 50, 30, 0.9)",border:"#52b788",text:"#ffffff"},infernal:{primary:"#ff0844",secondary:"#ff6b9d",accent:"#ffadd2",background:"rgba(50, 10, 20, 0.9)",border:"#ff0844",text:"#ffffff"}},this.animations={fadeIn:"fadeIn 0.3s ease-in",slideIn:"slideIn 0.4s ease-out",pulse:"pulse 2s infinite",glow:"glow 1.5s ease-in-out infinite"},this.init()}init(){this.injectStyles(),this.enhanceExistingUI(),this.createModernElements(),console.log("🎨 Modern UI System initialized")}injectStyles(){const e=document.createElement("style");e.textContent=`
            /* Modern UI Animations */
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            @keyframes slideIn {
                from { 
                    transform: translateY(20px);
                    opacity: 0;
                }
                to { 
                    transform: translateY(0);
                    opacity: 1;
                }
            }
            
            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.05); }
            }
            
            @keyframes glow {
                0%, 100% { 
                    box-shadow: 0 0 10px currentColor;
                    filter: brightness(1);
                }
                50% { 
                    box-shadow: 0 0 20px currentColor;
                    filter: brightness(1.2);
                }
            }
            
            @keyframes shimmer {
                0% { background-position: -1000px 0; }
                100% { background-position: 1000px 0; }
            }
            
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
            
            /* Modern UI Components */
            .modern-panel {
                background: var(--ui-background);
                border: 2px solid var(--ui-border);
                border-radius: 12px;
                padding: 20px;
                box-shadow: 0 0 30px rgba(157, 78, 221, 0.3);
                backdrop-filter: blur(10px);
                animation: fadeIn 0.3s ease-in;
                transition: all 0.3s ease;
            }
            
            .modern-panel:hover {
                box-shadow: 0 0 40px rgba(157, 78, 221, 0.5);
                transform: translateY(-2px);
            }
            
            .modern-button {
                background: linear-gradient(135deg, var(--ui-primary), var(--ui-secondary));
                border: 2px solid var(--ui-accent);
                border-radius: 8px;
                padding: 12px 24px;
                color: var(--ui-text);
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
            }
            
            .modern-button::before {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, 
                    transparent, 
                    rgba(255, 255, 255, 0.3), 
                    transparent
                );
                transition: left 0.5s;
            }
            
            .modern-button:hover::before {
                left: 100%;
            }
            
            .modern-button:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 20px rgba(157, 78, 221, 0.5);
            }
            
            .modern-button:active {
                transform: translateY(0);
            }
            
            .modern-progress-bar {
                width: 100%;
                height: 24px;
                background: rgba(0, 0, 0, 0.5);
                border-radius: 12px;
                overflow: hidden;
                position: relative;
                border: 2px solid var(--ui-border);
            }
            
            .modern-progress-fill {
                height: 100%;
                background: linear-gradient(90deg, var(--ui-primary), var(--ui-secondary));
                transition: width 0.3s ease;
                position: relative;
                overflow: hidden;
            }
            
            .modern-progress-fill::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, 
                    transparent, 
                    rgba(255, 255, 255, 0.3), 
                    transparent
                );
                animation: shimmer 2s infinite;
            }
            
            .modern-stat-display {
                display: flex;
                align-items: center;
                gap: 10px;
                padding: 8px;
                background: rgba(0, 0, 0, 0.3);
                border-radius: 8px;
                margin: 5px 0;
            }
            
            .modern-stat-icon {
                width: 24px;
                height: 24px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                background: var(--ui-primary);
                font-size: 14px;
            }
            
            .modern-stat-value {
                flex: 1;
                font-weight: bold;
                color: var(--ui-text);
            }
            
            .modern-notification {
                position: fixed;
                top: 100px;
                right: 20px;
                background: var(--ui-background);
                border: 2px solid var(--ui-border);
                border-radius: 8px;
                padding: 15px 20px;
                min-width: 250px;
                box-shadow: 0 0 20px rgba(157, 78, 221, 0.5);
                animation: slideIn 0.4s ease-out;
                z-index: 10000;
            }
            
            .modern-tooltip {
                position: absolute;
                background: rgba(0, 0, 0, 0.95);
                border: 2px solid var(--ui-border);
                border-radius: 8px;
                padding: 10px 15px;
                color: var(--ui-text);
                font-size: 14px;
                max-width: 300px;
                pointer-events: none;
                z-index: 10001;
                animation: fadeIn 0.2s ease-in;
            }
            
            .modern-divider {
                height: 2px;
                background: linear-gradient(90deg, 
                    transparent, 
                    var(--ui-border), 
                    transparent
                );
                margin: 15px 0;
            }
            
            /* Icon styles */
            .ui-icon {
                display: inline-block;
                font-size: 20px;
                margin-right: 8px;
            }
            
            /* Improved ability buttons */
            .ability-button-modern {
                width: 70px;
                height: 70px;
                background: linear-gradient(135deg, 
                    rgba(45, 10, 78, 0.9), 
                    rgba(74, 14, 122, 0.9)
                );
                border: 3px solid var(--ui-border);
                border-radius: 12px;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 32px;
                position: relative;
                overflow: hidden;
            }
            
            .ability-button-modern::before {
                content: '';
                position: absolute;
                top: -2px;
                left: -2px;
                right: -2px;
                bottom: -2px;
                background: linear-gradient(45deg, 
                    var(--ui-primary), 
                    var(--ui-secondary), 
                    var(--ui-accent)
                );
                border-radius: 12px;
                opacity: 0;
                transition: opacity 0.3s;
                z-index: -1;
            }
            
            .ability-button-modern:hover::before {
                opacity: 1;
                animation: glow 1.5s ease-in-out infinite;
            }
            
            .ability-button-modern:hover {
                transform: scale(1.1) translateY(-5px);
                box-shadow: 0 10px 30px rgba(157, 78, 221, 0.8);
            }
            
            .ability-cooldown {
                position: absolute;
                bottom: 5px;
                right: 5px;
                background: rgba(0, 0, 0, 0.8);
                border-radius: 4px;
                padding: 2px 6px;
                font-size: 12px;
                font-weight: bold;
            }
        `,document.head.appendChild(e),this.applyTheme(this.currentTheme)}applyTheme(e){const t=this.themes[e]||this.themes.fantasy,s=document.documentElement;s.style.setProperty("--ui-primary",t.primary),s.style.setProperty("--ui-secondary",t.secondary),s.style.setProperty("--ui-accent",t.accent),s.style.setProperty("--ui-background",t.background),s.style.setProperty("--ui-border",t.border),s.style.setProperty("--ui-text",t.text),this.currentTheme=e,console.log(`🎨 UI theme changed to: ${e}`)}enhanceExistingUI(){document.querySelectorAll(".hud").forEach(a=>{a.classList.add("modern-panel")}),document.querySelectorAll(".ability-button").forEach(a=>{a.classList.add("ability-button-modern")}),document.querySelectorAll(".bar").forEach(a=>{a.classList.add("modern-progress-bar")}),document.querySelectorAll(".bar-fill").forEach(a=>{a.classList.add("modern-progress-fill")})}createModernElements(){this.notificationContainer=document.createElement("div"),this.notificationContainer.id="modern-notifications",this.notificationContainer.style.cssText=`
            position: fixed;
            top: 100px;
            right: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            z-index: 10000;
            pointer-events: none;
        `,document.body.appendChild(this.notificationContainer)}showNotification(e,t="info",s=3e3){const i=document.createElement("div");i.className="modern-notification";const a={info:"ℹ️",success:"✅",warning:"⚠️",error:"❌",achievement:"🏆"};i.innerHTML=`
            <span class="ui-icon">${a[t]||a.info}</span>
            ${e}
        `,this.notificationContainer.appendChild(i),setTimeout(()=>{i.style.animation="fadeOut 0.3s ease-out",setTimeout(()=>{i.remove()},300)},s)}createTooltip(e,t){let s=null;e.addEventListener("mouseenter",i=>{s=document.createElement("div"),s.className="modern-tooltip",s.textContent=t,document.body.appendChild(s);const a=e.getBoundingClientRect();s.style.left=`${a.left+a.width/2-s.offsetWidth/2}px`,s.style.top=`${a.top-s.offsetHeight-10}px`}),e.addEventListener("mouseleave",()=>{s&&(s.remove(),s=null)})}update(e){}dispose(){this.notificationContainer&&this.notificationContainer.remove(),console.log("🎨 Modern UI System disposed")}}class Ts{constructor(e){this.gameEngine=e,this.scene=e.scene,this.environmentObjects=[],this.maxObjects=100,this.biomeConfigs={crystal_caverns:{colors:[6724095,8956671,11193599],decorations:["crystals","rocks","glowOrbs"],density:.8},fungal_city:{colors:[16739229,16746666,16755404],decorations:["mushrooms","vines","spores"],density:.9},vine_cathedral:{colors:[5420936,7653021,9819570],decorations:["vines","flowers","leaves"],density:1},broken_starship:{colors:[39423,43775,6737151],decorations:["debris","terminals","lights"],density:.6},twilight_throne:{colors:[10309341,13073919,14723839],decorations:["pillars","statues","runes"],density:.7}},this.init()}init(){console.log("🌲 Environment Details System initialized")}populateBiome(e,t){this.clearEnvironment();const s=this.biomeConfigs[e]||this.biomeConfigs.crystal_caverns,i=Math.floor(this.maxObjects*s.density);console.log(`🌲 Populating ${e} with ${i} objects`);for(let a=0;a<i;a++){const n=this.getRandomDecoration(s.decorations),o=this.getRandomPosition(t);this.createDecoration(n,o,s.colors)}}getRandomDecoration(e){return e[Math.floor(Math.random()*e.length)]}getRandomPosition(e){return new v(e.min.x+Math.random()*(e.max.x-e.min.x),0,e.min.z+Math.random()*(e.max.z-e.min.z))}createDecoration(e,t,s){let i=null;switch(e){case"crystals":i=this.createCrystal(t,s);break;case"rocks":i=this.createRock(t,s);break;case"glowOrbs":i=this.createGlowOrb(t,s);break;case"mushrooms":i=this.createMushroom(t,s);break;case"vines":i=this.createVine(t,s);break;case"spores":i=this.createSpores(t,s);break;case"flowers":i=this.createFlower(t,s);break;case"leaves":i=this.createLeaves(t,s);break;case"debris":i=this.createDebris(t,s);break;case"terminals":i=this.createTerminal(t,s);break;case"lights":i=this.createLight(t,s);break;case"pillars":i=this.createPillar(t,s);break;case"statues":i=this.createStatue(t,s);break;case"runes":i=this.createRune(t,s);break}i&&(this.scene.add(i),this.environmentObjects.push(i))}createCrystal(e,t){const s=.5+Math.random()*1.5,i=new z(.2,s,6),a=t[Math.floor(Math.random()*t.length)],n=new w({color:a,emissive:a,emissiveIntensity:.3,transparent:!0,opacity:.8,shininess:100}),o=new d(i,n);o.position.copy(e),o.position.y=s/2,o.rotation.x=(Math.random()-.5)*.3,o.rotation.z=(Math.random()-.5)*.3;const r=new f(.1,8,8),l=new D({color:a,transparent:!0,opacity:.5}),c=new d(r,l);return c.position.y=s,o.add(c),o}createRock(e,t){const s=.3+Math.random()*.7,i=new Re(s,0),a=new g({color:5592405,roughness:.9,metalness:.1}),n=new d(i,a);return n.position.copy(e),n.position.y=s*.5,n.rotation.set(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),n}createGlowOrb(e,t){const s=.2+Math.random()*.3,i=new f(s,16,16),a=t[Math.floor(Math.random()*t.length)],n=new D({color:a,transparent:!0,opacity:.6}),o=new d(i,n);o.position.copy(e),o.position.y=1+Math.random()*2;const r=new F(a,.5,5);return o.add(r),o.userData.baseY=o.position.y,o.userData.floatSpeed=.5+Math.random()*.5,o.userData.floatAmount=.3+Math.random()*.3,o}createMushroom(e,t){const s=new _,i=new x(.05,.08,.3,8),a=new g({color:14540253}),n=new d(i,a);n.position.y=.15,s.add(n);const o=new f(.2,12,8,0,Math.PI*2,0,Math.PI/2),r=t[Math.floor(Math.random()*t.length)],l=new g({color:r,emissive:r,emissiveIntensity:.2}),c=new d(o,l);return c.position.y=.3,s.add(c),s.position.copy(e),s}createVine(e,t){const s=[],i=5+Math.floor(Math.random()*5);for(let c=0;c<i;c++)s.push(new v((Math.random()-.5)*.5,c*.3,(Math.random()-.5)*.5));const a=new kt(s),n=new St(a,i*2,.02,8,!1),o=t[Math.floor(Math.random()*t.length)],r=new g({color:o}),l=new d(n,r);return l.position.copy(e),l}createSpores(e,t){const i=new M,a=[],n=[];for(let l=0;l<10;l++){a.push((Math.random()-.5)*2,Math.random()*2,(Math.random()-.5)*2);const c=new y(t[Math.floor(Math.random()*t.length)]);n.push(c.r,c.g,c.b)}i.setAttribute("position",new b(a,3)),i.setAttribute("color",new b(n,3));const o=new T({size:.1,vertexColors:!0,transparent:!0,opacity:.6,blending:k}),r=new P(i,o);return r.position.copy(e),r}createFlower(e,t){const s=new _,i=new x(.02,.03,.4,8),a=new g({color:2263842}),n=new d(i,a);n.position.y=.2,s.add(n);const o=5+Math.floor(Math.random()*3),r=t[Math.floor(Math.random()*t.length)];for(let l=0;l<o;l++){const c=l/o*Math.PI*2,m=new Fe(.1,8),u=new g({color:r,side:J}),p=new d(m,u);p.position.x=Math.cos(c)*.1,p.position.z=Math.sin(c)*.1,p.position.y=.4,p.rotation.y=c,p.rotation.x=Math.PI/4,s.add(p)}return s.position.copy(e),s}createLeaves(e,t){return this.createSpores(e,t)}createDebris(e,t){const s=new C(.3+Math.random()*.5,.2+Math.random()*.3,.3+Math.random()*.5),i=new g({color:6710886,roughness:.8,metalness:.4}),a=new d(s,i);return a.position.copy(e),a.position.y=.1,a.rotation.set(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),a}createTerminal(e,t){const s=new _,i=new C(.3,.5,.2),a=new g({color:3355443}),n=new d(i,a);n.position.y=.25,s.add(n);const o=new $(.25,.2),r=t[Math.floor(Math.random()*t.length)],l=new D({color:r,emissive:r,emissiveIntensity:.5}),c=new d(o,l);return c.position.y=.3,c.position.z=.11,s.add(c),s.position.copy(e),s}createLight(e,t){const s=t[Math.floor(Math.random()*t.length)],i=new F(s,1,10);return i.position.copy(e),i.position.y=2+Math.random(),i}createPillar(e,t){const s=2+Math.random()*2,i=new x(.3,.35,s,8),a=t[Math.floor(Math.random()*t.length)],n=new g({color:8947848,emissive:a,emissiveIntensity:.1,roughness:.7}),o=new d(i,n);return o.position.copy(e),o.position.y=s/2,o}createStatue(e,t){const s=new _,i=new C(.5,.2,.5),a=new g({color:10066329}),n=new d(i,a);n.position.y=.1,s.add(n);const o=new x(.15,.2,.8,8),r=new d(o,a);r.position.y=.6,s.add(r);const l=new f(.2,12,12),c=new d(l,a);return c.position.y=1.2,s.add(c),s.position.copy(e),s}createRune(e,t){const s=new $(.3,.3),i=t[Math.floor(Math.random()*t.length)],a=new D({color:i,transparent:!0,opacity:.7,side:J}),n=new d(s,a);return n.position.copy(e),n.position.y=.01,n.rotation.x=-Math.PI/2,n}update(e){const t=Date.now()*.001;this.environmentObjects.forEach(s=>{s.userData.floatSpeed&&(s.position.y=s.userData.baseY+Math.sin(t*s.userData.floatSpeed)*s.userData.floatAmount)})}clearEnvironment(){this.environmentObjects.forEach(e=>{this.scene.remove(e),this.disposeObject(e)}),this.environmentObjects=[]}disposeObject(e){e&&(e.children&&e.children.forEach(t=>this.disposeObject(t)),e.geometry&&e.geometry.dispose(),e.material&&(Array.isArray(e.material)?e.material.forEach(t=>{t.dispose&&t.dispose()}):e.material.dispose&&e.material.dispose()))}dispose(){this.clearEnvironment(),console.log("🌲 Environment Details System disposed")}}class Ps{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.worldSize=1e3,this.chunkSize=50,this.loadDistance=3,this.chunks=new Map,this.activeChunks=new Set,this.playerPosition=new v,this.biomes={forest:{color:2969622,density:.8,height:.3},plains:{color:8172354,density:.3,height:.1},mountains:{color:6111287,density:.2,height:2},desert:{color:16766287,density:.1,height:.05},tundra:{color:11583173,density:.2,height:.2},swamp:{color:5606191,density:.9,height:0}},this.pointsOfInterest=[],this.landmarks=[],this.init()}init(){this.createTerrain(),this.generatePointsOfInterest(),console.log("🌍 Open World System initialized")}createTerrain(){const t=new $(this.worldSize,this.worldSize,128,128),s=t.attributes.position.array;for(let a=0;a<s.length;a+=3){const n=s[a],o=s[a+1];let r=0,l=.01,c=10;for(let m=0;m<4;m++)r+=this.noise(n*l,o*l)*c,l*=2,c*=.5;s[a+2]=r}t.computeVertexNormals(),t.attributes.position.needsUpdate=!0;const i=new g({color:8172354,roughness:.8,metalness:.1,flatShading:!1});this.terrain=new d(t,i),this.terrain.rotation.x=-Math.PI/2,this.terrain.receiveShadow=!0,this.scene.add(this.terrain),console.log("🗺️ Terrain generated")}noise(e,t){const s=Math.sin(e*12.9898+t*78.233)*43758.5453;return s-Math.floor(s)}generatePointsOfInterest(){const e=[{name:"Village",icon:"🏘️",radius:20},{name:"Dungeon",icon:"⚔️",radius:10},{name:"Boss Arena",icon:"👹",radius:30},{name:"Shrine",icon:"⛩️",radius:5},{name:"Trading Post",icon:"🏪",radius:8},{name:"Treasure Cache",icon:"💎",radius:3},{name:"Portal",icon:"🌀",radius:5},{name:"Ancient Ruins",icon:"🏛️",radius:25}];for(let t=0;t<50;t++){const s=e[Math.floor(Math.random()*e.length)],i=new v((Math.random()-.5)*this.worldSize*.8,0,(Math.random()-.5)*this.worldSize*.8);i.y=this.getTerrainHeight(i.x,i.z),this.pointsOfInterest.push({type:s.name,icon:s.icon,position:i.clone(),radius:s.radius,discovered:!1})}console.log(`📍 Generated ${this.pointsOfInterest.length} points of interest`)}getTerrainHeight(e,t){let s=0,i=.01,a=10;for(let n=0;n<4;n++)s+=this.noise(e*i,t*i)*a,i*=2,a*=.5;return s}updateChunks(e){this.playerPosition.copy(e);const t=Math.floor(e.x/this.chunkSize),s=Math.floor(e.z/this.chunkSize),i=new Set;for(let a=t-this.loadDistance;a<=t+this.loadDistance;a++)for(let n=s-this.loadDistance;n<=s+this.loadDistance;n++){const o=`${a},${n}`;i.add(o),this.activeChunks.has(o)||this.loadChunk(a,n)}this.activeChunks.forEach(a=>{i.has(a)||this.unloadChunk(a)}),this.activeChunks=i}loadChunk(e,t){const s=`${e},${t}`;if(this.chunks.has(s))return;const i={x:e,z:t,objects:[]};this.populateChunk(i),this.chunks.set(s,i)}unloadChunk(e){const t=this.chunks.get(e);t&&(t.objects.forEach(s=>{this.scene.remove(s),s.geometry&&s.geometry.dispose(),s.material&&(Array.isArray(s.material)?s.material.forEach(i=>i.dispose()):s.material.dispose())}),this.chunks.delete(e))}populateChunk(e){const t=e.x*this.chunkSize,s=e.z*this.chunkSize,i=10+Math.floor(Math.random()*20);for(let a=0;a<i;a++){const n=t+Math.random()*this.chunkSize,o=s+Math.random()*this.chunkSize,r=this.getTerrainHeight(n,o),l=this.createEnvironmentObject(n,r,o);l&&(this.scene.add(l),e.objects.push(l))}}createEnvironmentObject(e,t,s){return Math.random()<.6?this.createTree(e,t,s):this.createRock(e,t,s)}createTree(e,t,s){const i=new _,a=3+Math.random()*2,n=new x(.2,.3,a,8),o=new g({color:4863784}),r=new d(n,o);r.position.y=a/2,r.castShadow=!0,i.add(r);const l=new z(1.5,3,8),c=new g({color:2969622}),m=new d(l,c);return m.position.y=a+1,m.castShadow=!0,i.add(m),i.position.set(e,t,s),i}createRock(e,t,s){const i=.5+Math.random()*1.5,a=new Re(i,0),n=new g({color:6710886,roughness:.9,metalness:.1}),o=new d(a,n);return o.position.set(e,t+i*.5,s),o.rotation.set(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI),o.castShadow=!0,o.receiveShadow=!0,o}discoverPOI(e,t=10){this.pointsOfInterest.forEach(s=>{s.discovered||e.distanceTo(s.position)<t&&(s.discovered=!0,console.log(`🗺️ Discovered: ${s.icon} ${s.type}`),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Discovered: ${s.type}`,"achievement",4e3))})}getNearbyPOIs(e,t=50){return this.pointsOfInterest.filter(s=>e.distanceTo(s.position)<=t).sort((s,i)=>{const a=e.distanceTo(s.position),n=e.distanceTo(i.position);return a-n})}createWorldMap(){const t=document.createElement("canvas");t.width=512,t.height=512;const s=t.getContext("2d");return s.fillStyle="#7cb342",s.fillRect(0,0,512,512),this.pointsOfInterest.forEach(i=>{const a=(i.position.x/this.worldSize+.5)*512,n=(i.position.z/this.worldSize+.5)*512;s.fillStyle=i.discovered?"#ffeb3b":"#666666",s.beginPath(),s.arc(a,n,5,0,Math.PI*2),s.fill()}),t}update(e){this.gameEngine.player&&(this.updateChunks(this.gameEngine.player.mesh.position),this.discoverPOI(this.gameEngine.player.mesh.position))}dispose(){this.chunks.forEach((e,t)=>{this.unloadChunk(t)}),this.terrain&&(this.scene.remove(this.terrain),this.terrain.geometry&&this.terrain.geometry.dispose(),this.terrain.material&&this.terrain.material.dispose()),console.log("🌍 Open World System disposed")}}class Ds{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.renderer=e.renderer,this.volumetricLights=[],this.godRays=[],this.settings={enabled:!0,quality:"high",samples:100,decay:.95,density:.5,weight:.4,exposure:.6},this.init()}init(){this.setupVolumetricFog(),this.createGodRays(),this.setupLightShafts(),console.log("☀️ Volumetric Lighting System initialized")}setupVolumetricFog(){this.scene.fog=new ve(1714247,.001),this.fogMaterial=new O({uniforms:{fogColor:{value:new y(1714247)},fogDensity:{value:.001},fogHeight:{value:50},time:{value:0}},vertexShader:`
                varying vec3 vWorldPosition;
                varying float vHeight;
                
                void main() {
                    vec4 worldPosition = modelMatrix * vec4(position, 1.0);
                    vWorldPosition = worldPosition.xyz;
                    vHeight = worldPosition.y;
                    gl_Position = projectionMatrix * viewMatrix * worldPosition;
                }
            `,fragmentShader:`
                uniform vec3 fogColor;
                uniform float fogDensity;
                uniform float fogHeight;
                uniform float time;
                
                varying vec3 vWorldPosition;
                varying float vHeight;
                
                void main() {
                    float depth = gl_FragCoord.z / gl_FragCoord.w;
                    float heightFactor = exp(-max(0.0, vHeight - fogHeight) * 0.05);
                    float fogFactor = 1.0 - exp(-fogDensity * depth * heightFactor);
                    
                    // Add animated noise for moving fog
                    float noise = sin(vWorldPosition.x * 0.1 + time) * 
                                 cos(vWorldPosition.z * 0.1 + time * 0.5) * 0.1;
                    fogFactor += noise * heightFactor;
                    
                    gl_FragColor = vec4(fogColor, clamp(fogFactor, 0.0, 1.0));
                }
            `,transparent:!0,depthWrite:!1,blending:k})}createGodRays(){const t=new $(2,100);for(let s=0;s<8;s++){const i=s/8*Math.PI*2,a=new O({uniforms:{sunColor:{value:new y(16772778)},opacity:{value:.1},time:{value:0},offset:{value:s*.5}},vertexShader:`
                    varying vec2 vUv;
                    
                    void main() {
                        vUv = uv;
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                    }
                `,fragmentShader:`
                    uniform vec3 sunColor;
                    uniform float opacity;
                    uniform float time;
                    uniform float offset;
                    
                    varying vec2 vUv;
                    
                    void main() {
                        float dist = abs(vUv.x - 0.5);
                        float alpha = (1.0 - dist * 2.0) * opacity;
                        
                        // Animate intensity
                        alpha *= 0.7 + 0.3 * sin(time * 2.0 + offset);
                        
                        // Fade with distance
                        alpha *= (1.0 - vUv.y * 0.5);
                        
                        gl_FragColor = vec4(sunColor, alpha);
                    }
                `,transparent:!0,depthWrite:!1,blending:k,side:J}),n=new d(t,a);n.rotation.y=i,n.position.y=50,this.godRays.push(n),this.scene.add(n)}}setupLightShafts(){this.lightShaftMaterial=new O({uniforms:{lightPosition:{value:new v(0,10,0)},lightColor:{value:new y(16777215)},intensity:{value:1},coneAngle:{value:Math.PI/4},time:{value:0}},vertexShader:`
                varying vec3 vWorldPosition;
                varying vec3 vNormal;
                
                void main() {
                    vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;
                    vNormal = normalize((modelMatrix * vec4(normal, 0.0)).xyz);
                    gl_Position = projectionMatrix * viewMatrix * vec4(vWorldPosition, 1.0);
                }
            `,fragmentShader:`
                uniform vec3 lightPosition;
                uniform vec3 lightColor;
                uniform float intensity;
                uniform float coneAngle;
                uniform float time;
                
                varying vec3 vWorldPosition;
                varying vec3 vNormal;
                
                void main() {
                    vec3 lightDir = normalize(lightPosition - vWorldPosition);
                    float dist = length(lightPosition - vWorldPosition);
                    
                    // Cone falloff
                    float angle = acos(dot(lightDir, vec3(0, -1, 0)));
                    float coneFalloff = smoothstep(coneAngle, 0.0, angle);
                    
                    // Distance falloff
                    float distFalloff = 1.0 / (1.0 + dist * 0.1);
                    
                    // Add noise for volumetric effect
                    float noise = sin(vWorldPosition.x * 5.0 + time) * 
                                 cos(vWorldPosition.z * 5.0 + time * 0.7) * 0.1;
                    
                    float alpha = intensity * coneFalloff * distFalloff * (0.3 + noise);
                    
                    gl_FragColor = vec4(lightColor, alpha);
                }
            `,transparent:!0,depthWrite:!1,blending:k})}addVolumetricLight(e,t=16777215,s=1,i=10){const a={position:e.clone(),color:new y(t),intensity:s,radius:i,mesh:null},n=new x(0,i,i*2,16,1,!0),o=this.lightShaftMaterial.clone();o.uniforms.lightPosition.value=e.clone(),o.uniforms.lightColor.value=new y(t),o.uniforms.intensity.value=s*.5;const r=new d(n,o);return r.position.copy(e),r.position.y-=i,this.scene.add(r),a.mesh=r,this.volumetricLights.push(a),a}removeVolumetricLight(e){const t=this.volumetricLights.indexOf(e);t!==-1&&(this.volumetricLights.splice(t,1),e.mesh&&(this.scene.remove(e.mesh),e.mesh.geometry&&e.mesh.geometry.dispose(),e.mesh.material&&e.mesh.material.dispose()))}setGodRaysIntensity(e){this.godRays.forEach(t=>{t.material.uniforms.opacity.value=e*.1})}setGodRaysColor(e){const t=new y(e);this.godRays.forEach(s=>{s.material.uniforms.sunColor.value=t})}updateGodRaysPosition(e){this.godRays.forEach(t=>{t.position.copy(e),t.lookAt(this.camera.position)})}setQuality(e){switch(this.settings.quality=e,e){case"low":this.settings.samples=50,this.settings.decay=.9,this.settings.density=.3;break;case"medium":this.settings.samples=75,this.settings.decay=.93,this.settings.density=.4;break;case"high":this.settings.samples=100,this.settings.decay=.95,this.settings.density=.5;break;case"ultra":this.settings.samples=150,this.settings.decay=.97,this.settings.density=.6;break}console.log(`☀️ Volumetric lighting quality set to: ${e}`)}update(e){if(!this.settings.enabled)return;const t=Date.now()*.001;if(this.godRays.forEach(s=>{s.material.uniforms.time.value=t}),this.volumetricLights.forEach(s=>{s.mesh&&s.mesh.material.uniforms&&(s.mesh.material.uniforms.time.value=t)}),this.fogMaterial&&(this.fogMaterial.uniforms.time.value=t),this.gameEngine.dayNightCycleSystem&&this.gameEngine.dayNightCycleSystem.sunLight){const s=this.gameEngine.dayNightCycleSystem.sunLight.position.clone();this.updateGodRaysPosition(s);const i=s.y,a=Math.max(0,i/200);this.setGodRaysIntensity(a)}}dispose(){this.volumetricLights.forEach(e=>{this.removeVolumetricLight(e)}),this.godRays.forEach(e=>{this.scene.remove(e),e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()}),console.log("☀️ Volumetric Lighting System disposed")}}class As{constructor(e){this.gameEngine=e,this.camera=e.camera,this.scene=e.scene,this.modes={THIRD_PERSON:"third_person",FIRST_PERSON:"first_person",CINEMATIC:"cinematic",ORBIT:"orbit",FOLLOW:"follow",FIXED:"fixed"},this.currentMode=this.modes.THIRD_PERSON,this.settings={thirdPersonDistance:10,thirdPersonHeight:5,thirdPersonAngle:Math.PI/6,smoothness:.1,rotationSmoothness:.15,fovBase:75,fovTarget:75,fovSpeed:2,shakeIntensity:0,shakeDecay:.9,cinematicPath:[],cinematicIndex:0,cinematicSpeed:1},this.targetPosition=new v,this.targetLookAt=new v,this.currentVelocity=new v,this.cameraRig=new _,this.scene.add(this.cameraRig),this.init()}init(){this.setupCameraEffects(),console.log("🎥 Cinematic Camera System initialized")}setupCameraEffects(){this.motionBlurEnabled=!1,this.previousCameraPosition=this.camera.position.clone(),this.previousCameraRotation=this.camera.rotation.clone()}setMode(e,t={}){switch(this.currentMode=e,e){case this.modes.CINEMATIC:t.path&&(this.settings.cinematicPath=t.path,this.settings.cinematicIndex=0);break;case this.modes.FIRST_PERSON:this.settings.thirdPersonDistance=0;break;case this.modes.THIRD_PERSON:this.settings.thirdPersonDistance=10;break}console.log(`🎥 Camera mode: ${e}`)}updateThirdPerson(e,t){const s=new v(0,this.settings.thirdPersonHeight,this.settings.thirdPersonDistance);e.rotation&&s.applyEuler(new Mt(this.settings.thirdPersonAngle,e.rotation.y,0)),this.targetPosition.copy(e.position).add(s),this.targetLookAt.copy(e.position),this.camera.position.lerp(this.targetPosition,this.settings.smoothness);const i=new v;this.camera.getWorldDirection(i),i.multiplyScalar(10).add(this.camera.position),i.lerp(this.targetLookAt,this.settings.rotationSmoothness),this.camera.lookAt(i)}updateFirstPerson(e,t){this.targetPosition.copy(e.position),this.targetPosition.y+=1.6,this.camera.position.lerp(this.targetPosition,this.settings.smoothness),e.rotation&&(this.camera.rotation.y=e.rotation.y)}updateOrbit(e,t){const s=Date.now()*.001,i=this.settings.thirdPersonDistance;this.camera.position.x=e.position.x+Math.cos(s*.5)*i,this.camera.position.z=e.position.z+Math.sin(s*.5)*i,this.camera.position.y=e.position.y+this.settings.thirdPersonHeight,this.camera.lookAt(e.position)}updateCinematic(e){if(this.settings.cinematicPath.length===0)return;const t=this.settings.cinematicPath,s=this.settings.cinematicSpeed*e;this.settings.cinematicIndex+=s,this.settings.cinematicIndex>=t.length-1&&(this.settings.cinematicIndex=0);const i=Math.floor(this.settings.cinematicIndex),a=Math.min(i+1,t.length-1),n=this.settings.cinematicIndex-i,o=t[i],r=t[a];if(this.camera.position.lerpVectors(o.position,r.position,n),o.lookAt&&r.lookAt){const l=new v().lerpVectors(o.lookAt,r.lookAt,n);this.camera.lookAt(l)}}createCinematicPath(e,t=null){const s=[];for(let i=0;i<e.length;i++)s.push({position:e[i].clone(),lookAt:t?t[i].clone():e[i].clone()});return s}shake(e,t=.3){this.settings.shakeIntensity=e,this.shakeTimer=t}updateShake(e){if(this.settings.shakeIntensity>.001){const t=this.settings.shakeIntensity;this.camera.position.x+=(Math.random()-.5)*t,this.camera.position.y+=(Math.random()-.5)*t,this.camera.position.z+=(Math.random()-.5)*t,this.settings.shakeIntensity*=this.settings.shakeDecay,this.shakeTimer!==void 0&&(this.shakeTimer-=e,this.shakeTimer<=0&&(this.settings.shakeIntensity=0))}}setFOV(e,t=!0){t?this.settings.fovTarget=e:(this.camera.fov=e,this.camera.updateProjectionMatrix())}updateFOV(e){if(Math.abs(this.camera.fov-this.settings.fovTarget)>.1){const t=this.settings.fovTarget-this.camera.fov;this.camera.fov+=t*this.settings.fovSpeed*e,this.camera.updateProjectionMatrix()}}zoomIn(e=10){this.setFOV(Math.max(30,this.camera.fov-e))}zoomOut(e=10){this.setFOV(Math.min(120,this.camera.fov+e))}resetZoom(){this.setFOV(this.settings.fovBase)}dollyZoom(e,t=1){const s=this.camera.fov,i=this.settings.thirdPersonDistance,a=Math.tan(e*Math.PI/180/2)/Math.tan(s*Math.PI/180/2),n=i*a;let o=0;const r=l=>{o+=l;const c=Math.min(o/t,1);this.camera.fov=s+(e-s)*c,this.settings.thirdPersonDistance=i+(n-i)*c,this.camera.updateProjectionMatrix(),c<1&&requestAnimationFrame(()=>r(l))};r(0)}panTo(e,t=2){const s=this.camera.position.clone();let i=0;const a=n=>{i+=n;const o=Math.min(i/t,1),r=o<.5?2*o*o:-1+(4-2*o)*o;this.camera.position.lerpVectors(s,e,r),o<1&&requestAnimationFrame(()=>a(n))};a(0)}lookAtSmooth(e,t=1){const s=this.camera.quaternion.clone(),i=this.camera.clone();i.lookAt(e);const a=i.quaternion.clone();let n=0;const o=r=>{n+=r;const l=Math.min(n/t,1);this.camera.quaternion.slerpQuaternions(s,a,l),l<1&&requestAnimationFrame(()=>o(r))};o(0)}update(e){const t=this.gameEngine.player?.mesh;if(t){switch(this.currentMode){case this.modes.THIRD_PERSON:this.updateThirdPerson(t,e);break;case this.modes.FIRST_PERSON:this.updateFirstPerson(t,e);break;case this.modes.ORBIT:this.updateOrbit(t,e);break;case this.modes.CINEMATIC:this.updateCinematic(e);break;case this.modes.FOLLOW:this.updateThirdPerson(t,e);break}this.updateShake(e),this.updateFOV(e),this.previousCameraPosition.copy(this.camera.position),this.previousCameraRotation.copy(this.camera.rotation)}}dispose(){this.cameraRig&&this.scene.remove(this.cameraRig),console.log("🎥 Cinematic Camera System disposed")}}class zs{constructor(e){this.gameEngine=e,this.scene=e.scene,this.world=new At,this.world.gravity.set(0,-9.82,0),this.world.broadphase=new zt,this.world.solver.iterations=10,this.world.solver.tolerance=.1,this.collisionGroups={PLAYER:1,ENEMY:2,TERRAIN:4,PROJECTILE:8,INTERACTIVE:16,TRIGGER:32},this.bodies=new Map,this.meshes=new Map,this.materials={default:new ie("default"),player:new ie("player"),terrain:new ie("terrain"),bouncy:new ie("bouncy"),slippery:new ie("slippery")},this.setupMaterialInteractions(),this.init()}init(){this.createGroundPlane(),console.log("⚛️ Physics System initialized")}setupMaterialInteractions(){const e=new Te(this.materials.player,this.materials.terrain,{friction:.4,restitution:0});this.world.addContactMaterial(e);const t=new Te(this.materials.bouncy,this.materials.default,{friction:.1,restitution:.9});this.world.addContactMaterial(t);const s=new Te(this.materials.slippery,this.materials.default,{friction:.01,restitution:.3});this.world.addContactMaterial(s)}createGroundPlane(){const e=new Ye,t=new Pe({mass:0,shape:e,material:this.materials.terrain});t.quaternion.setFromEuler(-Math.PI/2,0,0),this.world.addBody(t)}addRigidBody(e,t={}){const{mass:s=1,shape:i="box",material:a=this.materials.default,collisionGroup:n=this.collisionGroups.INTERACTIVE,collisionMask:o=-1,fixed:r=!1}=t;let l;switch(i){case"box":const m=new Ee().setFromObject(e),u=new v;m.getSize(u),l=new ge(new B(u.x/2,u.y/2,u.z/2));break;case"sphere":const p=new Ct;new Ee().setFromObject(e).getBoundingSphere(p),l=new Xe(p.radius);break;case"cylinder":const S=new Ee().setFromObject(e),E=new v;S.getSize(E),l=new Rt(E.x/2,E.x/2,E.y,8);break;case"plane":l=new Ye;break;default:l=new ge(new B(.5,.5,.5))}const c=new Pe({mass:r?0:s,shape:l,material:a,collisionFilterGroup:n,collisionFilterMask:o});return c.position.copy(e.position),c.quaternion.copy(e.quaternion),this.world.addBody(c),this.bodies.set(e,c),this.meshes.set(c,e),c}removeRigidBody(e){const t=this.bodies.get(e);t&&(this.world.removeBody(t),this.bodies.delete(e),this.meshes.delete(t))}applyForce(e,t,s=null){const i=this.bodies.get(e);if(i){const a=new B(t.x,t.y,t.z);if(s){const n=new B(s.x,s.y,s.z);i.applyForce(a,n)}else i.applyForce(a)}}applyImpulse(e,t,s=null){const i=this.bodies.get(e);if(i){const a=new B(t.x,t.y,t.z);if(s){const n=new B(s.x,s.y,s.z);i.applyImpulse(a,n)}else i.applyImpulse(a)}}setVelocity(e,t){const s=this.bodies.get(e);s&&s.velocity.set(t.x,t.y,t.z)}getVelocity(e){const t=this.bodies.get(e);return t?new v(t.velocity.x,t.velocity.y,t.velocity.z):new v}raycast(e,t,s={}){const{collisionGroup:i=-1,skipBackfaces:a=!0,checkCollisionResponse:n=!0}=s,o=new B(e.x,e.y,e.z),r=new B(t.x,t.y,t.z),l=new Ft;return this.world.raycastClosest(o,r,{collisionFilterGroup:i,skipBackfaces:a,checkCollisionResponse:n},l),l.hasHit?{hit:!0,point:new v(l.hitPointWorld.x,l.hitPointWorld.y,l.hitPointWorld.z),normal:new v(l.hitNormalWorld.x,l.hitNormalWorld.y,l.hitNormalWorld.z),distance:l.distance,body:l.body,mesh:this.meshes.get(l.body)}:{hit:!1}}sphereCast(e,t,s={}){const i=[],a=new B(e.x,e.y,e.z);return this.world.bodies.forEach(n=>{const o=n.position.distanceTo(a);o<=t&&i.push({body:n,mesh:this.meshes.get(n),distance:o})}),i}createTrigger(e,t,s){const i=new ge(new B(t.x/2,t.y/2,t.z/2)),a=new Pe({mass:0,shape:i,isTrigger:!0,collisionResponse:!1,collisionFilterGroup:this.collisionGroups.TRIGGER});return a.position.set(e.x,e.y,e.z),a.addEventListener("collide",n=>{const o=this.meshes.get(n.body);o&&s&&s(o,n)}),this.world.addBody(a),a}createExplosion(e,t,s){this.sphereCast(e,s).forEach(a=>{if(a.body&&a.body.mass>0){const n=new v().subVectors(new v(a.body.position.x,a.body.position.y,a.body.position.z),e).normalize(),o=1-a.distance/s,r=n.multiplyScalar(t*o);this.applyImpulse(a.mesh,r)}}),this.gameEngine.advancedParticleSystem&&this.gameEngine.advancedParticleSystem.createExplosionEffect(e,16737792,s)}enableDebugRenderer(e=!0){e&&!this.debugRenderer?(this.debugMeshes=[],this.world.bodies.forEach(t=>{let s;if(t.shapes[0]instanceof ge){const i=t.shapes[0];s=new C(i.halfExtents.x*2,i.halfExtents.y*2,i.halfExtents.z*2)}else if(t.shapes[0]instanceof Xe){const i=t.shapes[0];s=new f(i.radius,8,8)}if(s){const i=new D({color:65280,wireframe:!0}),a=new d(s,i);this.scene.add(a),this.debugMeshes.push({mesh:a,body:t})}})):!e&&this.debugMeshes&&(this.debugMeshes.forEach(({mesh:t})=>{this.scene.remove(t),t.geometry&&t.geometry.dispose(),t.material&&t.material.dispose()}),this.debugMeshes=[])}update(e){this.world.step(1/60,e,3),this.bodies.forEach((t,s)=>{s.position.copy(t.position),s.quaternion.copy(t.quaternion)}),this.debugMeshes&&this.debugMeshes.forEach(({mesh:t,body:s})=>{t.position.copy(s.position),t.quaternion.copy(s.quaternion)})}dispose(){this.bodies.forEach(e=>{this.world.removeBody(e)}),this.bodies.clear(),this.meshes.clear(),this.debugMeshes&&this.debugMeshes.forEach(({mesh:e})=>{this.scene.remove(e),e.geometry&&e.geometry.dispose(),e.material&&e.material.dispose()}),console.log("⚛️ Physics System disposed")}}class Rs{constructor(e){this.gameEngine=e,this.classes={warrior:{name:"Warrior",description:"Master of melee combat with high defense",icon:"⚔️",baseStats:{hp:150,mp:50,attack:20,defense:15,speed:8},abilities:[{name:"Power Strike",damage:30,cost:10,cooldown:3},{name:"Shield Bash",damage:20,cost:15,cooldown:5,stun:2},{name:"Whirlwind",damage:40,cost:25,cooldown:10,aoe:!0},{name:"Battle Rage",damage:0,cost:20,cooldown:15,buff:"attack",duration:10}],equipment:["sword","shield","heavy_armor"]},mage:{name:"Mage",description:"Powerful spellcaster with devastating magic",icon:"🔮",baseStats:{hp:80,mp:200,attack:10,defense:5,speed:10},abilities:[{name:"Fireball",damage:45,cost:20,cooldown:2,element:"fire"},{name:"Ice Lance",damage:35,cost:15,cooldown:3,element:"ice",slow:3},{name:"Lightning Bolt",damage:50,cost:30,cooldown:5,element:"lightning"},{name:"Arcane Explosion",damage:60,cost:50,cooldown:12,aoe:!0}],equipment:["staff","robe","hat"]},rogue:{name:"Rogue",description:"Swift assassin with high critical damage",icon:"🗡️",baseStats:{hp:100,mp:100,attack:15,defense:8,speed:15},abilities:[{name:"Backstab",damage:40,cost:15,cooldown:3,critBonus:2},{name:"Poison Blade",damage:25,cost:20,cooldown:5,dot:5,duration:6},{name:"Shadow Step",damage:0,cost:15,cooldown:8,teleport:10},{name:"Assassinate",damage:80,cost:40,cooldown:15,critBonus:3}],equipment:["dagger","dagger","light_armor"]},ranger:{name:"Ranger",description:"Skilled archer with nature magic",icon:"🏹",baseStats:{hp:110,mp:120,attack:18,defense:10,speed:12},abilities:[{name:"Piercing Arrow",damage:35,cost:10,cooldown:2,pierce:!0},{name:"Multi-Shot",damage:25,cost:20,cooldown:4,targets:3},{name:"Trap",damage:30,cost:15,cooldown:6,trap:!0},{name:"Call of the Wild",damage:0,cost:30,cooldown:20,summon:"beast"}],equipment:["bow","arrows","medium_armor"]},cleric:{name:"Cleric",description:"Holy healer with divine protection",icon:"✨",baseStats:{hp:120,mp:150,attack:12,defense:12,speed:9},abilities:[{name:"Heal",damage:-40,cost:20,cooldown:2,heal:!0},{name:"Holy Smite",damage:35,cost:15,cooldown:3,element:"holy"},{name:"Divine Shield",damage:0,cost:25,cooldown:10,shield:50,duration:5},{name:"Resurrection",damage:0,cost:50,cooldown:30,revive:!0}],equipment:["mace","shield","robe"]},necromancer:{name:"Necromancer",description:"Dark mage who commands the undead",icon:"💀",baseStats:{hp:90,mp:180,attack:12,defense:6,speed:9},abilities:[{name:"Life Drain",damage:30,cost:15,cooldown:3,lifesteal:.5},{name:"Raise Dead",damage:0,cost:30,cooldown:8,summon:"skeleton"},{name:"Curse",damage:20,cost:20,cooldown:5,debuff:"defense",duration:8},{name:"Death Nova",damage:55,cost:45,cooldown:12,aoe:!0,element:"dark"}],equipment:["staff","robe","tome"]}},this.currentClass=null,this.level=1,this.experience=0,this.experienceToNextLevel=100,this.init()}init(){console.log("👤 Character Class System initialized"),console.log(`Available classes: ${Object.keys(this.classes).length}`)}selectClass(e){if(!this.classes[e])return console.error(`Class ${e} not found`),!1;this.currentClass=e;const t=this.classes[e];return this.gameEngine.player&&(Object.assign(this.gameEngine.player.stats,t.baseStats),this.gameEngine.player.stats.maxHp=t.baseStats.hp,this.gameEngine.player.stats.maxMp=t.baseStats.mp),console.log(`✅ Selected class: ${t.name} ${t.icon}`),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Class Selected: ${t.name}`,"success",3e3),!0}getClassData(e){return this.classes[e]||null}getCurrentClassData(){return this.currentClass?this.classes[this.currentClass]:null}getAvailableAbilities(){const e=this.getCurrentClassData();return e?e.abilities.filter(t=>{const s=e.abilities.indexOf(t);return this.level>=s*5+1}):[]}useAbility(e){const t=this.getCurrentClassData();if(!t)return null;const s=t.abilities.find(i=>i.name===e);return s?this.gameEngine.player&&this.gameEngine.player.stats.mp<s.cost?(console.log(`Not enough MP for ${e}`),null):(this.gameEngine.player&&(this.gameEngine.player.stats.mp-=s.cost),s):null}addExperience(e){for(this.experience+=e;this.experience>=this.experienceToNextLevel;)this.levelUp()}levelUp(){this.level++,this.experience-=this.experienceToNextLevel,this.experienceToNextLevel=Math.floor(this.experienceToNextLevel*1.5);const e=this.getCurrentClassData();if(e&&this.gameEngine.player){const t=this.gameEngine.player;t.stats.maxHp+=Math.floor(e.baseStats.hp*.1),t.stats.maxMp+=Math.floor(e.baseStats.mp*.1),t.stats.attack+=Math.floor(e.baseStats.attack*.05),t.stats.defense+=Math.floor(e.baseStats.defense*.05),t.stats.hp=t.stats.maxHp,t.stats.mp=t.stats.maxMp}console.log(`🎉 Level Up! Now level ${this.level}`),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Level Up! You are now level ${this.level}`,"achievement",4e3)}getClassList(){return Object.keys(this.classes).map(e=>({id:e,...this.classes[e]}))}update(e){}dispose(){console.log("👤 Character Class System disposed")}}class Fs{constructor(e){this.gameEngine=e,this.scene=e.scene,this.npcs=[],this.npcTypes={merchant:{name:"Merchant",icon:"🏪",color:16766720,dialogues:["Welcome to my shop!","I have the finest wares in all the land.","Come back any time!","Looking to buy or sell?"],interactions:["trade","buy","sell"]},questGiver:{name:"Quest Giver",icon:"📜",color:4491519,dialogues:["I need your help, adventurer.","There is trouble in the nearby forest.","Will you accept this quest?","Thank you for your service!"],interactions:["quest","talk"]},guard:{name:"Guard",icon:"🛡️",color:16729156,dialogues:["Halt! State your business.","Move along, citizen.","Keep the peace.","No trouble on my watch!"],interactions:["talk","directions"]},innkeeper:{name:"Innkeeper",icon:"🍺",color:9127187,dialogues:["Welcome to the inn!","Rest here for the night?","Rooms are 50 gold per night.","Safe travels, friend."],interactions:["rest","talk","rent"]},blacksmith:{name:"Blacksmith",icon:"⚒️",color:6908265,dialogues:["Need something forged?","My hammer never rests!","Quality craftsmanship, guaranteed.","Come back when you need repairs."],interactions:["craft","repair","upgrade"]},healer:{name:"Healer",icon:"💚",color:5420936,dialogues:["Let me tend to your wounds.","Health is wealth, traveler.","You look better already!","May the spirits watch over you."],interactions:["heal","cure","bless"]},sage:{name:"Sage",icon:"🔮",color:10309341,dialogues:["The future is clouded...","Seek wisdom, not just power.","The answers you seek lie within.","Magic flows through all things."],interactions:["talk","train","enchant"]},villager:{name:"Villager",icon:"👥",color:11184810,dialogues:["Hello there!","Beautiful day, isn't it?","Have you heard the news?","Safe travels!"],interactions:["talk","gossip"]}},this.init()}init(){console.log("🧑 NPC System initialized")}createNPC(e,t,s=null){const i=this.npcTypes[e];if(!i)return console.error(`NPC type ${e} not found`),null;const a=new q(.5,1.5,8,16),n=new g({color:i.color,roughness:.7,metalness:.1}),o=new d(a,n);o.position.copy(t),o.castShadow=!0,o.receiveShadow=!0;const r=this.createIconSprite(i.icon);r.position.y=2.5,o.add(r),this.scene.add(o);const l={id:this.npcs.length,type:e,name:s||`${i.name} ${this.npcs.length+1}`,mesh:o,position:t.clone(),dialogues:[...i.dialogues],currentDialogue:0,interactions:[...i.interactions],isInteracting:!1,cooldown:0,wanderTarget:null,wanderCooldown:0};return this.npcs.push(l),console.log(`Created NPC: ${l.name} at (${t.x.toFixed(1)}, ${t.z.toFixed(1)})`),l}createIconSprite(e){const t=document.createElement("canvas");t.width=64,t.height=64;const s=t.getContext("2d");s.font="48px Arial",s.textAlign="center",s.textBaseline="middle",s.fillText(e,32,32);const i=new ne(t),a=new fe({map:i}),n=new ye(a);return n.scale.set(1,1,1),n}getNearbyNPCs(e,t=5){return this.npcs.filter(s=>s.position.distanceTo(e)<=t).sort((s,i)=>s.position.distanceTo(e)-i.position.distanceTo(e))}interact(e){if(e.isInteracting||e.cooldown>0)return null;e.isInteracting=!0;const t=e.dialogues[e.currentDialogue];return e.currentDialogue=(e.currentDialogue+1)%e.dialogues.length,this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`${e.name}: "${t}"`,"info",4e3),e.cooldown=2,setTimeout(()=>{e.isInteracting=!1},2e3),{npc:e,dialogue:t,interactions:e.interactions}}updateNPCBehavior(e,t){if(e.cooldown>0&&(e.cooldown-=t),e.wanderCooldown-=t,e.wanderCooldown<=0&&(e.wanderTarget=new v(e.position.x+(Math.random()-.5)*10,e.position.y,e.position.z+(Math.random()-.5)*10),e.wanderCooldown=5+Math.random()*5),e.wanderTarget){const s=new v().subVectors(e.wanderTarget,e.mesh.position).normalize();e.mesh.position.distanceTo(e.wanderTarget)>.5?(e.mesh.position.add(s.multiplyScalar(t*2)),e.mesh.lookAt(e.wanderTarget)):e.wanderTarget=null}}spawnNPCGroup(e,t,s=3,i=10){const a=[];for(let n=0;n<s;n++){const o=n/s*Math.PI*2,r=Math.random()*i,l=new v(t.x+Math.cos(o)*r,t.y,t.z+Math.sin(o)*r),c=this.createNPC(e,l);c&&a.push(c)}return console.log(`Spawned ${a.length} NPCs of type ${e}`),a}removeNPC(e){const t=this.npcs.indexOf(e);t!==-1&&(this.npcs.splice(t,1),e.mesh&&(this.scene.remove(e.mesh),e.mesh.geometry&&e.mesh.geometry.dispose(),e.mesh.material&&e.mesh.material.dispose()))}update(e){if(this.npcs.forEach(t=>{this.updateNPCBehavior(t,e)}),this.gameEngine.player){const t=this.getNearbyNPCs(this.gameEngine.player.mesh.position,3);t.length>0&&t[0].isInteracting}}dispose(){this.npcs.forEach(e=>this.removeNPC(e)),console.log("🧑 NPC System disposed")}}class Is{constructor(e){this.gameEngine=e,this.maxSlots=50,this.inventory={equipment:[],consumables:[],materials:[],questItems:[],misc:[]},this.equipped={weapon:null,offhand:null,helmet:null,chest:null,legs:null,boots:null,gloves:null,accessory1:null,accessory2:null},this.itemDatabase=this.createItemDatabase(),this.init()}init(){console.log("🎒 Advanced Inventory System initialized")}createItemDatabase(){return{iron_sword:{name:"Iron Sword",type:"weapon",slot:"weapon",rarity:"common",stats:{attack:10},value:100,icon:"⚔️"},steel_sword:{name:"Steel Sword",type:"weapon",slot:"weapon",rarity:"uncommon",stats:{attack:20},value:250,icon:"⚔️"},mage_staff:{name:"Mage Staff",type:"weapon",slot:"weapon",rarity:"uncommon",stats:{attack:15,mp:20},value:200,icon:"🪄"},leather_armor:{name:"Leather Armor",type:"equipment",slot:"chest",rarity:"common",stats:{defense:5},value:80,icon:"🥼"},iron_armor:{name:"Iron Armor",type:"equipment",slot:"chest",rarity:"uncommon",stats:{defense:12},value:200,icon:"🥼"},health_potion:{name:"Health Potion",type:"consumable",rarity:"common",effect:"heal",value:50,hp:50,stackable:!0,maxStack:99,icon:"🧪"},mana_potion:{name:"Mana Potion",type:"consumable",rarity:"common",effect:"restore_mana",value:40,mp:50,stackable:!0,maxStack:99,icon:"💙"},elixir:{name:"Elixir",type:"consumable",rarity:"rare",effect:"full_restore",value:200,stackable:!0,maxStack:10,icon:"🍷"},iron_ore:{name:"Iron Ore",type:"material",rarity:"common",value:10,stackable:!0,maxStack:999,icon:"🪨"},wood:{name:"Wood",type:"material",rarity:"common",value:5,stackable:!0,maxStack:999,icon:"🪵"},crystal:{name:"Magic Crystal",type:"material",rarity:"rare",value:100,stackable:!0,maxStack:99,icon:"💎"}}}addItem(e,t=1){const s=this.itemDatabase[e];if(!s)return console.error(`Item ${e} not found`),!1;const i=this.inventory[s.type]||this.inventory.misc;if(s.stackable){const n=i.find(o=>o.id===e);if(n)return n.quantity+=t,n.quantity=Math.min(n.quantity,s.maxStack||99),console.log(`Added ${t} ${s.name} (total: ${n.quantity})`),!0}const a={id:e,...s,quantity:s.stackable?t:1};return i.push(a),console.log(`Added ${s.name} to inventory`),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Obtained: ${s.icon} ${s.name}`,"success",2e3),!0}removeItem(e,t=1){for(const s in this.inventory){const i=this.inventory[s],a=i.findIndex(n=>n.id===e);if(a!==-1){const n=i[a];return n.stackable?(n.quantity-=t,n.quantity<=0&&i.splice(a,1)):i.splice(a,1),!0}}return!1}equipItem(e){let t=null;for(const s in this.inventory){const i=this.inventory[s].find(a=>a.id===e);if(i){t=i;break}}return!t||!t.slot?(console.error("Item cannot be equipped"),!1):(this.equipped[t.slot]&&this.unequipItem(t.slot),this.equipped[t.slot]=t,this.removeItem(e,1),this.applyEquipmentStats(),console.log(`Equipped ${t.name}`),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Equipped: ${t.icon} ${t.name}`,"success",2e3),!0)}unequipItem(e){const t=this.equipped[e];return t?(this.equipped[e]=null,this.addItem(t.id,1),this.applyEquipmentStats(),console.log(`Unequipped ${t.name}`),!0):!1}applyEquipmentStats(){if(!this.gameEngine.player)return;this.gameEngine.player;let e=0,t=0,s=0,i=0;for(const a in this.equipped){const n=this.equipped[a];n&&n.stats&&(e+=n.stats.attack||0,t+=n.stats.defense||0,s+=n.stats.hp||0,i+=n.stats.mp||0)}console.log(`Equipment bonuses: +${e} ATK, +${t} DEF`)}useConsumable(e){const t=this.inventory.consumables.find(s=>s.id===e);if(!t)return console.error("Consumable not found"),!1;if(this.gameEngine.player){const s=this.gameEngine.player;switch(t.effect){case"heal":s.stats.hp=Math.min(s.stats.hp+t.hp,s.stats.maxHp),console.log(`Restored ${t.hp} HP`);break;case"restore_mana":s.stats.mp=Math.min(s.stats.mp+t.mp,s.stats.maxMp),console.log(`Restored ${t.mp} MP`);break;case"full_restore":s.stats.hp=s.stats.maxHp,s.stats.mp=s.stats.maxMp,console.log("Fully restored HP and MP");break}}return this.removeItem(e,1),!0}getTotalItemCount(){let e=0;for(const t in this.inventory)e+=this.inventory[t].length;return e}getInventoryValue(){let e=0;for(const t in this.inventory)this.inventory[t].forEach(s=>{e+=s.value*(s.quantity||1)});return e}sortInventory(e){this.inventory[e]&&this.inventory[e].sort((t,s)=>{const i={common:0,uncommon:1,rare:2,epic:3,legendary:4},a=(i[s.rarity]||0)-(i[t.rarity]||0);return a!==0?a:t.name.localeCompare(s.name)})}update(e){}dispose(){console.log("🎒 Advanced Inventory System disposed")}}class Ls{constructor(e){this.gameEngine=e,this.scene=e.scene,this.camera=e.camera,this.renderer=e.renderer,this.enabled=!0,this.outlineEnabled=!0,this.celShadingEnabled=!0,this.settings={outlineThickness:.03,outlineColor:0,celShades:4,rimLightStrength:.5,rimLightColor:16777215,saturationBoost:1.2,brightnessAdjust:1.1},this.materialCache=new Map,this.init()}init(){this.setupCelShading(),this.setupOutlines(),console.log("🎨 Anime Style Rendering System initialized")}setupCelShading(){this.toonShader={vertexShader:`
                varying vec3 vNormal;
                varying vec3 vViewPosition;
                varying vec2 vUv;
                
                void main() {
                    vUv = uv;
                    vNormal = normalize(normalMatrix * normal);
                    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
                    vViewPosition = -mvPosition.xyz;
                    gl_Position = projectionMatrix * mvPosition;
                }
            `,fragmentShader:`
                uniform vec3 color;
                uniform float celShades;
                uniform float rimLightStrength;
                uniform vec3 rimLightColor;
                uniform float saturationBoost;
                uniform float brightnessAdjust;
                
                varying vec3 vNormal;
                varying vec3 vViewPosition;
                varying vec2 vUv;
                
                void main() {
                    // Calculate lighting
                    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));
                    float NdotL = max(dot(vNormal, lightDir), 0.0);
                    
                    // Cel shading - posterize the lighting
                    float shade = floor(NdotL * celShades) / celShades;
                    shade = max(shade, 0.3); // Minimum brightness
                    
                    // Rim lighting for anime effect
                    vec3 viewDir = normalize(vViewPosition);
                    float rimDot = 1.0 - max(dot(viewDir, vNormal), 0.0);
                    float rimIntensity = pow(rimDot, 3.0) * rimLightStrength;
                    
                    // Apply cel shading
                    vec3 shadedColor = color * shade;
                    
                    // Add rim light
                    shadedColor += rimLightColor * rimIntensity;
                    
                    // Boost saturation for vibrant anime colors
                    vec3 gray = vec3(dot(shadedColor, vec3(0.299, 0.587, 0.114)));
                    shadedColor = mix(gray, shadedColor, saturationBoost);
                    
                    // Adjust brightness
                    shadedColor *= brightnessAdjust;
                    
                    gl_FragColor = vec4(shadedColor, 1.0);
                }
            `}}setupOutlines(){this.outlineShader={vertexShader:`
                uniform float outlineThickness;
                
                void main() {
                    vec3 offset = normalize(normal) * outlineThickness;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position + offset, 1.0);
                }
            `,fragmentShader:`
                uniform vec3 outlineColor;
                
                void main() {
                    gl_FragColor = vec4(outlineColor, 1.0);
                }
            `}}createAnimeStyleMaterial(e,t={}){const{celShades:s=this.settings.celShades,rimLightStrength:i=this.settings.rimLightStrength,rimLightColor:a=this.settings.rimLightColor,saturationBoost:n=this.settings.saturationBoost,brightnessAdjust:o=this.settings.brightnessAdjust}=t;return new O({uniforms:{color:{value:new y(e)},celShades:{value:s},rimLightStrength:{value:i},rimLightColor:{value:new y(a)},saturationBoost:{value:n},brightnessAdjust:{value:o}},vertexShader:this.toonShader.vertexShader,fragmentShader:this.toonShader.fragmentShader})}createOutlineMaterial(){return new O({uniforms:{outlineThickness:{value:this.settings.outlineThickness},outlineColor:{value:new y(this.settings.outlineColor)}},vertexShader:this.outlineShader.vertexShader,fragmentShader:this.outlineShader.fragmentShader,side:X})}applyAnimeStyle(e,t){if(this.enabled){if(this.celShadingEnabled){const s=this.createAnimeStyleMaterial(t);e.material=s}if(this.outlineEnabled){const s=e.clone();s.material=this.createOutlineMaterial(),s.scale.multiplyScalar(1.02),e.add(s)}}}createMagicalEffect(e,t,s="sparkle"){const a=new M,n=[],o=[];for(let p=0;p<30;p++){const S=p/30*Math.PI*2,E=.5+Math.random()*.5;n.push(e.x+Math.cos(S)*E,e.y+Math.random()*1.5,e.z+Math.sin(S)*E);const A=new y(t);o.push(A.r*1.5,A.g*1.5,A.b*1.5)}a.setAttribute("position",new b(n,3)),a.setAttribute("color",new b(o,3));const r=new T({size:.3,vertexColors:!0,transparent:!0,opacity:1,blending:k,map:this.createStarTexture()}),l=new P(a,r);this.scene.add(l);const c=1.5,m=Date.now(),u=()=>{const p=(Date.now()-m)/1e3;p<c?(r.opacity=1-p/c,l.rotation.y+=.05,requestAnimationFrame(u)):(this.scene.remove(l),a&&a.dispose(),r&&r.dispose())};u()}createStarTexture(){const e=document.createElement("canvas");e.width=64,e.height=64;const t=e.getContext("2d");t.fillStyle="white",t.beginPath();for(let i=0;i<5;i++){const a=i*4*Math.PI/5-Math.PI/2,n=32+Math.cos(a)*30,o=32+Math.sin(a)*30;i===0?t.moveTo(n,o):t.lineTo(n,o)}return t.closePath(),t.fill(),new ne(e)}createAnimeCharacterMaterial(e=16767916){return this.createAnimeStyleMaterial(e,{celShades:3,rimLightStrength:.8,saturationBoost:1.3,brightnessAdjust:1.2})}applyGlowEffect(e,t=65535){const s=new O({uniforms:{glowColor:{value:new y(t)},intensity:{value:1}},vertexShader:`
                varying vec3 vNormal;
                void main() {
                    vNormal = normalize(normalMatrix * normal);
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,fragmentShader:`
                uniform vec3 glowColor;
                uniform float intensity;
                varying vec3 vNormal;
                
                void main() {
                    float fresnel = pow(1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0))), 3.0);
                    gl_FragColor = vec4(glowColor, fresnel * intensity);
                }
            `,transparent:!0,blending:k,side:X}),i=e.clone();i.material=s,i.scale.multiplyScalar(1.1),e.add(i)}setQuality(e){switch(e){case"low":this.settings.celShades=3,this.outlineEnabled=!1;break;case"medium":this.settings.celShades=4,this.outlineEnabled=!0,this.settings.outlineThickness=.02;break;case"high":this.settings.celShades=5,this.outlineEnabled=!0,this.settings.outlineThickness=.03;break;case"ultra":this.settings.celShades=6,this.outlineEnabled=!0,this.settings.outlineThickness=.04;break}console.log(`🎨 Anime rendering quality: ${e}`)}update(e){}dispose(){this.materialCache.forEach(e=>{e.dispose&&e.dispose()}),this.materialCache.clear(),console.log("🎨 Anime Style Rendering System disposed")}}class Bs{constructor(e){this.gameEngine=e,this.checks={allSystemsLoaded:!1,noErrors:!0,performanceAcceptable:!0,assetsLoaded:!1,gameplayTested:!1},this.errorLog=[],this.performanceMetrics={fps:60,averageFPS:60,memoryUsage:0,drawCalls:0},this.autoFixEnabled=!0,this.init()}init(){this.setupErrorHandling(),this.validateAllSystems(),this.setupPerformanceMonitoring(),console.log("✅ Production Readiness System initialized")}setupErrorHandling(){window.addEventListener("error",e=>{this.logError("Runtime Error",e.error),this.autoFixEnabled&&this.attemptAutoFix(e.error)}),window.addEventListener("unhandledrejection",e=>{this.logError("Promise Rejection",e.reason)})}validateAllSystems(){console.log("🔍 Validating all game systems...");const e=["scene","camera","renderer","player","weatherSystem","postProcessingSystem","advancedParticleSystem","dayNightCycleSystem","modernUISystem","environmentDetailsSystem","openWorldSystem","volumetricLightingSystem","cinematicCameraSystem","physicsSystem","characterClassSystem","npcSystem","advancedInventorySystem"];let t=!0;return e.forEach(s=>{this.gameEngine[s]?console.log(`✅ ${s} loaded`):(console.warn(`⚠️ System missing: ${s}`),t=!1)}),this.checks.allSystemsLoaded=t,t?console.log("✅ All systems validated successfully!"):console.warn("⚠️ Some systems are missing"),t}setupPerformanceMonitoring(){let e=performance.now(),t=0,s=0;const i=()=>{const a=performance.now(),n=a-e;if(n>0){const o=1e3/n;this.performanceMetrics.fps=Math.round(o),t+=o,s++,s>=60&&(this.performanceMetrics.averageFPS=Math.round(t/s),t=0,s=0),this.checks.performanceAcceptable=this.performanceMetrics.averageFPS>=30,this.checks.performanceAcceptable||this.optimizePerformance()}e=a,requestAnimationFrame(i)};i()}logError(e,t){const s={type:e,message:t.message||t.toString(),stack:t.stack||"No stack trace",timestamp:Date.now()};this.errorLog.push(s),this.checks.noErrors=!1,console.error(`❌ ${e}:`,t),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Error: ${s.message}`,"error",5e3)}attemptAutoFix(e){console.log("🔧 Attempting auto-fix..."),(e.message.includes("null")||e.message.includes("undefined"))&&(console.log("🔧 Reinitializing null systems..."),this.reinitializeFailedSystems()),e.message.includes("memory")&&(console.log("🔧 Clearing memory..."),this.clearUnusedResources())}reinitializeFailedSystems(){try{this.gameEngine.player||console.log("🔧 Reinitializing player...")}catch(e){console.error("Failed to reinitialize:",e)}}clearUnusedResources(){this.gameEngine.scene&&this.gameEngine.scene.traverse(e=>{e.geometry&&e.geometry.dispose,e.material&&e.material.dispose})}optimizePerformance(){this.gameEngine.postProcessingSystem&&this.gameEngine.postProcessingSystem.setQualityPreset("medium"),this.gameEngine.volumetricLightingSystem&&this.gameEngine.volumetricLightingSystem.setQuality("medium"),console.log("⚡ Performance optimizations applied")}runFullDiagnostic(){console.log("🔍 Running full diagnostic...");const e={systems:this.validateAllSystems(),errors:this.errorLog.length===0,performance:this.checks.performanceAcceptable,fps:this.performanceMetrics.averageFPS,memoryEstimate:this.estimateMemoryUsage(),timestamp:new Date().toISOString()};return console.log("📊 Diagnostic Report:",e),e}estimateMemoryUsage(){let e=0;return this.gameEngine.scene&&this.gameEngine.scene.traverse(()=>{e+=1}),`~${e} objects`}isProductionReady(){return this.checks.allSystemsLoaded&&this.checks.noErrors&&this.checks.performanceAcceptable}getReadinessReport(){const e=this.isProductionReady();return{ready:e,checks:{...this.checks},errors:this.errorLog.length,performance:this.performanceMetrics,status:e?"✅ Production Ready":"⚠️ Not Ready",recommendations:this.getRecommendations()}}getRecommendations(){const e=[];return this.checks.allSystemsLoaded||e.push("Initialize all required game systems"),this.checks.noErrors||e.push(`Fix ${this.errorLog.length} error(s)`),this.checks.performanceAcceptable||e.push("Optimize performance (target: 60 FPS)"),e.length===0&&e.push("All systems operational! 🎉"),e}autoPolish(){console.log("✨ Applying auto-polish..."),this.gameEngine.renderer&&(this.gameEngine.renderer.shadowMap.enabled=!0,this.gameEngine.renderer.shadowMap.type=THREE.PCFSoftShadowMap),this.gameEngine.advancedParticleSystem,this.gameEngine.postProcessingSystem&&(this.gameEngine.postProcessingSystem.enabled=!0),this.gameEngine.weatherSystem&&this.gameEngine.weatherSystem.setRandomWeather(),console.log("✨ Auto-polish complete!")}startProductionMode(){console.log("🚀 Starting Production Mode..."),console.log("Disabling debug features..."),this.autoPolish();const e=this.runFullDiagnostic();e.systems&&e.errors&&e.performance?(console.log("✅ PRODUCTION MODE ACTIVE"),console.log("🎮 Game is ready to play!"),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification("🎮 Game Ready! Welcome to Dynasty of Emberveil","achievement",5e3)):console.warn("⚠️ Some issues detected, but game is playable")}update(e){this.performanceMetrics.fps<30&&this.autoFixEnabled&&Date.now()%1e4<100&&this.optimizePerformance()}dispose(){console.log("✅ Production Readiness System disposed")}}class $s{constructor(e){this.gameEngine=e,this.players=new Map,this.localPlayer=null,this.chatMessages=[],this.maxChatMessages=100,this.socialFeatures={chat:!0,emotes:!0,trading:!0,grouping:!0,friendsList:!0},this.groups=new Map,this.friends=new Set,this.emotes=[{name:"wave",icon:"👋",animation:"wave"},{name:"dance",icon:"💃",animation:"dance"},{name:"laugh",icon:"😄",animation:"laugh"},{name:"bow",icon:"🙇",animation:"bow"},{name:"cheer",icon:"🎉",animation:"cheer"},{name:"sit",icon:"🪑",animation:"sit"}],this.init()}init(){this.setupChatUI(),this.setupSocialHub(),console.log("👥 Multiplayer Social System initialized")}setupChatUI(){const e=document.createElement("div");e.id="game-chat",e.style.cssText=`
            position: fixed;
            bottom: 20px;
            left: 20px;
            width: 400px;
            max-height: 300px;
            background: rgba(0, 0, 0, 0.7);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            padding: 10px;
            font-family: Arial, sans-serif;
            color: white;
            overflow-y: auto;
            z-index: 1000;
        `;const t=document.createElement("input");t.id="chat-input",t.type="text",t.placeholder="Press Enter to chat...",t.style.cssText=`
            width: 100%;
            padding: 8px;
            margin-top: 10px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            color: white;
            font-size: 14px;
        `,t.addEventListener("keypress",i=>{i.key==="Enter"&&t.value.trim()&&(this.sendChatMessage(t.value),t.value="")});const s=document.createElement("div");s.id="chat-messages",s.style.cssText=`
            max-height: 250px;
            overflow-y: auto;
            margin-bottom: 10px;
        `,e.appendChild(s),e.appendChild(t),document.body.appendChild(e),this.chatContainer=s,this.chatInput=t}setupSocialHub(){console.log("🏛️ Social hub initialized")}sendChatMessage(e,t="global"){const s={id:Date.now(),player:this.localPlayer?.name||"Player",message:e,channel:t,timestamp:new Date().toLocaleTimeString()};this.chatMessages.push(s),this.chatMessages.length>this.maxChatMessages&&this.chatMessages.shift(),this.displayChatMessage(s),console.log(`[${t}] ${s.player}: ${e}`)}displayChatMessage(e){if(!this.chatContainer)return;const t=document.createElement("div");t.style.cssText=`
            padding: 5px;
            margin: 2px 0;
            border-radius: 3px;
            background: rgba(255, 255, 255, 0.05);
        `;const s={global:"#4CAF50",party:"#2196F3",whisper:"#9C27B0",system:"#FFC107"}[e.channel]||"#fff",i=document.createElement("span");i.style.cssText=`color: ${s}; font-weight: bold;`,i.textContent=`[${e.channel}]`;const a=document.createElement("span");a.style.color="#FFD700",a.textContent=`${e.player}:`;const n=document.createElement("span");n.textContent=e.message;const o=document.createElement("span");o.style.cssText="color: #888; font-size: 11px; float: right;",o.textContent=e.timestamp,t.appendChild(i),t.appendChild(document.createTextNode(" ")),t.appendChild(a),t.appendChild(document.createTextNode(" ")),t.appendChild(n),t.appendChild(o),this.chatContainer.appendChild(t),this.chatContainer.scrollTop=this.chatContainer.scrollHeight}addPlayer(e,t){this.players.set(e,t),this.sendChatMessage(`${t.name} joined the game`,"system"),console.log(`👤 Player joined: ${t.name}`)}removePlayer(e){const t=this.players.get(e);t&&(this.sendChatMessage(`${t.name} left the game`,"system"),this.players.delete(e))}createGroup(e,t){const s={id:Date.now(),name:e,leader:t,members:[t],maxMembers:5,created:Date.now()};return this.groups.set(s.id,s),this.sendChatMessage(`Group "${e}" created!`,"system"),s}joinGroup(e,t){const s=this.groups.get(e);return s?s.members.length>=s.maxMembers?(this.sendChatMessage("Group is full!","system"),!1):(s.members.push(t),this.sendChatMessage(`You joined group "${s.name}"`,"party"),!0):!1}leaveGroup(e,t){const s=this.groups.get(e);if(!s)return!1;const i=s.members.indexOf(t);return i!==-1&&(s.members.splice(i,1),s.members.length===0&&this.groups.delete(e)),!0}performEmote(e){const t=this.emotes.find(s=>s.name===e);t&&(this.sendChatMessage(`${t.icon} *${e}*`,"system"),console.log(`Performing emote: ${e}`))}addFriend(e){this.friends.add(e),this.sendChatMessage("Friend added!","system")}removeFriend(e){this.friends.delete(e)}whisper(e,t){this.sendChatMessage(`[To ${e}] ${t}`,"whisper")}getOnlinePlayers(){return Array.from(this.players.values())}getNearbyPlayers(e,t=10){return this.getOnlinePlayers().filter(s=>{if(!s.position)return!1;const i=s.position.x-e.x,a=s.position.z-e.z;return Math.sqrt(i*i+a*a)<=t})}update(e){}dispose(){this.chatContainer&&this.chatContainer.parentElement&&this.chatContainer.parentElement.remove(),console.log("👥 Multiplayer Social System disposed")}}class Gs{constructor(e){this.gameEngine=e,this.scene=e.scene,this.waypoints=new Map,this.discoveredWaypoints=new Set,this.teleportCooldown=0,this.cooldownDuration=5,this.init()}init(){this.createDefaultWaypoints(),this.setupTeleportUI(),console.log("🌀 Teleportation System initialized")}createDefaultWaypoints(){this.addWaypoint("starting_zone",{name:"Starting Zone",description:"Where your adventure begins",position:new v(0,0,0),type:"safe_zone",icon:"🏁",alwaysDiscovered:!0}),this.addWaypoint("main_hub",{name:"Main Hub",description:"Central gathering point for adventurers",position:new v(100,0,100),type:"hub",icon:"🏰",alwaysDiscovered:!0}),this.addWaypoint("trading_post",{name:"Trading Post",description:"Buy and sell items",position:new v(-50,0,50),type:"hub",icon:"🏪",alwaysDiscovered:!1}),this.addWaypoint("training_grounds",{name:"Training Grounds",description:"Practice your skills",position:new v(50,0,-50),type:"safe_zone",icon:"⚔️",alwaysDiscovered:!1}),this.addWaypoint("dungeon_1",{name:"Crystal Caverns",description:"First dungeon entrance",position:new v(150,0,-100),type:"dungeon",icon:"⛰️",alwaysDiscovered:!1}),this.addWaypoint("boss_arena",{name:"Boss Arena",description:"Challenge powerful foes",position:new v(-150,0,-150),type:"arena",icon:"👹",alwaysDiscovered:!1}),console.log(`Created ${this.waypoints.size} waypoints`)}addWaypoint(e,t){const s={id:e,...t,discovered:t.alwaysDiscovered||!1};return this.waypoints.set(e,s),s.alwaysDiscovered&&this.discoveredWaypoints.add(e),this.createWaypointMarker(s),s}createWaypointMarker(e){const t=new x(.5,.5,3,16),s=new g({color:this.getWaypointColor(e.type),emissive:this.getWaypointColor(e.type),emissiveIntensity:.5,transparent:!0,opacity:.8}),i=new d(t,s);i.position.copy(e.position),i.position.y=1.5,i.castShadow=!0,this.scene.add(i),e.marker=i;const a=this.createIconSprite(e.icon);a.position.y=4,i.add(a)}createIconSprite(e){const t=document.createElement("canvas");t.width=64,t.height=64;const s=t.getContext("2d");s.font="48px Arial",s.textAlign="center",s.textBaseline="middle",s.fillText(e,32,32);const i=new ne(t),a=new fe({map:i}),n=new ye(a);return n.scale.set(2,2,1),n}getWaypointColor(e){return{safe_zone:5025616,hub:2201331,dungeon:10233776,arena:16007990,special:16771899}[e]||16777215}setupTeleportUI(){const e=document.createElement("button");e.id="teleport-button",e.innerHTML="🌀 Fast Travel",e.style.cssText=`
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            transition: transform 0.2s;
        `,e.addEventListener("mouseenter",()=>{e.style.transform="scale(1.05)"}),e.addEventListener("mouseleave",()=>{e.style.transform="scale(1)"}),e.addEventListener("click",()=>{this.showTeleportMenu()}),document.body.appendChild(e),this.teleportButton=e}showTeleportMenu(){const e=document.createElement("div");e.id="teleport-modal",e.style.cssText=`
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.95);
            border: 3px solid #667eea;
            border-radius: 15px;
            padding: 30px;
            z-index: 2000;
            max-width: 600px;
            max-height: 70vh;
            overflow-y: auto;
        `;const t=document.createElement("h2");t.textContent="🌀 Fast Travel Menu",t.style.cssText="color: white; text-align: center; margin-bottom: 20px;",e.appendChild(t);const s=Array.from(this.discoveredWaypoints).map(n=>this.waypoints.get(n)).filter(n=>n);if(s.length===0){const n=document.createElement("p");n.textContent="No waypoints discovered yet. Explore to find them!",n.style.cssText="color: #ccc; text-align: center;",e.appendChild(n)}else s.forEach(n=>{const o=document.createElement("div");o.style.cssText=`
                    background: rgba(255, 255, 255, 0.1);
                    padding: 15px;
                    margin: 10px 0;
                    border-radius: 10px;
                    cursor: pointer;
                    transition: background 0.2s;
                `,o.addEventListener("mouseenter",()=>{o.style.background="rgba(255, 255, 255, 0.2)"}),o.addEventListener("mouseleave",()=>{o.style.background="rgba(255, 255, 255, 0.1)"}),o.addEventListener("click",()=>{this.teleportTo(n.id),document.body.removeChild(e),document.body.removeChild(a)}),o.innerHTML=`
                    <div style="color: white;">
                        <span style="font-size: 24px;">${n.icon}</span>
                        <strong style="font-size: 18px; margin-left: 10px;">${n.name}</strong>
                        <p style="color: #ccc; margin: 5px 0 0 34px;">${n.description}</p>
                    </div>
                `,e.appendChild(o)});const i=document.createElement("button");i.textContent="Close",i.style.cssText=`
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            background: #f44336;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        `,i.addEventListener("click",()=>{document.body.removeChild(e),document.body.removeChild(a)}),e.appendChild(i);const a=document.createElement("div");a.style.cssText=`
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1999;
        `,a.addEventListener("click",()=>{document.body.removeChild(e),document.body.removeChild(a)}),document.body.appendChild(a),document.body.appendChild(e)}teleportTo(e){if(this.teleportCooldown>0)return this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Teleport on cooldown: ${Math.ceil(this.teleportCooldown)}s`,"warning",2e3),!1;const t=this.waypoints.get(e);return t?this.discoveredWaypoints.has(e)?(this.gameEngine.player&&this.gameEngine.player.mesh&&(this.gameEngine.player.mesh.position.copy(t.position),this.gameEngine.player.mesh.position.y=1),this.gameEngine.advancedParticleSystem&&this.gameEngine.advancedParticleSystem.createEffect(t.position,"magic",10233776,2),this.teleportCooldown=this.cooldownDuration,this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`Teleported to ${t.icon} ${t.name}`,"success",3e3),console.log(`🌀 Teleported to: ${t.name}`),!0):(console.log("Waypoint not discovered yet"),!1):!1}discoverWaypoint(e){const t=this.waypoints.get(e);return!t||this.discoveredWaypoints.has(e)?!1:(this.discoveredWaypoints.add(e),t.discovered=!0,this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`🌀 Waypoint Discovered: ${t.name}`,"achievement",4e3),console.log(`Discovered waypoint: ${t.name}`),!0)}checkNearbyWaypoints(e,t=5){this.waypoints.forEach((s,i)=>{!this.discoveredWaypoints.has(i)&&!s.alwaysDiscovered&&e.distanceTo(s.position)<=t&&this.discoverWaypoint(i)})}update(e){this.teleportCooldown>0&&(this.teleportCooldown-=e),this.gameEngine.player&&this.gameEngine.player.mesh&&this.checkNearbyWaypoints(this.gameEngine.player.mesh.position),this.waypoints.forEach(t=>{t.marker&&(t.marker.rotation.y+=e)})}dispose(){this.waypoints.forEach(e=>{e.marker&&(this.scene.remove(e.marker),e.marker.geometry&&e.marker.geometry.dispose(),e.marker.material&&e.marker.material.dispose())}),this.teleportButton&&this.teleportButton.parentElement&&this.teleportButton.parentElement.removeChild(this.teleportButton),console.log("🌀 Teleportation System disposed")}}class qs{constructor(e){this.gameEngine=e,this.scene=e.scene,this.tutorialSteps=[],this.currentStep=0,this.tutorialComplete=!1,this.startingPosition=new v(0,0,0),this.init()}init(){this.createStartingZone(),this.setupTutorialSteps(),this.createTutorialUI(),console.log("🎓 Starting Zone System initialized")}createStartingZone(){const e=new x(20,20,1,32),t=new g({color:5025616,roughness:.7,metalness:.2}),s=new d(e,t);s.position.copy(this.startingPosition),s.position.y=-.5,s.receiveShadow=!0,this.scene.add(s),this.createWelcomeSign(),this.createPracticeDummies(),this.createTutorialNPCs(),console.log("🏛️ Starting zone created")}createWelcomeSign(){const e=new C(.5,3,.5),t=new g({color:9127187}),s=new d(e,t);s.position.set(0,1.5,-8),this.scene.add(s);const i=new C(4,2,.2),a=new g({color:13789470}),n=new d(i,a);n.position.set(0,3.5,-8),this.scene.add(n);const o=document.createElement("canvas");o.width=512,o.height=256;const r=o.getContext("2d");r.fillStyle="#fff",r.font="bold 48px Arial",r.textAlign="center",r.fillText("Welcome!",256,80),r.font="32px Arial",r.fillText("Dynasty of Emberveil",256,140),r.font="24px Arial",r.fillText("Start Your Adventure",256,200);const l=new ne(o),c=new fe({map:l}),m=new ye(c);m.scale.set(4,2,1),m.position.set(0,3.5,-7.8),this.scene.add(m)}createPracticeDummies(){for(let e=0;e<3;e++){const t=e/3*Math.PI*2,s=10,i=new v(Math.cos(t)*s,0,Math.sin(t)*s);this.createDummy(i)}}createDummy(e){const t=new x(.5,.5,2,8),s=new g({color:13468991}),i=new d(t,s);i.position.copy(e),i.position.y=1,i.castShadow=!0,this.scene.add(i);const a=new f(.4,8,8),n=new g({color:13789470}),o=new d(a,n);o.position.copy(e),o.position.y=2.5,o.castShadow=!0,this.scene.add(o);const r=document.createElement("canvas");r.width=128,r.height=64;const l=r.getContext("2d");l.fillStyle="#fff",l.font="bold 32px Arial",l.textAlign="center",l.fillText("DUMMY",64,40);const c=new ne(r),m=new fe({map:c}),u=new ye(m);u.scale.set(2,1,1),u.position.copy(e),u.position.y=3.5,this.scene.add(u)}createTutorialNPCs(){if(!this.gameEngine.npcSystem)return;const e=new v(-5,0,-5);this.gameEngine.npcSystem.createNPC("sage",e,"Tutorial Guide");const t=new v(5,0,-5);this.gameEngine.npcSystem.createNPC("merchant",t,"Starter Merchant")}setupTutorialSteps(){this.tutorialSteps=[{title:"Welcome to Dynasty of Emberveil!",description:"Use WASD or Arrow Keys to move around",objective:"move",completed:!1},{title:"Camera Control",description:"Use your mouse to look around",objective:"camera",completed:!1},{title:"Combat Training",description:"Click on a practice dummy to attack",objective:"attack",completed:!1},{title:"Talk to NPCs",description:"Approach the Tutorial Guide and press E to interact",objective:"talk",completed:!1},{title:"Check Your Inventory",description:"Press I to open your inventory",objective:"inventory",completed:!1},{title:"Choose Your Class",description:"Select a character class to begin your journey",objective:"class",completed:!1},{title:"Ready for Adventure!",description:"You can now leave the starting zone and explore the world",objective:"complete",completed:!1}]}createTutorialUI(){const e=document.createElement("div");e.id="tutorial-ui",e.style.cssText=`
            position: fixed;
            top: 100px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.9);
            border: 3px solid #4CAF50;
            border-radius: 15px;
            padding: 20px;
            max-width: 500px;
            color: white;
            font-family: Arial, sans-serif;
            z-index: 1000;
            display: none;
        `,e.innerHTML=`
            <h2 id="tutorial-title" style="margin: 0 0 10px 0; color: #4CAF50;">Tutorial</h2>
            <p id="tutorial-description" style="margin: 0 0 15px 0; color: #ccc;"></p>
            <div style="background: rgba(255,255,255,0.1); height: 20px; border-radius: 10px; overflow: hidden;">
                <div id="tutorial-progress" style="background: #4CAF50; height: 100%; width: 0%; transition: width 0.3s;"></div>
            </div>
            <p id="tutorial-step-counter" style="margin: 10px 0 0 0; color: #888; text-align: center;"></p>
        `,document.body.appendChild(e),this.tutorialUI=e,this.showTutorialStep(0)}showTutorialStep(e){if(e>=this.tutorialSteps.length){this.completeTutorial();return}this.currentStep=e;const t=this.tutorialSteps[e];if(!this.tutorialUI)return;this.tutorialUI.style.display="block",document.getElementById("tutorial-title").textContent=t.title,document.getElementById("tutorial-description").textContent=t.description;const s=e/this.tutorialSteps.length*100;document.getElementById("tutorial-progress").style.width=`${s}%`,document.getElementById("tutorial-step-counter").textContent=`Step ${e+1} of ${this.tutorialSteps.length}`}completeTutorialStep(e){const t=this.tutorialSteps[this.currentStep];t&&t.objective===e&&!t.completed&&(t.completed=!0,this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification(`✅ ${t.title} Complete!`,"success",2e3),setTimeout(()=>{this.showTutorialStep(this.currentStep+1)},1500))}completeTutorial(){this.tutorialComplete=!0,this.tutorialUI&&(this.tutorialUI.style.display="none"),this.gameEngine.modernUISystem&&this.gameEngine.modernUISystem.showNotification("🎉 Tutorial Complete! Your adventure begins now!","achievement",5e3),console.log("✅ Tutorial completed")}spawnPlayerInStartingZone(){this.gameEngine.player&&this.gameEngine.player.mesh&&(this.gameEngine.player.mesh.position.copy(this.startingPosition),this.gameEngine.player.mesh.position.y=1,console.log("👤 Player spawned in starting zone"))}update(e){!this.tutorialComplete&&this.gameEngine.player}dispose(){this.tutorialUI&&this.tutorialUI.parentElement&&this.tutorialUI.parentElement.removeChild(this.tutorialUI),console.log("🎓 Starting Zone System disposed")}}class Os{constructor(e){this.scene=e,this.models=new Map,this.animations=new Map,this.modelCache=new Map,this.initializeModels()}initializeModels(){this.createHumanModels(),this.createMonsterModels(),this.createEquipmentModels()}createHumanModels(){[{name:"warrior",colors:{skin:16767916,hair:9127187,armor:4868682},build:"muscular"},{name:"mage",colors:{skin:16115411,hair:4915330,robe:6950317},build:"slender"},{name:"rogue",colors:{skin:16770244,hair:3100495,outfit:1710618},build:"agile"},{name:"ranger",colors:{skin:16032864,hair:2263842,gear:5597999},build:"athletic"},{name:"cleric",colors:{skin:16774625,hair:16766720,robes:16777215},build:"balanced"},{name:"necromancer",colors:{skin:15132410,hair:1842204,robes:3084079},build:"gaunt"}].forEach(t=>{this.models.set(t.name,this.createDetailedHuman(t))})}createDetailedHuman(e){const t=new _;t.name=e.name;const s=new f(.5,32,32),i=new w({color:e.colors.skin,shininess:20,flatShading:!1}),a=new d(s,i);a.position.y=1.6,a.castShadow=!0,t.add(a);const n=new f(.08,16,16),o=new D({color:7999}),r=new d(n,o);r.position.set(-.15,1.65,.4),t.add(r);const l=new d(n,o);l.position.set(.15,1.65,.4),t.add(l);const c=new f(.52,32,32),m=new w({color:e.colors.hair,shininess:60}),u=new d(c,m);u.position.y=1.7,u.scale.set(1,1.2,.9),u.castShadow=!0,t.add(u);const p=new x(.3,.4,1.2,32),S=new w({color:e.colors.armor||e.colors.robe||e.colors.outfit,shininess:30}),E=new d(p,S);E.position.y=.8,E.castShadow=!0,t.add(E);const A=new x(.12,.1,.8,16),N=new w({color:e.colors.skin,shininess:20}),I=new d(A,N);I.position.set(-.5,.9,0),I.rotation.z=Math.PI/6,I.castShadow=!0,t.add(I);const L=new d(A,N);L.position.set(.5,.9,0),L.rotation.z=-Math.PI/6,L.castShadow=!0,t.add(L);const j=new x(.15,.12,1,16),R=new w({color:e.colors.armor||e.colors.outfit||4868682,shininess:20}),G=new d(j,R);G.position.set(-.2,-.3,0),G.castShadow=!0,t.add(G);const V=new d(j,R);return V.position.set(.2,-.3,0),V.castShadow=!0,t.add(V),this.addClassDetails(t,e),t}addClassDetails(e,t){switch(t.name){case"warrior":const s=new C(.3,.2,.3),i=new w({color:9145227,metalness:.8}),a=new d(s,i);a.position.set(-.5,1.3,0),e.add(a);const n=new d(s,i);n.position.set(.5,1.3,0),e.add(n);break;case"mage":const o=new z(.4,.8,32),r=new w({color:4915330}),l=new d(o,r);l.position.y=2.3,e.add(l);const c=new x(.05,.05,2,16),m=new w({color:9127187}),u=new d(c,m);u.position.set(.6,.5,0),e.add(u);const p=new f(.15,32,32),S=new w({color:65535,emissive:35071,emissiveIntensity:.5}),E=new d(p,S);E.position.set(.6,1.5,0),e.add(E);break;case"rogue":const A=new z(.6,.5,32),N=new w({color:1710618}),I=new d(A,N);I.position.y=1.9,e.add(I);const L=new C(.05,.4,.05),j=new w({color:12632256}),R=new d(L,j);R.position.set(-.3,.5,.2),R.rotation.z=Math.PI/4,e.add(R);const G=new d(L,j);G.position.set(.3,.5,.2),G.rotation.z=-Math.PI/4,e.add(G);break;case"ranger":const V=new De(.5,.03,16,32,Math.PI),re=new w({color:9127187}),Q=new d(V,re);Q.position.set(-.7,.8,0),Q.rotation.z=Math.PI/2,e.add(Q);const le=new x(.1,.12,.5,16),ee=new w({color:6636321}),K=new d(le,ee);K.position.set(.3,.8,-.3),e.add(K);break;case"cleric":const ce=new De(.4,.03,16,32),de=new w({color:16766720,emissive:16755200,emissiveIntensity:.5}),Z=new d(ce,de);Z.position.y=2.3,Z.rotation.x=Math.PI/2,e.add(Z);const he=new C(.15,.3,.05),me=new w({color:16766720}),Y=new d(he,me);Y.position.set(0,.8,.45),e.add(Y);break;case"necromancer":const te=new f(.15,16,16),we=new w({color:15658734}),H=new d(te,we);H.position.set(.5,1,.3),e.add(H);const ue=new f(1.2,32,32),be=new w({color:1703962,transparent:!0,opacity:.2,emissive:4456516,emissiveIntensity:.3}),se=new d(ue,be);se.position.y=.8,e.add(se);break}}createMonsterModels(){[{name:"dragon",color:16711680,size:3},{name:"demon",color:9109504,size:2.5},{name:"skeleton",color:15658734,size:1.8},{name:"orc",color:2969622,size:2},{name:"goblin",color:7048739,size:1.2},{name:"elemental",color:65535,size:2},{name:"beast",color:9127187,size:1.5},{name:"undead",color:4868682,size:1.7}].forEach(t=>{this.models.set(`monster_${t.name}`,this.createDetailedMonster(t))})}createDetailedMonster(e){const t=new _;t.name=`monster_${e.name}`;const s=e.size;switch(e.name){case"dragon":const i=new f(1,32,32),a=new w({color:e.color,shininess:100}),n=new d(i,a);n.scale.set(1.5,1,2),t.add(n);const o=new z(.6,1.2,32),r=new d(o,a);r.position.set(0,.5,2),r.rotation.x=-Math.PI/2,t.add(r);const l=new C(2,.1,1.5),c=new d(l,a);c.position.set(-1.5,.5,0),c.rotation.z=Math.PI/6,t.add(c);const m=new d(l,a);m.position.set(1.5,.5,0),m.rotation.z=-Math.PI/6,t.add(m);const u=new z(.1,.5,16),p=new w({color:0}),S=new d(u,p);S.position.set(-.3,.9,2),t.add(S);const E=new d(u,p);E.position.set(.3,.9,2),t.add(E);const A=new f(.15,16,16),N=new w({color:16737792,emissive:16724736,emissiveIntensity:1}),I=new d(A,N);I.position.set(-.2,.7,2.5),t.add(I);const L=new d(A,N);L.position.set(.2,.7,2.5),t.add(L);break;case"demon":const j=new x(.6,.8,2,32),R=new w({color:e.color,shininess:50}),G=new d(j,R);t.add(G);const V=new f(.5,32,32),re=new d(V,R);re.position.y=1.5,t.add(re);const Q=new z(.15,1,16),le=new w({color:0}),ee=new d(Q,le);ee.position.set(-.4,2,0),ee.rotation.z=Math.PI/8,t.add(ee);const K=new d(Q,le);K.position.set(.4,2,0),K.rotation.z=-Math.PI/8,t.add(K);const ce=new f(.1,16,16),de=new w({color:16711680,emissive:16711680,emissiveIntensity:1}),Z=new d(ce,de);Z.position.set(-.2,1.6,.4),t.add(Z);const he=new d(ce,de);he.position.set(.2,1.6,.4),t.add(he);const me=new x(.2,.15,1.5,16),Y=new d(me,R);Y.position.set(-.8,.5,0),Y.rotation.z=Math.PI/4,t.add(Y);const te=new d(me,R);te.position.set(.8,.5,0),te.rotation.z=-Math.PI/4,t.add(te);break;case"skeleton":const we=new f(.4,32,32),H=new w({color:e.color,shininess:10}),ue=new d(we,H);ue.position.y=1.5,t.add(ue);const be=new x(.3,.4,1,32,1,!0),se=new d(be,H);se.position.y=.6,t.add(se);const ut=new x(.08,.08,1.5,16),Be=new d(ut,H);Be.position.y=.4,t.add(Be);const $e=new x(.06,.06,.8,16),xe=new d($e,H);xe.position.set(-.5,.8,0),xe.rotation.z=Math.PI/6,t.add(xe);const ke=new d($e,H);ke.position.set(.5,.8,0),ke.rotation.z=-Math.PI/6,t.add(ke);const Ge=new f(.08,16,16),qe=new w({color:65280,emissive:65280,emissiveIntensity:1}),Oe=new d(Ge,qe);Oe.position.set(-.15,1.55,.35),t.add(Oe);const He=new d(Ge,qe);He.position.set(.15,1.55,.35),t.add(He);break;default:const pt=new f(.6,32,32),We=new w({color:e.color,shininess:30}),Ue=new d(pt,We);Ue.scale.set(1,1.5,1),t.add(Ue);const gt=new f(.4,32,32),Ne=new d(gt,We);Ne.position.y=1.2,t.add(Ne);const je=new z(.08,.3,16),Ve=new w({color:16777215}),Se=new d(je,Ve);Se.position.set(-.15,1,.35),Se.rotation.x=Math.PI,t.add(Se);const Me=new d(je,Ve);Me.position.set(.15,1,.35),Me.rotation.x=Math.PI,t.add(Me)}return t.scale.multiplyScalar(s),t}createEquipmentModels(){this.models.set("sword_basic",this.createSword(12632256,9127187)),this.models.set("sword_fire",this.createSword(16711680,9109504)),this.models.set("sword_ice",this.createSword(65535,35071)),this.models.set("sword_legendary",this.createSword(16766720,16746496)),this.models.set("shield_basic",this.createShield(4868682)),this.models.set("shield_royal",this.createShield(255)),this.models.set("shield_legendary",this.createShield(16766720))}createSword(e,t){const s=new _,i=new C(.1,1.5,.05),a=new w({color:e,shininess:100,metalness:.8}),n=new d(i,a);n.position.y=.75,s.add(n);const o=new x(.08,.08,.4,16),r=new w({color:t,shininess:50}),l=new d(o,r);s.add(l);const c=new C(.5,.08,.08),m=new d(c,a);s.add(m);const u=new f(.1,16,16),p=new d(u,r);return p.position.y=-.2,s.add(p),s}createShield(e){const t=new _,s=new x(.6,.6,.1,32),i=new w({color:e,shininess:80,metalness:.6}),a=new d(s,i);a.rotation.x=Math.PI/2,t.add(a);const n=new f(.15,32,32),o=new w({color:16766720,shininess:100}),r=new d(n,o);return t.add(r),t}getModel(e){return this.models.get(e)?.clone()}createCharacterModel(e){return this.getModel(e)}createMonsterModel(e){return this.getModel(`monster_${e}`)}createWeaponModel(e){return this.getModel(e)}update(e){}dispose(){this.models.forEach(e=>{e.traverse(t=>{t.geometry&&t.geometry.dispose(),t.material&&(Array.isArray(t.material)?t.material.forEach(s=>s.dispose()):t.material.dispose())})}),this.models.clear()}}class Hs{constructor(){this.activeMenus=new Map,this.animations=[],this.initializeStyles(),this.createMainInterfaces()}initializeStyles(){const e=document.createElement("style");e.textContent=`
            .advanced-ui-container {
                position: fixed;
                pointer-events: none;
                z-index: 1000;
                font-family: 'Arial', sans-serif;
            }

            .advanced-ui-container * {
                pointer-events: auto;
            }

            .character-display-panel {
                position: fixed;
                top: 20px;
                left: 20px;
                width: 350px;
                background: linear-gradient(135deg, rgba(20, 20, 40, 0.95), rgba(40, 20, 60, 0.95));
                border: 3px solid #8b00ff;
                border-radius: 20px;
                padding: 20px;
                box-shadow: 0 0 30px rgba(139, 0, 255, 0.6), inset 0 0 20px rgba(139, 0, 255, 0.2);
                animation: slideInLeft 0.5s ease-out, glowPulse 2s infinite;
            }

            .character-portrait {
                width: 100px;
                height: 100px;
                border-radius: 50%;
                border: 4px solid #ffd700;
                background: linear-gradient(135deg, #4b0082, #8b00ff);
                margin: 0 auto 15px;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
                position: relative;
                overflow: hidden;
                animation: rotateBorder 3s linear infinite;
            }

            .character-portrait::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.3) 50%, transparent 70%);
                animation: shine 3s infinite;
            }

            .character-name {
                text-align: center;
                font-size: 24px;
                font-weight: bold;
                color: #ffd700;
                text-shadow: 0 0 10px #ff8800, 2px 2px 4px #000;
                margin-bottom: 10px;
                animation: textGlow 2s infinite;
            }

            .character-class {
                text-align: center;
                font-size: 16px;
                color: #00ffff;
                text-shadow: 0 0 8px #00aaaa;
                margin-bottom: 15px;
            }

            .stat-bar-container {
                margin: 10px 0;
                position: relative;
            }

            .stat-label {
                display: flex;
                justify-content: space-between;
                color: #ffffff;
                font-size: 14px;
                margin-bottom: 5px;
                text-shadow: 1px 1px 2px #000;
            }

            .stat-bar {
                height: 24px;
                background: linear-gradient(90deg, rgba(0,0,0,0.7), rgba(50,50,50,0.7));
                border-radius: 12px;
                border: 2px solid rgba(255,255,255,0.3);
                overflow: hidden;
                position: relative;
                box-shadow: inset 0 2px 4px rgba(0,0,0,0.5);
            }

            .stat-fill {
                height: 100%;
                transition: width 0.3s ease;
                position: relative;
                border-radius: 10px;
            }

            .stat-fill.hp {
                background: linear-gradient(90deg, #ff0000, #ff6600);
                box-shadow: 0 0 10px rgba(255, 0, 0, 0.8);
            }

            .stat-fill.mp {
                background: linear-gradient(90deg, #0000ff, #00ffff);
                box-shadow: 0 0 10px rgba(0, 0, 255, 0.8);
            }

            .stat-fill.exp {
                background: linear-gradient(90deg, #ffd700, #ffaa00);
                box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
            }

            .stat-fill::after {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 50%;
                background: linear-gradient(180deg, rgba(255,255,255,0.4), transparent);
                border-radius: 10px 10px 0 0;
            }

            .stat-text {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                color: #fff;
                font-weight: bold;
                text-shadow: 2px 2px 4px #000;
                font-size: 13px;
            }

            .ability-bar {
                display: flex;
                gap: 10px;
                margin-top: 15px;
                justify-content: center;
            }

            .ability-button {
                width: 60px;
                height: 60px;
                border-radius: 50%;
                border: 3px solid #8b00ff;
                background: linear-gradient(135deg, rgba(70, 0, 150, 0.9), rgba(139, 0, 255, 0.9));
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 24px;
                transition: all 0.2s;
                box-shadow: 0 4px 8px rgba(0,0,0,0.5), 0 0 15px rgba(139, 0, 255, 0.6);
                position: relative;
            }

            .ability-button:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 12px rgba(0,0,0,0.7), 0 0 25px rgba(139, 0, 255, 1);
                border-color: #ffd700;
            }

            .ability-button:active {
                transform: scale(0.95);
            }

            .ability-button.cooldown {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .ability-button.cooldown::after {
                content: attr(data-cooldown);
                position: absolute;
                color: #fff;
                font-size: 16px;
                font-weight: bold;
                text-shadow: 2px 2px 4px #000;
            }

            .popup-notification {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%) scale(0);
                background: linear-gradient(135deg, rgba(139, 0, 255, 0.95), rgba(255, 0, 139, 0.95));
                border: 4px solid #ffd700;
                border-radius: 30px;
                padding: 40px 60px;
                box-shadow: 0 0 50px rgba(255, 215, 0, 1), inset 0 0 30px rgba(255,255,255,0.3);
                z-index: 10000;
                animation: popupEnter 0.5s ease-out forwards;
                text-align: center;
            }

            .popup-title {
                font-size: 48px;
                font-weight: bold;
                color: #ffd700;
                text-shadow: 0 0 20px #ff8800, 4px 4px 8px #000;
                margin-bottom: 20px;
                animation: textFloat 2s infinite;
            }

            .popup-message {
                font-size: 24px;
                color: #ffffff;
                text-shadow: 2px 2px 4px #000;
            }

            .combat-text {
                position: fixed;
                font-size: 36px;
                font-weight: bold;
                text-shadow: 3px 3px 6px #000;
                animation: floatUp 2s ease-out forwards;
                pointer-events: none;
                z-index: 9999;
            }

            .combat-text.damage {
                color: #ff0000;
                text-shadow: 0 0 10px #ff0000, 3px 3px 6px #000;
            }

            .combat-text.heal {
                color: #00ff00;
                text-shadow: 0 0 10px #00ff00, 3px 3px 6px #000;
            }

            .combat-text.critical {
                color: #ff8800;
                font-size: 48px;
                text-shadow: 0 0 20px #ff8800, 4px 4px 8px #000;
            }

            .main-menu-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(135deg, rgba(20, 0, 40, 0.95), rgba(40, 0, 60, 0.95));
                z-index: 5000;
                display: flex;
                align-items: center;
                justify-content: center;
                animation: fadeIn 0.5s ease-out;
            }

            .main-menu-container {
                width: 800px;
                max-height: 80vh;
                background: linear-gradient(135deg, rgba(40, 20, 80, 0.98), rgba(80, 20, 100, 0.98));
                border: 5px solid #8b00ff;
                border-radius: 30px;
                padding: 40px;
                box-shadow: 0 0 60px rgba(139, 0, 255, 1), inset 0 0 40px rgba(139, 0, 255, 0.3);
                overflow-y: auto;
            }

            .menu-title {
                font-size: 56px;
                font-weight: bold;
                color: #ffd700;
                text-align: center;
                text-shadow: 0 0 30px #ff8800, 4px 4px 8px #000;
                margin-bottom: 30px;
                animation: textGlow 2s infinite;
            }

            .menu-tabs {
                display: flex;
                gap: 10px;
                margin-bottom: 30px;
                border-bottom: 3px solid #8b00ff;
                padding-bottom: 10px;
            }

            .menu-tab {
                flex: 1;
                padding: 15px;
                background: linear-gradient(135deg, rgba(70, 0, 150, 0.7), rgba(100, 0, 180, 0.7));
                border: 2px solid #8b00ff;
                border-radius: 15px 15px 0 0;
                color: #ffffff;
                font-size: 18px;
                font-weight: bold;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s;
                text-shadow: 2px 2px 4px #000;
            }

            .menu-tab:hover {
                background: linear-gradient(135deg, rgba(100, 0, 180, 0.9), rgba(139, 0, 255, 0.9));
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(139, 0, 255, 0.8);
            }

            .menu-tab.active {
                background: linear-gradient(135deg, rgba(139, 0, 255, 1), rgba(255, 0, 139, 1));
                border-color: #ffd700;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
            }

            .menu-content {
                padding: 20px;
                color: #ffffff;
            }

            .item-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
                gap: 15px;
            }

            .item-slot {
                width: 120px;
                height: 120px;
                border: 3px solid #8b00ff;
                border-radius: 15px;
                background: linear-gradient(135deg, rgba(50, 20, 80, 0.8), rgba(70, 20, 100, 0.8));
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                transition: all 0.3s;
                position: relative;
                box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
            }

            .item-slot:hover {
                transform: scale(1.05);
                border-color: #ffd700;
                box-shadow: 0 0 20px rgba(255, 215, 0, 0.8), inset 0 0 10px rgba(255,255,255,0.2);
            }

            .item-slot.legendary {
                border-color: #ffd700;
                box-shadow: 0 0 20px rgba(255, 215, 0, 1);
                animation: glowPulse 2s infinite;
            }

            .item-slot.epic {
                border-color: #a020f0;
                box-shadow: 0 0 15px rgba(160, 32, 240, 0.8);
            }

            .item-slot.rare {
                border-color: #0080ff;
                box-shadow: 0 0 10px rgba(0, 128, 255, 0.6);
            }

            .item-icon {
                font-size: 48px;
                filter: drop-shadow(0 0 5px rgba(255,255,255,0.5));
            }

            .item-count {
                position: absolute;
                bottom: 5px;
                right: 5px;
                background: rgba(0,0,0,0.8);
                color: #fff;
                padding: 2px 6px;
                border-radius: 8px;
                font-size: 12px;
                font-weight: bold;
            }

            .action-button {
                padding: 15px 40px;
                background: linear-gradient(135deg, #8b00ff, #ff00ff);
                border: 3px solid #ffd700;
                border-radius: 25px;
                color: #ffffff;
                font-size: 20px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s;
                text-shadow: 2px 2px 4px #000;
                box-shadow: 0 5px 15px rgba(139, 0, 255, 0.6);
                margin: 10px;
            }

            .action-button:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(139, 0, 255, 1);
                background: linear-gradient(135deg, #ff00ff, #ffd700);
            }

            .action-button:active {
                transform: translateY(-1px);
            }

            @keyframes slideInLeft {
                from {
                    transform: translateX(-100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }

            @keyframes glowPulse {
                0%, 100% {
                    box-shadow: 0 0 20px rgba(139, 0, 255, 0.6);
                }
                50% {
                    box-shadow: 0 0 40px rgba(139, 0, 255, 1);
                }
            }

            @keyframes rotateBorder {
                from {
                    transform: rotate(0deg);
                }
                to {
                    transform: rotate(360deg);
                }
            }

            @keyframes shine {
                from {
                    transform: rotate(0deg);
                }
                to {
                    transform: rotate(360deg);
                }
            }

            @keyframes textGlow {
                0%, 100% {
                    text-shadow: 0 0 10px #ff8800, 2px 2px 4px #000;
                }
                50% {
                    text-shadow: 0 0 30px #ff8800, 0 0 40px #ffd700, 2px 2px 4px #000;
                }
            }

            @keyframes popupEnter {
                0% {
                    transform: translate(-50%, -50%) scale(0) rotate(-180deg);
                    opacity: 0;
                }
                100% {
                    transform: translate(-50%, -50%) scale(1) rotate(0deg);
                    opacity: 1;
                }
            }

            @keyframes textFloat {
                0%, 100% {
                    transform: translateY(0);
                }
                50% {
                    transform: translateY(-10px);
                }
            }

            @keyframes floatUp {
                0% {
                    transform: translateY(0) scale(1);
                    opacity: 1;
                }
                100% {
                    transform: translateY(-100px) scale(1.5);
                    opacity: 0;
                }
            }

            @keyframes fadeIn {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }

            .particles-background {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 0;
                overflow: hidden;
            }

            .particle {
                position: absolute;
                width: 4px;
                height: 4px;
                background: radial-gradient(circle, rgba(139, 0, 255, 1), transparent);
                border-radius: 50%;
                animation: particleFloat 3s infinite ease-in-out;
            }

            @keyframes particleFloat {
                0%, 100% {
                    transform: translateY(0) translateX(0);
                    opacity: 0;
                }
                50% {
                    opacity: 1;
                }
            }
        `,document.head.appendChild(e)}createMainInterfaces(){this.container=document.createElement("div"),this.container.className="advanced-ui-container",document.body.appendChild(this.container),this.createCharacterPanel(),this.createParticleBackground()}createCharacterPanel(){const e=document.createElement("div");e.className="character-display-panel",e.innerHTML=`
            <div class="character-portrait"></div>
            <div class="character-name">Hero Name</div>
            <div class="character-class">Level 1 Warrior</div>
            
            <div class="stat-bar-container">
                <div class="stat-label">
                    <span>HP</span>
                    <span class="hp-value">100 / 100</span>
                </div>
                <div class="stat-bar">
                    <div class="stat-fill hp" style="width: 100%"></div>
                    <div class="stat-text">100%</div>
                </div>
            </div>

            <div class="stat-bar-container">
                <div class="stat-label">
                    <span>MP</span>
                    <span class="mp-value">50 / 50</span>
                </div>
                <div class="stat-bar">
                    <div class="stat-fill mp" style="width: 100%"></div>
                    <div class="stat-text">100%</div>
                </div>
            </div>

            <div class="stat-bar-container">
                <div class="stat-label">
                    <span>EXP</span>
                    <span class="exp-value">0 / 100</span>
                </div>
                <div class="stat-bar">
                    <div class="stat-fill exp" style="width: 0%"></div>
                    <div class="stat-text">0%</div>
                </div>
            </div>

            <div class="ability-bar">
                <div class="ability-button" data-ability="1" title="Ability 1">🔥</div>
                <div class="ability-button" data-ability="2" title="Ability 2">⚔️</div>
                <div class="ability-button" data-ability="3" title="Ability 3">🛡️</div>
                <div class="ability-button" data-ability="4" title="Ability 4">⚡</div>
            </div>
        `,this.container.appendChild(e),this.characterPanel=e,e.querySelectorAll(".ability-button").forEach(t=>{t.addEventListener("click",s=>this.onAbilityClick(s))})}createParticleBackground(){const e=document.createElement("div");e.className="particles-background";for(let t=0;t<30;t++){const s=document.createElement("div");s.className="particle",s.style.left=`${Math.random()*100}%`,s.style.top=`${Math.random()*100}%`,s.style.animationDelay=`${Math.random()*3}s`,s.style.animationDuration=`${3+Math.random()*3}s`,e.appendChild(s)}document.body.appendChild(e)}updateCharacterStats(e){if(!this.characterPanel)return;const t=this.characterPanel.querySelector(".character-name"),s=this.characterPanel.querySelector(".character-class");if(t&&e.name&&(t.textContent=e.name),s&&e.className&&e.level&&(s.textContent=`Level ${e.level} ${e.className}`),e.hp!==void 0&&e.maxHp!==void 0){const i=e.hp/e.maxHp*100,a=this.characterPanel.querySelector(".stat-fill.hp"),n=this.characterPanel.querySelector(".hp-value"),o=a?.parentElement?.querySelector(".stat-text");a&&(a.style.width=`${i}%`),n&&(n.textContent=`${Math.floor(e.hp)} / ${e.maxHp}`),o&&(o.textContent=`${Math.floor(i)}%`)}if(e.mp!==void 0&&e.maxMp!==void 0){const i=e.mp/e.maxMp*100,a=this.characterPanel.querySelector(".stat-fill.mp"),n=this.characterPanel.querySelector(".mp-value"),o=a?.parentElement?.querySelector(".stat-text");a&&(a.style.width=`${i}%`),n&&(n.textContent=`${Math.floor(e.mp)} / ${e.maxMp}`),o&&(o.textContent=`${Math.floor(i)}%`)}if(e.exp!==void 0&&e.expToLevel!==void 0){const i=e.exp/e.expToLevel*100,a=this.characterPanel.querySelector(".stat-fill.exp"),n=this.characterPanel.querySelector(".exp-value"),o=a?.parentElement?.querySelector(".stat-text");a&&(a.style.width=`${i}%`),n&&(n.textContent=`${Math.floor(e.exp)} / ${e.expToLevel}`),o&&(o.textContent=`${Math.floor(i)}%`)}}showPopupNotification(e,t,s=3e3){const i=document.createElement("div");i.className="popup-notification",i.innerHTML=`
            <div class="popup-title">${e}</div>
            <div class="popup-message">${t}</div>
        `,document.body.appendChild(i),setTimeout(()=>{i.style.animation="popupEnter 0.5s ease-out reverse",setTimeout(()=>i.remove(),500)},s)}showCombatText(e,t,s,i="damage"){const a=document.createElement("div");a.className=`combat-text ${i}`,a.textContent=e,a.style.left=`${t}px`,a.style.top=`${s}px`,document.body.appendChild(a),setTimeout(()=>a.remove(),2e3)}showMainMenu(e="inventory"){const t=document.createElement("div");t.className="main-menu-overlay";const s=document.createElement("div");s.className="main-menu-container",s.innerHTML=`
            <div class="menu-title">⚔️ ${e.toUpperCase()} ⚔️</div>
            <div class="menu-tabs">
                <div class="menu-tab ${e==="inventory"?"active":""}" data-tab="inventory">🎒 Inventory</div>
                <div class="menu-tab ${e==="character"?"active":""}" data-tab="character">👤 Character</div>
                <div class="menu-tab ${e==="skills"?"active":""}" data-tab="skills">⭐ Skills</div>
                <div class="menu-tab ${e==="quests"?"active":""}" data-tab="quests">📜 Quests</div>
            </div>
            <div class="menu-content">
                ${this.getMenuContent(e)}
            </div>
            <div style="text-align: center; margin-top: 20px;">
                <button class="action-button close-menu">Close</button>
            </div>
        `,t.appendChild(s),document.body.appendChild(t),t.querySelector(".close-menu").addEventListener("click",()=>{t.remove()}),s.querySelectorAll(".menu-tab").forEach(i=>{i.addEventListener("click",a=>{const n=a.target.dataset.tab;s.querySelectorAll(".menu-tab").forEach(o=>o.classList.remove("active")),a.target.classList.add("active"),s.querySelector(".menu-content").innerHTML=this.getMenuContent(n)})}),t.addEventListener("click",i=>{i.target===t&&t.remove()}),this.activeMenus.set(e,t)}getMenuContent(e){switch(e){case"inventory":return`
                    <div class="item-grid">
                        ${this.generateItemSlots(24)}
                    </div>
                `;case"character":return`
                    <div style="text-align: center;">
                        <div style="font-size: 32px; color: #ffd700; margin: 20px 0;">⚔️ Character Stats ⚔️</div>
                        <div style="font-size: 20px; color: #fff; line-height: 2;">
                            <div>💪 Attack: 25</div>
                            <div>🛡️ Defense: 18</div>
                            <div>❤️ Max HP: 100</div>
                            <div>💙 Max MP: 50</div>
                            <div>⚡ Speed: 12</div>
                            <div>✨ Critical: 15%</div>
                        </div>
                    </div>
                `;case"skills":return`
                    <div style="text-align: center;">
                        <div style="font-size: 32px; color: #ffd700; margin: 20px 0;">⭐ Skill Tree ⭐</div>
                        <div class="item-grid">
                            ${this.generateSkillSlots(12)}
                        </div>
                    </div>
                `;case"quests":return`
                    <div style="font-size: 18px; color: #fff; line-height: 2;">
                        <div style="margin: 15px 0; padding: 15px; background: rgba(139, 0, 255, 0.3); border-radius: 15px;">
                            📜 <strong>Main Quest:</strong> Defeat the Dark Lord<br>
                            Progress: 2/5 Objectives Complete
                        </div>
                        <div style="margin: 15px 0; padding: 15px; background: rgba(0, 128, 255, 0.3); border-radius: 15px;">
                            📜 <strong>Side Quest:</strong> Collect 10 Crystals<br>
                            Progress: 7/10 Crystals
                        </div>
                        <div style="margin: 15px 0; padding: 15px; background: rgba(255, 140, 0, 0.3); border-radius: 15px;">
                            📜 <strong>Daily Quest:</strong> Defeat 20 Monsters<br>
                            Progress: 13/20 Monsters
                        </div>
                    </div>
                `;default:return"<div>Content not available</div>"}}generateItemSlots(e){const t=["common","rare","epic","legendary"],s=["⚔️","🛡️","💎","🔮","🏺","📿","👑","🗝️"];let i="";for(let a=0;a<e;a++)if(Math.random()>.3){const n=t[Math.floor(Math.random()*t.length)],o=s[Math.floor(Math.random()*s.length)],r=Math.floor(Math.random()*99)+1;i+=`
                    <div class="item-slot ${n}">
                        <div class="item-icon">${o}</div>
                        <div class="item-count">${r}</div>
                    </div>
                `}else i+='<div class="item-slot"></div>';return i}generateSkillSlots(e){const t=["🔥","⚡","❄️","🌪️","💥","✨","🌟","⚔️","🛡️","💫","🌙","☀️"];let s="";for(let i=0;i<e;i++){const a=t[i%t.length],n=Math.random()>.5;s+=`
                <div class="item-slot ${n?"epic":""}" style="${n?"":"opacity: 0.3;"}">
                    <div class="item-icon">${a}</div>
                    ${n?'<div class="item-count">✓</div>':""}
                </div>
            `}return s}onAbilityClick(e){const t=e.currentTarget,s=t.dataset.ability;if(t.classList.contains("cooldown"))return;t.classList.add("cooldown");let i=3;t.dataset.cooldown=i;const a=setInterval(()=>{i--,t.dataset.cooldown=i,i<=0&&(clearInterval(a),t.classList.remove("cooldown"),delete t.dataset.cooldown)},1e3);this.showCombatText(`Ability ${s}!`,window.innerWidth/2,window.innerHeight/2,"critical")}update(e){}dispose(){this.container?.remove(),this.activeMenus.forEach(e=>e.remove()),this.activeMenus.clear()}}class Ws{constructor(e,t){this.scene=e,this.camera=t,this.biomes={mystic_forest:{name:"Mystic Forest",colors:{primary:2969622,secondary:4881497,accent:8368233},weather:["clear","fog","light_rain"],enemies:["forest_sprite","vine_beast","ancient_treant"],difficulty:1,music:"forest_ambient",features:["dense_trees","mushroom_groves","hidden_paths"]},crystal_cavern:{name:"Crystal Cavern",colors:{primary:1710638,secondary:4934563,accent:8224255},weather:["clear","crystal_mist"],enemies:["crystal_golem","shadow_bat","cave_lurker"],difficulty:2,music:"cave_echo",features:["glowing_crystals","underground_lakes","stalactites"]},volcanic_wastes:{name:"Volcanic Wastes",colors:{primary:4853262,secondary:9117214,accent:16729344},weather:["heat_haze","ash_fall","lava_eruption"],enemies:["fire_elemental","lava_serpent","magma_golem"],difficulty:4,music:"volcanic_rumble",features:["lava_flows","volcanic_vents","obsidian_spires"],temperature:"extreme_heat",hazards:["lava_damage","heat_exhaustion"]},azure_depths:{name:"Azure Depths",colors:{primary:6707,secondary:15718,accent:43263},weather:["underwater","current_strong","bioluminescence"],enemies:["sea_serpent","coral_guardian","depth_horror"],difficulty:3,music:"ocean_depths",features:["coral_reefs","underwater_ruins","kelp_forests"],temperature:"cold",mechanics:["swimming","oxygen_management","water_resistance"],hazards:["drowning","pressure_damage"]},sky_citadel:{name:"Sky Citadel",colors:{primary:8900331,secondary:11591910,accent:16777215},weather:["clear","strong_winds","cloud_cover"],enemies:["sky_serpent","cloud_elemental","wind_wraith"],difficulty:5,music:"celestial_heights",features:["floating_islands","wind_streams","ancient_ruins"],temperature:"cold",mechanics:["gliding","wind_navigation","updrafts"],hazards:["fall_damage","wind_knockback"]},scorched_desert:{name:"Scorched Desert",colors:{primary:12759680,secondary:14927207,accent:16766720},weather:["clear","sandstorm","heat_wave"],enemies:["sand_worm","desert_scarab","mirage_phantom"],difficulty:3,music:"desert_winds",features:["sand_dunes","oasis","buried_temples"],temperature:"extreme_heat",mechanics:["sand_navigation","heat_resistance"],hazards:["dehydration","sandstorm_damage"]},frozen_tundra:{name:"Frozen Tundra",colors:{primary:14742263,secondary:11789820,accent:8508666},weather:["snowfall","blizzard","aurora"],enemies:["ice_golem","frost_wolf","blizzard_elemental"],difficulty:4,music:"icy_winds",features:["ice_formations","frozen_lakes","snow_caves"],temperature:"extreme_cold",mechanics:["ice_skating","cold_resistance"],hazards:["hypothermia","ice_slipping","frost_damage"]},shadow_realm:{name:"Shadow Realm",colors:{primary:1703987,secondary:2949197,accent:5570730},weather:["darkness","void_storms","shadow_fog"],enemies:["shadow_demon","void_spawn","nightmare_beast"],difficulty:6,music:"void_whispers",features:["void_rifts","shadow_pools","corrupted_terrain"],temperature:"void",mechanics:["shadow_walk","void_navigation"],hazards:["void_corruption","sanity_drain"]},blossom_grove:{name:"Blossom Grove",colors:{primary:16758725,secondary:16763348,accent:16777215},weather:["clear","petal_rain","gentle_breeze"],enemies:["bloom_sprite","thorn_guardian","pollen_elemental"],difficulty:2,music:"tranquil_garden",features:["cherry_blossoms","flower_fields","healing_springs"],temperature:"mild",mechanics:["nature_attunement"],hazards:["pollen_clouds"]}},this.activeBiomes=[],this.currentBiome=null,this.transitionDuration=5e3,this.transitionProgress=0,this.isTransitioning=!1,this.biomeSize=200,this.chunkSize=50,this.generatedChunks=new Map,this.lastGenerationTime=0,this.generationInterval=1e3,console.log("🌍 BiomeGenerationSystem initialized with",Object.keys(this.biomes).length,"biomes")}init(){this.setCurrentBiome("mystic_forest"),this.generateInitialChunks()}setCurrentBiome(e){if(!this.biomes[e]){console.warn("Biome not found:",e);return}const t=this.biomes[e];return this.currentBiome={id:e,data:t,startTime:Date.now()},console.log("🌲 Entered biome:",t.name),t}generateInitialChunks(){const e={x:0,z:0},t=3;for(let s=-t;s<=t;s++)for(let i=-t;i<=t;i++)this.generateChunk(e.x+s,e.z+i)}generateChunk(e,t){const s=`${e},${t}`;if(this.generatedChunks.has(s))return;const i=this.currentBiome?.data;if(!i)return;const a={x:e,z:t,biome:this.currentBiome.id,features:[],enemies:[],resources:[]};return this.generateFeatures(a,i),this.generatedChunks.set(s,a),a}generateFeatures(e,t){const s=Math.floor(Math.random()*5)+3;for(let i=0;i<s;i++){const a=t.features[Math.floor(Math.random()*t.features.length)],n={x:e.x*this.chunkSize+Math.random()*this.chunkSize,y:0,z:e.z*this.chunkSize+Math.random()*this.chunkSize};e.features.push({type:a,position:n,scale:.5+Math.random()*1.5})}}update(e,t){if(!this.currentBiome)return;this.checkBiomeTransition(e);const s=Date.now();s-this.lastGenerationTime>this.generationInterval&&(this.generateNearbyChunks(e),this.lastGenerationTime=s),this.updateBiomeEffects(t)}checkBiomeTransition(e){const t=Math.sqrt(e.x**2+e.z**2);let s="mystic_forest";t>500?s="shadow_realm":t>400?s="sky_citadel":t>300?s="frozen_tundra":t>200?s="volcanic_wastes":t>100&&(s="scorched_desert"),s!==this.currentBiome.id&&this.startBiomeTransition(s)}startBiomeTransition(e){if(this.isTransitioning)return;this.isTransitioning=!0,this.transitionProgress=0;const t=this.currentBiome;this.setCurrentBiome(e),console.log(`🔄 Transitioning from ${t.data.name} to ${this.currentBiome.data.name}`);const s=setInterval(()=>{this.transitionProgress+=100/(this.transitionDuration/100),this.transitionProgress>=100&&(clearInterval(s),this.isTransitioning=!1,console.log("✅ Biome transition complete"))},100)}generateNearbyChunks(e){const t=Math.floor(e.x/this.chunkSize),s=Math.floor(e.z/this.chunkSize),i=2;for(let a=-i;a<=i;a++)for(let n=-i;n<=i;n++)this.generateChunk(t+a,s+n)}updateBiomeEffects(e){if(!this.currentBiome)return;const t=this.currentBiome.data;t.temperature&&this.applyTemperatureEffect(t.temperature),t.hazards&&this.applyHazardEffects(t.hazards,e)}applyTemperatureEffect(e){}applyHazardEffects(e,t){}getCurrentBiome(){return this.currentBiome}getAllBiomes(){return Object.keys(this.biomes).map(e=>({id:e,...this.biomes[e]}))}getBiome(e){return this.biomes[e]}}class Us{constructor(e){this.scene=e,this.enemyTemplates={forest_sprite:{name:"Forest Sprite",type:"magical",health:50,damage:8,speed:1.5,abilities:["nature_bolt","heal","vine_snare"],size:.8,color:8368233,behavior:"evasive",drops:["forest_essence","healing_herb"]},vine_beast:{name:"Vine Beast",type:"plant",health:120,damage:15,speed:.8,abilities:["vine_whip","entangle","root"],size:1.5,color:2969622,behavior:"aggressive",drops:["tough_vine","plant_fiber"]},ancient_treant:{name:"Ancient Treant",type:"boss",health:500,damage:30,speed:.5,abilities:["earthquake","summon_sprites","bark_armor"],size:3,color:4865063,behavior:"guardian",drops:["ancient_wood","nature_core"]},fire_elemental:{name:"Fire Elemental",type:"elemental",health:80,damage:20,speed:1.8,abilities:["fireball","flame_dash","ignite"],size:1.2,color:16729344,behavior:"aggressive",drops:["fire_essence","magma_core"],immunities:["fire"],weaknesses:["water","ice"]},lava_serpent:{name:"Lava Serpent",type:"beast",health:150,damage:25,speed:1.2,abilities:["lava_spit","coil","submerge"],size:2,color:9117214,behavior:"predator",drops:["serpent_scale","lava_fang"],immunities:["fire","burn"],weaknesses:["ice"]},magma_golem:{name:"Magma Golem",type:"construct",health:300,damage:40,speed:.6,abilities:["slam","eruption","molten_armor"],size:2.5,color:4853262,behavior:"tank",drops:["obsidian_chunk","magma_heart"],immunities:["fire","stun"],weaknesses:["water"]},sea_serpent:{name:"Sea Serpent",type:"beast",health:180,damage:22,speed:2,abilities:["water_jet","whirlpool","tidal_wave"],size:2.2,color:15718,behavior:"territorial",drops:["sea_scale","aqua_pearl"],immunities:["water","slow"],weaknesses:["lightning"]},coral_guardian:{name:"Coral Guardian",type:"guardian",health:200,damage:18,speed:.7,abilities:["coral_spikes","regeneration","petrify"],size:1.8,color:16739229,behavior:"defensive",drops:["living_coral","ocean_gem"],immunities:["poison"],weaknesses:["fire"]},depth_horror:{name:"Depth Horror",type:"horror",health:250,damage:35,speed:1,abilities:["tentacle_grab","ink_cloud","drain_life"],size:2.8,color:6707,behavior:"lurker",drops:["void_essence","deep_pearl"],immunities:["fear","darkness"],weaknesses:["light"]},sky_serpent:{name:"Sky Serpent",type:"dragon",health:220,damage:28,speed:2.5,abilities:["wind_blade","dive_attack","lightning_breath"],size:2.5,color:8900331,behavior:"aerial",drops:["dragon_scale","sky_crystal"],immunities:["wind","knockback"],weaknesses:["gravity"]},cloud_elemental:{name:"Cloud Elemental",type:"elemental",health:100,damage:15,speed:1.5,abilities:["wind_gust","thunder_shock","mist_form"],size:1.5,color:11591910,behavior:"evasive",drops:["cloud_essence","storm_gem"],immunities:["wind","lightning"],weaknesses:["earth"]},wind_wraith:{name:"Wind Wraith",type:"spirit",health:90,damage:20,speed:2.2,abilities:["wind_slash","teleport","curse"],size:1.3,color:16777215,behavior:"assassin",drops:["wraith_essence","wind_shard"],immunities:["physical"],weaknesses:["magic"]},sand_worm:{name:"Sand Worm",type:"beast",health:280,damage:32,speed:1.5,abilities:["burrow","sand_blast","devour"],size:3.5,color:12759680,behavior:"ambusher",drops:["worm_hide","desert_pearl"],immunities:["earth","blind"],weaknesses:["water"]},desert_scarab:{name:"Desert Scarab",type:"insect",health:60,damage:12,speed:1.8,abilities:["mandible_strike","carapace_shield","swarm"],size:1,color:14927207,behavior:"swarm",drops:["chitin","scarab_gem"],immunities:["poison"],weaknesses:["fire"]},mirage_phantom:{name:"Mirage Phantom",type:"illusion",health:70,damage:18,speed:2,abilities:["illusion","confusion","fade"],size:1.2,color:16766720,behavior:"trickster",drops:["phantom_dust","mirage_crystal"],immunities:["physical","confusion"],weaknesses:["true_sight"]},ice_golem:{name:"Ice Golem",type:"construct",health:320,damage:35,speed:.5,abilities:["ice_slam","freeze","avalanche"],size:2.8,color:14742263,behavior:"tank",drops:["eternal_ice","frost_core"],immunities:["ice","freeze"],weaknesses:["fire"]},frost_wolf:{name:"Frost Wolf",type:"beast",health:140,damage:24,speed:2.2,abilities:["bite","howl","frost_breath"],size:1.6,color:11789820,behavior:"pack_hunter",drops:["wolf_pelt","frost_fang"],immunities:["cold"],weaknesses:["fire"]},blizzard_elemental:{name:"Blizzard Elemental",type:"elemental",health:110,damage:22,speed:1.4,abilities:["blizzard","ice_shard","freeze_aura"],size:1.8,color:8508666,behavior:"caster",drops:["blizzard_essence","ice_crystal"],immunities:["ice","wind"],weaknesses:["fire"]},shadow_demon:{name:"Shadow Demon",type:"demon",health:260,damage:38,speed:1.6,abilities:["shadow_strike","drain_soul","dark_portal"],size:2,color:2949197,behavior:"aggressive",drops:["demon_essence","shadow_core"],immunities:["darkness","fear"],weaknesses:["light","holy"]},void_spawn:{name:"Void Spawn",type:"aberration",health:150,damage:30,speed:1.3,abilities:["void_touch","reality_break","multiply"],size:1.5,color:1703987,behavior:"swarm",drops:["void_fragment","corrupted_essence"],immunities:["void","madness"],weaknesses:["order"]},nightmare_beast:{name:"Nightmare Beast",type:"horror",health:400,damage:45,speed:1.1,abilities:["nightmare","terror_aura","consume"],size:3.2,color:5570730,behavior:"boss",drops:["nightmare_essence","dark_heart"],immunities:["fear","sleep","darkness"],weaknesses:["courage","light"]},bloom_sprite:{name:"Bloom Sprite",type:"fairy",health:40,damage:10,speed:2,abilities:["petal_storm","charm","heal_ally"],size:.6,color:16758725,behavior:"support",drops:["fairy_dust","blossom_petal"],immunities:["charm"],weaknesses:["dark"]},thorn_guardian:{name:"Thorn Guardian",type:"plant",health:160,damage:20,speed:.9,abilities:["thorn_volley","root_bind","bramble_wall"],size:1.7,color:9127817,behavior:"defensive",drops:["thorn_spike","rose_essence"],immunities:["poison","bleed"],weaknesses:["fire"]},pollen_elemental:{name:"Pollen Elemental",type:"elemental",health:85,damage:16,speed:1.3,abilities:["pollen_cloud","allergic_reaction","bloom"],size:1.2,color:16763348,behavior:"area_control",drops:["pollen_sac","flower_core"],immunities:["nature"],weaknesses:["wind"]}},this.activeEnemies=[],this.maxActiveEnemies=50,this.spawnInterval=5e3,this.lastSpawnTime=0,console.log("👾 BiomeSpecificEnemies initialized with",Object.keys(this.enemyTemplates).length,"enemy types")}spawnEnemy(e,t,s){if(!this.enemyTemplates[e])return console.warn("Unknown enemy type:",e),null;if(this.activeEnemies.length>=this.maxActiveEnemies)return null;const i=this.enemyTemplates[e],a={id:`enemy_${Date.now()}_${Math.random()}`,type:e,...JSON.parse(JSON.stringify(i)),position:{...t},biome:s,state:"idle",target:null,spawnTime:Date.now(),currentHealth:i.health};return this.activeEnemies.push(a),a}getBiomeEnemies(e){return{mystic_forest:["forest_sprite","vine_beast","ancient_treant"],volcanic_wastes:["fire_elemental","lava_serpent","magma_golem"],azure_depths:["sea_serpent","coral_guardian","depth_horror"],sky_citadel:["sky_serpent","cloud_elemental","wind_wraith"],scorched_desert:["sand_worm","desert_scarab","mirage_phantom"],frozen_tundra:["ice_golem","frost_wolf","blizzard_elemental"],shadow_realm:["shadow_demon","void_spawn","nightmare_beast"],blossom_grove:["bloom_sprite","thorn_guardian","pollen_elemental"]}[e]||[]}update(e,t,s){for(let a=this.activeEnemies.length-1;a>=0;a--){const n=this.activeEnemies[a];if(n.currentHealth<=0){this.removeEnemy(a);continue}this.updateEnemyBehavior(n,t,e)}const i=Date.now();i-this.lastSpawnTime>this.spawnInterval&&(this.spawnBiomeEnemies(s,t),this.lastSpawnTime=i)}updateEnemyBehavior(e,t,s){const i=this.getDistance(e.position,t);switch(e.behavior){case"aggressive":i<20&&this.moveTowards(e,t,s);break;case"evasive":i<10&&this.moveAway(e,t,s);break;case"territorial":i<15&&i>5&&this.moveTowards(e,t,s);break}}spawnBiomeEnemies(e,t){if(!e||!e.data.enemies)return;const s=Math.floor(Math.random()*2)+1;for(let i=0;i<s;i++){const a=e.data.enemies[Math.floor(Math.random()*e.data.enemies.length)],n=Math.random()*Math.PI*2,o=15+Math.random()*10,r={x:t.x+Math.cos(n)*o,y:0,z:t.z+Math.sin(n)*o};this.spawnEnemy(a,r,e.id)}}removeEnemy(e){this.activeEnemies.splice(e,1)}getDistance(e,t){const s=e.x-t.x,i=e.z-t.z;return Math.sqrt(s*s+i*i)}moveTowards(e,t,s){const i=t.x-e.position.x,a=t.z-e.position.z,n=Math.sqrt(i*i+a*a);if(n>.1){const o=e.speed*s*.01;e.position.x+=i/n*o,e.position.z+=a/n*o}}moveAway(e,t,s){const i=e.position.x-t.x,a=e.position.z-t.z,n=Math.sqrt(i*i+a*a);if(n>.1){const o=e.speed*s*.01;e.position.x+=i/n*o,e.position.z+=a/n*o}}getActiveEnemies(){return this.activeEnemies}getEnemyTemplate(e){return this.enemyTemplates[e]}}class Ns{constructor(e,t){this.scene=e,this.camera=t,this.weatherParticles=null,this.particleGeometry=null,this.particleMaterial=null,this.currentWeather="clear",this.weatherIntensity=.5,this.weatherTransition=0,this.weatherTypes={clear:{particles:!1,fogDensity:.002,fogColor:8900331,ambientLight:1},fog:{particles:!1,fogDensity:.05,fogColor:13421772,ambientLight:.7},light_rain:{particles:!0,particleCount:1e3,particleColor:11184895,particleSpeed:10,fogDensity:.01,fogColor:8947848,ambientLight:.6},sandstorm:{particles:!0,particleCount:2e3,particleColor:14927207,particleSpeed:8,fogDensity:.08,fogColor:12759680,ambientLight:.4},blizzard:{particles:!0,particleCount:1500,particleColor:16777215,particleSpeed:12,fogDensity:.06,fogColor:14742263,ambientLight:.5},ash_fall:{particles:!0,particleCount:800,particleColor:3355443,particleSpeed:3,fogDensity:.04,fogColor:4853262,ambientLight:.5},lava_eruption:{particles:!0,particleCount:500,particleColor:16729344,particleSpeed:15,fogDensity:.03,fogColor:9117214,ambientLight:.7},underwater:{particles:!0,particleCount:300,particleColor:43263,particleSpeed:2,fogDensity:.1,fogColor:6707,ambientLight:.3},petal_rain:{particles:!0,particleCount:600,particleColor:16758725,particleSpeed:2,fogDensity:.005,fogColor:16763348,ambientLight:.9},aurora:{particles:!1,fogDensity:.01,fogColor:8508666,ambientLight:.6,specialEffect:"aurora_borealis"}},this.particlePositions=[],this.particleVelocities=[],console.log("🌦️ BiomeWeatherEffects initialized")}init(){this.scene.fog=new _t(8900331,10,100),this.createParticleSystem()}createParticleSystem(){this.particleGeometry=new M;const t=new Float32Array(2e3*3),s=new Float32Array(2e3*3);for(let i=0;i<2e3;i++){const a=i*3;t[a]=(Math.random()-.5)*50,t[a+1]=Math.random()*50,t[a+2]=(Math.random()-.5)*50,s[a]=1,s[a+1]=1,s[a+2]=1,this.particleVelocities.push({x:(Math.random()-.5)*.5,y:-Math.random()*2,z:(Math.random()-.5)*.5})}this.particleGeometry.setAttribute("position",new ae(t,3)),this.particleGeometry.setAttribute("color",new ae(s,3)),this.particleMaterial=new T({size:.1,vertexColors:!0,transparent:!0,opacity:.6,blending:k}),this.weatherParticles=new P(this.particleGeometry,this.particleMaterial),this.weatherParticles.visible=!1,this.scene.add(this.weatherParticles)}setWeatherFromBiome(e){if(!e||!e.weather)return;const t=e.weather,s=t[Math.floor(Math.random()*t.length)];this.setWeather(s)}setWeather(e){if(!this.weatherTypes[e]){console.warn("Unknown weather type:",e);return}this.currentWeather=e;const t=this.weatherTypes[e];this.scene.fog&&(this.scene.fog.density=t.fogDensity,this.scene.fog.color.setHex(t.fogColor)),t.particles?this.activateParticles(t):this.deactivateParticles(),console.log("🌦️ Weather set to:",e)}activateParticles(e){if(!this.weatherParticles)return;this.weatherParticles.visible=!0;const t=this.particleGeometry.attributes.position.array,s=this.particleGeometry.attributes.color.array,i=Math.min(e.particleCount,t.length/3),a=new y(e.particleColor);for(let n=0;n<i;n++){const o=n*3;t[o+1]=Math.random()*50,s[o]=a.r,s[o+1]=a.g,s[o+2]=a.b,this.particleVelocities[n].y=-e.particleSpeed*.1}for(let n=i;n<t.length/3;n++){const o=n*3;t[o+1]=-1e3}this.particleGeometry.attributes.position.needsUpdate=!0,this.particleGeometry.attributes.color.needsUpdate=!0}deactivateParticles(){this.weatherParticles&&(this.weatherParticles.visible=!1)}update(e,t){if(!this.weatherParticles||!this.weatherParticles.visible)return;const s=this.particleGeometry.attributes.position.array,i=this.weatherTypes[this.currentWeather];if(!i||!i.particles)return;const a=Math.min(i.particleCount,s.length/3);for(let n=0;n<a;n++){const o=n*3,r=this.particleVelocities[n];if(s[o]+=r.x*e*.01,s[o+1]+=r.y*e*.01,s[o+2]+=r.z*e*.01,t){const l=s[o]-t.x,c=s[o+2]-t.z;if(Math.sqrt(l*l+c*c)>30){const u=Math.random()*Math.PI*2,p=Math.random()*20;s[o]=t.x+Math.cos(u)*p,s[o+2]=t.z+Math.sin(u)*p}}s[o+1]<0&&(s[o+1]=50,s[o]+=(Math.random()-.5)*20,s[o+2]+=(Math.random()-.5)*20)}this.particleGeometry.attributes.position.needsUpdate=!0}getCurrentWeather(){return this.currentWeather}setIntensity(e){this.weatherIntensity=Math.max(0,Math.min(1,e)),this.particleMaterial&&(this.particleMaterial.opacity=.3+this.weatherIntensity*.5)}dispose(){this.particleGeometry&&this.particleGeometry.dispose(),this.particleMaterial&&this.particleMaterial.dispose(),this.weatherParticles&&this.scene.remove(this.weatherParticles)}}class js{constructor(e){this.scene=e,this.resourceTypes={ancient_wood:{name:"Ancient Wood",biomes:["mystic_forest","blossom_grove"],rarity:"common",value:5,uses:["crafting","building"],harvestTime:2e3,respawnTime:12e4,stackSize:50,icon:"🪵"},healing_herb:{name:"Healing Herb",biomes:["mystic_forest","blossom_grove"],rarity:"common",value:8,uses:["alchemy","crafting"],harvestTime:1500,respawnTime:6e4,stackSize:99,icon:"🌿"},nature_essence:{name:"Nature Essence",biomes:["mystic_forest"],rarity:"rare",value:50,uses:["enchanting","alchemy"],harvestTime:3e3,respawnTime:3e5,stackSize:20,icon:"✨"},obsidian_shard:{name:"Obsidian Shard",biomes:["volcanic_wastes"],rarity:"uncommon",value:25,uses:["weapon_crafting","armor_crafting"],harvestTime:3e3,respawnTime:18e4,stackSize:30,icon:"🪨"},magma_crystal:{name:"Magma Crystal",biomes:["volcanic_wastes"],rarity:"rare",value:75,uses:["enchanting","weapon_crafting"],harvestTime:5e3,respawnTime:4e5,stackSize:10,icon:"💎"},sulfur_powder:{name:"Sulfur Powder",biomes:["volcanic_wastes"],rarity:"common",value:10,uses:["alchemy","explosives"],harvestTime:2e3,respawnTime:9e4,stackSize:50,icon:"⚗️"},coral_fragment:{name:"Coral Fragment",biomes:["azure_depths"],rarity:"common",value:12,uses:["jewelry","decoration"],harvestTime:2500,respawnTime:12e4,stackSize:40,icon:"🪸"},pearl:{name:"Pearl",biomes:["azure_depths"],rarity:"uncommon",value:40,uses:["jewelry","alchemy"],harvestTime:3500,respawnTime:24e4,stackSize:20,icon:"⚪"},aqua_essence:{name:"Aqua Essence",biomes:["azure_depths"],rarity:"rare",value:60,uses:["enchanting","alchemy"],harvestTime:4e3,respawnTime:35e4,stackSize:15,icon:"💧"},sky_crystal:{name:"Sky Crystal",biomes:["sky_citadel"],rarity:"uncommon",value:35,uses:["enchanting","jewelry"],harvestTime:3e3,respawnTime:2e5,stackSize:25,icon:"💠"},cloud_essence:{name:"Cloud Essence",biomes:["sky_citadel"],rarity:"rare",value:70,uses:["alchemy","enchanting"],harvestTime:4500,respawnTime:38e4,stackSize:12,icon:"☁️"},wind_shard:{name:"Wind Shard",biomes:["sky_citadel"],rarity:"uncommon",value:30,uses:["weapon_crafting","enchanting"],harvestTime:2800,respawnTime:16e4,stackSize:30,icon:"💨"},desert_glass:{name:"Desert Glass",biomes:["scorched_desert"],rarity:"uncommon",value:20,uses:["crafting","decoration"],harvestTime:2e3,respawnTime:14e4,stackSize:35,icon:"🔆"},sun_stone:{name:"Sun Stone",biomes:["scorched_desert"],rarity:"rare",value:80,uses:["enchanting","jewelry"],harvestTime:5e3,respawnTime:42e4,stackSize:8,icon:"☀️"},cactus_fiber:{name:"Cactus Fiber",biomes:["scorched_desert"],rarity:"common",value:6,uses:["crafting","alchemy"],harvestTime:1800,respawnTime:8e4,stackSize:60,icon:"🌵"},eternal_ice:{name:"Eternal Ice",biomes:["frozen_tundra"],rarity:"uncommon",value:28,uses:["alchemy","weapon_crafting"],harvestTime:3200,respawnTime:18e4,stackSize:25,icon:"🧊"},frost_crystal:{name:"Frost Crystal",biomes:["frozen_tundra"],rarity:"rare",value:65,uses:["enchanting","armor_crafting"],harvestTime:4200,respawnTime:36e4,stackSize:15,icon:"❄️"},winter_herb:{name:"Winter Herb",biomes:["frozen_tundra"],rarity:"common",value:9,uses:["alchemy","cooking"],harvestTime:2e3,respawnTime:1e5,stackSize:50,icon:"🍃"},void_essence:{name:"Void Essence",biomes:["shadow_realm"],rarity:"epic",value:150,uses:["enchanting","dark_magic"],harvestTime:6e3,respawnTime:6e5,stackSize:5,icon:"🌑"},shadow_crystal:{name:"Shadow Crystal",biomes:["shadow_realm"],rarity:"rare",value:90,uses:["weapon_crafting","enchanting"],harvestTime:5e3,respawnTime:45e4,stackSize:10,icon:"⬛"},dark_essence:{name:"Dark Essence",biomes:["shadow_realm"],rarity:"uncommon",value:45,uses:["alchemy","dark_magic"],harvestTime:3500,respawnTime:22e4,stackSize:20,icon:"🔮"},cherry_blossom:{name:"Cherry Blossom",biomes:["blossom_grove"],rarity:"common",value:7,uses:["alchemy","decoration"],harvestTime:1500,respawnTime:7e4,stackSize:70,icon:"🌸"},life_essence:{name:"Life Essence",biomes:["blossom_grove"],rarity:"rare",value:55,uses:["enchanting","healing"],harvestTime:3800,respawnTime:33e4,stackSize:18,icon:"💖"},petal_dust:{name:"Petal Dust",biomes:["blossom_grove"],rarity:"uncommon",value:22,uses:["alchemy","enchanting"],harvestTime:2400,respawnTime:15e4,stackSize:35,icon:"✨"}},this.activeNodes=[],this.maxNodes=100,this.playerResources={},console.log("💎 BiomeResourcesSystem initialized with",Object.keys(this.resourceTypes).length,"resource types")}spawnResourceNodesInChunk(e,t,s){const i=this.getResourcesForBiome(s);if(i.length===0)return;const a=Math.floor(Math.random()*4)+2;for(let n=0;n<a&&this.activeNodes.length<this.maxNodes;n++){const o=i[Math.floor(Math.random()*i.length)],r=this.resourceTypes[o],l={x:e*50+Math.random()*50,y:.5,z:t*50+Math.random()*50},c={id:`node_${Date.now()}_${Math.random()}`,type:o,data:r,position:l,biome:s,state:"available",spawnTime:Date.now(),lastHarvestTime:0,harvestCount:0};this.activeNodes.push(c)}}getResourcesForBiome(e){const t=[];for(const[s,i]of Object.entries(this.resourceTypes))i.biomes.includes(e)&&t.push(s);return t}harvestNode(e,t){const s=this.activeNodes.find(i=>i.id===e);return s?s.state!=="available"?{success:!1,message:"Resource is depleted"}:(s.state="harvesting",setTimeout(()=>{s.state==="harvesting"&&(s.state="depleted",s.lastHarvestTime=Date.now(),s.harvestCount++,this.addResourceToPlayer(t,s.type,1),setTimeout(()=>{s.state="available"},s.data.respawnTime))},s.data.harvestTime),{success:!0,message:`Harvesting ${s.data.name}...`,harvestTime:s.data.harvestTime}):null}addResourceToPlayer(e,t,s){this.playerResources[e]||(this.playerResources[e]={}),this.playerResources[e][t]||(this.playerResources[e][t]=0);const i=this.resourceTypes[t],a=this.playerResources[e][t],n=Math.min(a+s,i.stackSize);this.playerResources[e][t]=n,console.log(`💰 Player gained ${s}x ${i.name} (Total: ${n}/${i.stackSize})`)}getPlayerResources(e){return this.playerResources[e]||{}}getNearbyNodes(e,t=10){return this.activeNodes.filter(s=>{const i=s.position.x-e.x,a=s.position.z-e.z;return Math.sqrt(i*i+a*a)<=t})}update(e){const t=Date.now();for(const s of this.activeNodes)s.state==="depleted"&&t-s.lastHarvestTime>=s.data.respawnTime&&(s.state="available")}getResourceInfo(e){return this.resourceTypes[e]}getActiveNodes(){return this.activeNodes}removeNode(e){const t=this.activeNodes.findIndex(s=>s.id===e);t!==-1&&this.activeNodes.splice(t,1)}}class Vs{constructor(e){this.scene=e,this.dungeonTemplates={mystic_forest_1:{name:"Whispering Grove Labyrinth",biome:"mystic_forest",difficulty:1,minLevel:1,size:"medium",rooms:8,boss:"ancient_treant",miniBosses:["vine_beast"],enemies:["forest_sprite","vine_beast"],hazards:["poison_spores","vine_traps"],loot:["ancient_wood","healing_herb","nature_essence"],specialFeatures:["healing_springs","nature_shrines"]},mystic_forest_2:{name:"Enchanted Canopy Temple",biome:"mystic_forest",difficulty:2,minLevel:5,size:"large",rooms:12,boss:"forest_guardian",miniBosses:["ancient_treant"],enemies:["forest_sprite","vine_beast","forest_warden"],hazards:["magical_vines","illusion_paths"],loot:["nature_essence","enchanted_wood","forest_crown"],specialFeatures:["teleport_portals","magic_circles"]},mystic_forest_3:{name:"Root Depths Sanctuary",biome:"mystic_forest",difficulty:3,minLevel:10,size:"large",rooms:15,boss:"primordial_oak",miniBosses:["ancient_treant","forest_guardian"],enemies:["forest_sprite","vine_beast","nature_elemental"],hazards:["root_mazes","poison_pools"],loot:["nature_core","ancient_seed","primordial_essence"],specialFeatures:["growth_zones","nature_portals"]},volcanic_wastes_1:{name:"Ember Forge Cavern",biome:"volcanic_wastes",difficulty:4,minLevel:15,size:"medium",rooms:10,boss:"magma_titan",miniBosses:["magma_golem"],enemies:["fire_elemental","lava_serpent","magma_golem"],hazards:["lava_flows","heat_vents","collapsing_rocks"],loot:["obsidian_shard","magma_crystal","sulfur_powder"],specialFeatures:["forge_stations","lava_bridges"]},volcanic_wastes_2:{name:"Inferno Core Sanctum",biome:"volcanic_wastes",difficulty:5,minLevel:20,size:"large",rooms:14,boss:"volcanic_phoenix",miniBosses:["magma_titan","fire_lord"],enemies:["fire_elemental","lava_serpent","flame_wraith"],hazards:["eruptions","fire_storms","magma_pools"],loot:["phoenix_feather","magma_heart","eternal_flame"],specialFeatures:["resurrection_altar","fire_trials"]},volcanic_wastes_3:{name:"Molten Throne Fortress",biome:"volcanic_wastes",difficulty:6,minLevel:25,size:"massive",rooms:20,boss:"volcano_king",miniBosses:["volcanic_phoenix","magma_titan"],enemies:["fire_elemental","lava_serpent","inferno_knight"],hazards:["lava_tsunamis","flame_barriers"],loot:["volcanic_crown","magma_throne_gem","king_essence"],specialFeatures:["throne_room","armory"]},azure_depths_1:{name:"Sunken Ship Graveyard",biome:"azure_depths",difficulty:3,minLevel:10,size:"medium",rooms:9,boss:"drowned_captain",miniBosses:["coral_guardian"],enemies:["sea_serpent","coral_guardian","ghost_sailor"],hazards:["strong_currents","whirlpools","oxygen_zones"],loot:["coral_fragment","pearl","ship_treasure"],specialFeatures:["treasure_rooms","air_pockets"]},azure_depths_2:{name:"Coral Palace Ruins",biome:"azure_depths",difficulty:4,minLevel:15,size:"large",rooms:13,boss:"sea_empress",miniBosses:["drowned_captain","coral_guardian"],enemies:["sea_serpent","depth_horror","water_elemental"],hazards:["pressure_chambers","coral_spikes"],loot:["royal_pearl","aqua_essence","ocean_crown"],specialFeatures:["throne_room","pearl_gardens"]},azure_depths_3:{name:"Abyssal Trench Temple",biome:"azure_depths",difficulty:7,minLevel:30,size:"massive",rooms:18,boss:"leviathan",miniBosses:["sea_empress","depth_horror"],enemies:["depth_horror","abyssal_horror","void_kraken"],hazards:["extreme_pressure","darkness","tentacles"],loot:["leviathan_scale","abyssal_pearl","deep_essence"],specialFeatures:["void_portal","ancient_altar"]},sky_citadel_1:{name:"Cloudtop Monastery",biome:"sky_citadel",difficulty:5,minLevel:20,size:"medium",rooms:11,boss:"storm_monk",miniBosses:["wind_wraith"],enemies:["sky_serpent","cloud_elemental","wind_wraith"],hazards:["wind_gusts","lightning_strikes","falling_platforms"],loot:["sky_crystal","cloud_essence","wind_shard"],specialFeatures:["meditation_chambers","wind_trials"]},sky_citadel_2:{name:"Celestial Observatory",biome:"sky_citadel",difficulty:6,minLevel:25,size:"large",rooms:15,boss:"star_keeper",miniBosses:["storm_monk","celestial_guardian"],enemies:["cloud_elemental","star_spirit","celestial_knight"],hazards:["cosmic_radiation","star_falls","gravity_shifts"],loot:["star_fragment","celestial_essence","cosmic_gem"],specialFeatures:["star_chart_room","telescope_chamber"]},sky_citadel_3:{name:"Heaven's Spire Pinnacle",biome:"sky_citadel",difficulty:8,minLevel:35,size:"massive",rooms:22,boss:"sky_emperor",miniBosses:["star_keeper","storm_monk"],enemies:["celestial_knight","sky_dragon","heaven_guard"],hazards:["divine_lightning","celestial_barriers"],loot:["heaven_crown","emperor_essence","divine_artifact"],specialFeatures:["throne_of_clouds","divine_armory"]},scorched_desert_1:{name:"Sandstorm Catacombs",biome:"scorched_desert",difficulty:3,minLevel:12,size:"medium",rooms:9,boss:"sand_worm_queen",miniBosses:["sand_worm"],enemies:["sand_worm","desert_scarab","mummy_warrior"],hazards:["quicksand","sandstorms","collapsing_tunnels"],loot:["desert_glass","sun_stone","ancient_coins"],specialFeatures:["treasure_vaults","mummy_chambers"]},scorched_desert_2:{name:"Sun Temple Pyramid",biome:"scorched_desert",difficulty:5,minLevel:20,size:"large",rooms:14,boss:"sun_pharaoh",miniBosses:["sand_worm_queen","anubis_guard"],enemies:["mummy_warrior","scarab_swarm","sun_priest"],hazards:["sun_beams","cursed_traps","sand_walls"],loot:["pharaoh_mask","sun_stone","royal_scepter"],specialFeatures:["burial_chamber","ritual_room"]},scorched_desert_3:{name:"Mirage Palace Labyrinth",biome:"scorched_desert",difficulty:6,minLevel:27,size:"large",rooms:17,boss:"desert_djinn",miniBosses:["sun_pharaoh","mirage_phantom"],enemies:["mirage_phantom","sand_djinn","desert_demon"],hazards:["illusions","dimension_shifts","reality_breaks"],loot:["djinn_lamp","mirage_crystal","wish_gem"],specialFeatures:["wish_chamber","mirror_maze"]},frozen_tundra_1:{name:"Icebound Caverns",biome:"frozen_tundra",difficulty:4,minLevel:15,size:"medium",rooms:10,boss:"ice_wyvern",miniBosses:["ice_golem"],enemies:["ice_golem","frost_wolf","ice_troll"],hazards:["ice_spikes","freezing_winds","avalanches"],loot:["eternal_ice","frost_crystal","ice_fang"],specialFeatures:["ice_slides","frozen_waterfalls"]},frozen_tundra_2:{name:"Frost Giant Stronghold",biome:"frozen_tundra",difficulty:6,minLevel:25,size:"large",rooms:16,boss:"frost_king",miniBosses:["ice_wyvern","frost_giant"],enemies:["frost_giant","ice_elemental","winter_wraith"],hazards:["blizzards","ice_walls","frozen_floors"],loot:["frost_crown","giant_axe","winter_essence"],specialFeatures:["great_hall","ice_throne"]},frozen_tundra_3:{name:"Eternal Winter Citadel",biome:"frozen_tundra",difficulty:8,minLevel:35,size:"massive",rooms:20,boss:"winter_god",miniBosses:["frost_king","ice_wyvern"],enemies:["winter_wraith","ice_dragon","eternal_guardian"],hazards:["absolute_zero","ice_storms","frozen_time"],loot:["eternal_winter_gem","god_essence","timeless_ice"],specialFeatures:["divine_altar","time_chamber"]},shadow_realm_1:{name:"Void Rift Catacombs",biome:"shadow_realm",difficulty:6,minLevel:25,size:"large",rooms:13,boss:"void_lord",miniBosses:["shadow_demon"],enemies:["shadow_demon","void_spawn","dark_wraith"],hazards:["void_portals","corruption","sanity_drain"],loot:["void_essence","shadow_crystal","corruption_gem"],specialFeatures:["void_altars","corruption_pools"]},shadow_realm_2:{name:"Nightmare Cathedral",biome:"shadow_realm",difficulty:7,minLevel:30,size:"massive",rooms:18,boss:"nightmare_emperor",miniBosses:["void_lord","nightmare_beast"],enemies:["nightmare_beast","fear_demon","void_horror"],hazards:["fear_aura","nightmare_visions","madness"],loot:["nightmare_crown","fear_essence","madness_gem"],specialFeatures:["fear_chambers","nightmare_portal"]},shadow_realm_3:{name:"Oblivion Nexus",biome:"shadow_realm",difficulty:10,minLevel:40,size:"colossal",rooms:25,boss:"void_entity",miniBosses:["nightmare_emperor","void_lord"],enemies:["void_horror","oblivion_spawn","chaos_being"],hazards:["reality_collapse","void_storms","existence_erasure"],loot:["void_heart","oblivion_essence","reality_shard"],specialFeatures:["void_core","reality_anchor"]}},this.activeDungeons=[],console.log("🏰 BiomeDungeonsSystem initialized with",Object.keys(this.dungeonTemplates).length,"dungeon types")}getDungeonsForBiome(e){const t=[];for(const[s,i]of Object.entries(this.dungeonTemplates))i.biome===e&&t.push({id:s,...i});return t}createDungeonInstance(e,t){const s=this.dungeonTemplates[e];if(!s)return console.warn("Unknown dungeon:",e),null;const i={id:`dungeon_${Date.now()}`,templateId:e,...JSON.parse(JSON.stringify(s)),entrancePosition:t,createdAt:Date.now(),state:"active",playersInside:[],clearedRooms:0,bossDefeated:!1};return this.activeDungeons.push(i),console.log(`🏰 Created dungeon instance: ${s.name}`),i}getDungeonsByDifficulty(e){const t=[];for(const[s,i]of Object.entries(this.dungeonTemplates))i.difficulty===e&&t.push({id:s,...i});return t}getDungeonsForPlayerLevel(e){const t=[];for(const[s,i]of Object.entries(this.dungeonTemplates))e>=i.minLevel&&e<i.minLevel+10&&t.push({id:s,...i});return t}completeDungeon(e){const t=this.activeDungeons.find(s=>s.id===e);if(t)return t.state="completed",t.bossDefeated=!0,console.log(`🏆 Dungeon completed: ${t.name}`),t.loot}getActiveDungeons(){return this.activeDungeons}removeDungeonInstance(e){const t=this.activeDungeons.findIndex(s=>s.id===e);t!==-1&&this.activeDungeons.splice(t,1)}}class Qs{constructor(e){this.gameEngine=e,this.player=null,this.dodgeConfig={cooldown:1e3,duration:500,distance:5,staminaCost:25,iFrames:300},this.parryConfig={cooldown:2e3,windowDuration:200,staminaCost:20,counterMultiplier:2,perfectWindowStart:50,perfectWindowEnd:150},this.staminaConfig={max:100,current:100,regenRate:10,regenDelay:1500,exhaustedThreshold:10},this.isDodging=!1,this.isParrying=!1,this.isExhausted=!1,this.hasIFrames=!1,this.lastDodgeTime=0,this.lastParryTime=0,this.lastStaminaUse=0,this.dodgeDirection={x:0,z:0},this.dodgeStartTime=0,this.parryStartTime=0,console.log("🛡️ DodgeAndParrySystem initialized")}init(e){this.player=e,this.staminaConfig.current=this.staminaConfig.max}dodge(e,t){const s=Date.now();if(s-this.lastDodgeTime<this.dodgeConfig.cooldown)return{success:!1,reason:"cooldown"};if(this.staminaConfig.current<this.dodgeConfig.staminaCost)return{success:!1,reason:"no_stamina"};if(this.isParrying)return{success:!1,reason:"parrying"};this.isDodging=!0,this.hasIFrames=!0,this.dodgeStartTime=s,this.dodgeEndTime=s+this.dodgeConfig.duration,this.iFrameEndTime=s+this.dodgeConfig.iFrames,this.lastDodgeTime=s;const i=Math.sqrt(e*e+t*t);return i>0?(this.dodgeDirection.x=e/i*this.dodgeConfig.distance,this.dodgeDirection.z=t/i*this.dodgeConfig.distance):(this.dodgeDirection.x=0,this.dodgeDirection.z=-this.dodgeConfig.distance),this.useStamina(this.dodgeConfig.staminaCost),console.log("⚡ Dodge executed"),{success:!0}}parry(){const e=Date.now();return e-this.lastParryTime<this.parryConfig.cooldown?{success:!1,reason:"cooldown"}:this.staminaConfig.current<this.parryConfig.staminaCost?{success:!1,reason:"no_stamina"}:this.isDodging?{success:!1,reason:"dodging"}:(this.isParrying=!0,this.parryStartTime=e,this.parryEndTime=e+this.parryConfig.windowDuration,this.lastParryTime=e,this.useStamina(this.parryConfig.staminaCost),console.log("🛡️ Parry initiated"),{success:!0,parryWindow:this.parryConfig.windowDuration})}checkParry(e){if(!this.isParrying)return{parried:!1};const t=e-this.parryStartTime;if(t<=this.parryConfig.windowDuration){const s=t>=this.parryConfig.perfectWindowStart&&t<=this.parryConfig.perfectWindowEnd;return console.log(s?"✨ Perfect parry!":"🛡️ Parry successful"),{parried:!0,perfect:s,counterMultiplier:s?this.parryConfig.counterMultiplier*1.5:this.parryConfig.counterMultiplier}}return{parried:!1}}useStamina(e){this.staminaConfig.current=Math.max(0,this.staminaConfig.current-e),this.lastStaminaUse=Date.now(),this.staminaConfig.current<=this.staminaConfig.exhaustedThreshold&&(this.isExhausted=!0,console.warn("💨 Player exhausted!"))}regenerateStamina(e){if(Date.now()-this.lastStaminaUse<this.staminaConfig.regenDelay)return;const s=this.staminaConfig.regenRate*e;this.staminaConfig.current=Math.min(this.staminaConfig.max,this.staminaConfig.current+s),this.staminaConfig.current>this.staminaConfig.exhaustedThreshold&&(this.isExhausted=!1)}hasInvincibilityFrames(){return this.hasIFrames}getStaminaPercentage(){return this.staminaConfig.current/this.staminaConfig.max*100}update(e){const t=Date.now();if(this.isDodging&&t>=this.dodgeEndTime&&(this.isDodging=!1),this.hasIFrames&&t>=this.iFrameEndTime&&(this.hasIFrames=!1),this.isParrying&&t>=this.parryEndTime&&(this.isParrying=!1),this.isDodging&&this.player){const s=(t-this.dodgeStartTime)/this.dodgeConfig.duration;if(s<=1){const a=1-(1-Math.pow(1-s,3));this.player.mesh.position.x+=this.dodgeDirection.x*e*a,this.player.mesh.position.z+=this.dodgeDirection.z*e*a}}this.regenerateStamina(e)}getState(){return{stamina:this.staminaConfig.current,staminaMax:this.staminaConfig.max,staminaPercent:this.getStaminaPercentage(),isDodging:this.isDodging,isParrying:this.isParrying,isExhausted:this.isExhausted,hasIFrames:this.hasIFrames,canDodge:Date.now()-this.lastDodgeTime>=this.dodgeConfig.cooldown,canParry:Date.now()-this.lastParryTime>=this.parryConfig.cooldown}}}class Ks{constructor(e){this.gameEngine=e,this.comboConfig={resetTime:3e3,multiplierIncrease:.25,maxMultiplier:3,finisherThreshold:5,perfectTimingWindow:200},this.currentCombo=0,this.comboMultiplier=1,this.lastHitTime=0,this.comboActive=!1,this.finisherAvailable=!1,this.comboChain=[],this.totalDamageDealt=0,this.comboMoves={light_attack:{name:"Light Attack",damage:10,hitCount:1,nextMoves:["light_attack","heavy_attack","skill_1"],animationTime:300},heavy_attack:{name:"Heavy Attack",damage:25,hitCount:1,nextMoves:["light_attack","heavy_attack"],animationTime:500},skill_1:{name:"Skill Strike",damage:35,hitCount:2,nextMoves:["skill_2","finisher_basic"],animationTime:600},skill_2:{name:"Power Slash",damage:45,hitCount:3,nextMoves:["finisher_advanced"],animationTime:700},finisher_basic:{name:"Basic Finisher",damage:100,hitCount:1,isFinisher:!0,nextMoves:[],animationTime:1e3,minCombo:5},finisher_advanced:{name:"Advanced Finisher",damage:200,hitCount:1,isFinisher:!0,nextMoves:[],animationTime:1500,minCombo:10},finisher_ultimate:{name:"Ultimate Finisher",damage:500,hitCount:5,isFinisher:!0,nextMoves:[],animationTime:2e3,minCombo:20}},this.classComboTrees={warrior:{basic:["light_attack","heavy_attack","heavy_attack","finisher_basic"],advanced:["light_attack","light_attack","skill_1","heavy_attack","finisher_advanced"],ultimate:["skill_1","skill_2","heavy_attack","heavy_attack","finisher_ultimate"]},mage:{basic:["skill_1","light_attack","skill_1","finisher_basic"],advanced:["skill_1","skill_2","skill_1","finisher_advanced"],ultimate:["skill_2","skill_2","skill_1","skill_2","finisher_ultimate"]},rogue:{basic:["light_attack","light_attack","light_attack","finisher_basic"],advanced:["light_attack","light_attack","skill_1","light_attack","finisher_advanced"],ultimate:["light_attack","skill_1","light_attack","skill_2","finisher_ultimate"]}},this.comboEffects={colors:[16777215,16776960,16750848,16711680,16711935,10309341]},console.log("⚔️ ComboChainSystem initialized")}executeMove(e){const t=Date.now(),s=this.comboMoves[e];if(!s)return console.warn("Unknown move:",e),null;if(this.comboActive&&t-this.lastHitTime>this.comboConfig.resetTime&&this.resetCombo(),this.comboChain.length>0&&!this.comboMoves[this.comboChain[this.comboChain.length-1]].nextMoves.includes(e))return console.warn("Invalid combo move"),null;if(s.isFinisher&&this.currentCombo<s.minCombo)return console.warn("Not enough combo for finisher"),null;const i=this.checkPerfectTiming(t),n=s.damage*this.comboMultiplier*(i?1.5:1);return this.currentCombo+=s.hitCount,this.comboChain.push(e),this.lastHitTime=t,this.comboActive=!0,this.totalDamageDealt+=n,s.isFinisher&&(this.finisherEndTime=t+s.animationTime),this.updateMultiplier(),this.checkFinisherAvailability(),console.log(`⚔️ ${s.name} | Combo: ${this.currentCombo} | Multiplier: ${this.comboMultiplier.toFixed(2)}x | Damage: ${n.toFixed(0)}`),{move:s,damage:n,combo:this.currentCombo,multiplier:this.comboMultiplier,perfectTiming:i,finisherReady:this.finisherAvailable}}checkPerfectTiming(e){if(this.comboChain.length===0)return!1;const t=e-this.lastHitTime,i=this.comboMoves[this.comboChain[this.comboChain.length-1]].animationTime;return Math.abs(t-i)<=this.comboConfig.perfectTimingWindow}updateMultiplier(){const e=1+this.currentCombo*this.comboConfig.multiplierIncrease;this.comboMultiplier=Math.min(e,this.comboConfig.maxMultiplier)}checkFinisherAvailability(){this.finisherAvailable=this.currentCombo>=this.comboConfig.finisherThreshold}resetCombo(){this.currentCombo>0&&console.log(`💥 Combo ended! Total hits: ${this.currentCombo} | Total damage: ${this.totalDamageDealt.toFixed(0)}`),this.currentCombo=0,this.comboMultiplier=1,this.comboActive=!1,this.finisherAvailable=!1,this.comboChain=[],this.totalDamageDealt=0}getNextMoves(){return this.comboChain.length===0?["light_attack","heavy_attack","skill_1"]:this.comboMoves[this.comboChain[this.comboChain.length-1]].nextMoves}getComboColor(){if(this.currentCombo===0)return 16777215;const e=Math.min(Math.floor(this.currentCombo/5),this.comboEffects.colors.length-1);return this.comboEffects.colors[e]}getClassComboTree(e){return this.classComboTrees[e]||this.classComboTrees.warrior}executePresetCombo(e,t){const s=this.classComboTrees[e];if(!s||!s[t]){console.warn("Unknown combo preset");return}const i=s[t];return console.log(`🎯 Executing ${e} ${t} combo:`,i.join(" → ")),i}update(e){const t=Date.now();this.finisherEndTime&&t>=this.finisherEndTime&&(this.resetCombo(),this.finisherEndTime=null),this.comboActive&&t-this.lastHitTime>this.comboConfig.resetTime&&this.resetCombo()}getState(){return{combo:this.currentCombo,multiplier:this.comboMultiplier,finisherAvailable:this.finisherAvailable,comboActive:this.comboActive,nextMoves:this.getNextMoves(),comboColor:this.getComboColor(),totalDamage:this.totalDamageDealt,timeRemaining:Math.max(0,this.comboConfig.resetTime-(Date.now()-this.lastHitTime))}}getStatistics(){return{highestCombo:this.currentCombo,totalMoves:this.comboChain.length,averageDamagePerHit:this.comboChain.length>0?this.totalDamageDealt/this.comboChain.length:0,movesUsed:this.comboChain}}}class Zs{constructor(e){this.gameEngine=e,this.worldSeed=Date.now(),this.generatedContent={levels:new Map,worlds:new Map,items:new Map,enemies:new Map,quests:new Map,dungeons:new Map},this.progressMetrics={playerLevel:1,totalPlayTime:0,itemsCollected:0,enemiesDefeated:0,questsCompleted:0,dungeonsCleared:0,areasExplored:0},this.config={levelScaling:{baseEnemyHealth:50,healthPerLevel:10,baseDamage:10,damagePerLevel:2,experienceMultiplier:1.15},itemGeneration:{baseDropRate:.3,rareDropRate:.05,epicDropRate:.01,legendaryDropRate:.001,itemsPerTier:20},worldExpansion:{initialSize:1e3,expansionRate:500,maxSize:1e4},contentThresholds:{newBiomeEvery:5,newDungeonEvery:3,newQuestlineEvery:10,newGameModeEvery:20}},this.templates={itemPrefixes:["Ancient","Mystical","Cursed","Blessed","Ethereal","Void","Celestial","Infernal","Frozen","Burning"],itemSuffixes:["of Power","of Wisdom","of Destruction","of Protection","of Speed","of Regeneration","of the Ancients","of Chaos","of Order","of Eternity"],enemyTypes:["Wraith","Golem","Dragon","Demon","Elemental","Beast","Construct","Spirit","Horror","Titan"],enemyModifiers:["Shadow","Flame","Frost","Storm","Toxic","Radiant","Void","Arcane","Primal","Divine"],dungeonThemes:["Ruins","Catacombs","Tower","Fortress","Temple","Abyss","Nexus","Sanctum","Citadel","Labyrinth"]},console.log("🎲 ProceduralGenerationSystem initialized")}init(e){e&&(this.progressMetrics.playerLevel=e.level||1),this.generateInitialContent()}generateInitialContent(){for(let e=0;e<10;e++)this.generateLevel(e),this.generateItems(5,e);console.log("✨ Initial content pool generated")}updateProgress(e,t){this.progressMetrics.hasOwnProperty(e)&&(this.progressMetrics[e]+=t,this.checkContentGeneration())}checkContentGeneration(){const e=this.progressMetrics.playerLevel;e%this.config.contentThresholds.newBiomeEvery===0&&this.generateBiome(e),e%this.config.contentThresholds.newDungeonEvery===0&&this.generateDungeon(e),e%this.config.contentThresholds.newQuestlineEvery===0&&this.generateQuestline(e),e%this.config.contentThresholds.newGameModeEvery===0&&this.generateGameMode(e)}generateLevel(e){const t=this.seededRandom(this.worldSeed+e),s={id:`level_${e}`,number:e,difficulty:Math.floor(e/5)+1,size:this.config.worldExpansion.initialSize+e*100,enemyCount:10+e*2,bossCount:Math.max(1,Math.floor(e/5)),treasureCount:5+Math.floor(e/2),theme:this.templates.dungeonThemes[Math.floor(t*this.templates.dungeonThemes.length)],generatedAt:Date.now()};return this.generatedContent.levels.set(s.id,s),s}generateItems(e,t){const s=[];for(let i=0;i<e;i++){const a=this.seededRandom(this.worldSeed+t+i*100),n=this.determineRarity(a),o={id:`item_${t}_${i}_${Date.now()}`,name:this.generateItemName(a,n),tier:t,rarity:n,stats:this.generateItemStats(t,n),value:Math.floor((t+1)*100*(n==="legendary"?10:n==="epic"?5:n==="rare"?2:1)),requiredLevel:t*5,generatedAt:Date.now()};s.push(o),this.generatedContent.items.set(o.id,o)}return s}generateItemName(e,t){const s=Math.floor(e*this.templates.itemPrefixes.length),i=Math.floor(e*13%this.templates.itemSuffixes.length),a=t!=="common"?this.templates.itemPrefixes[s]:"",n=t==="epic"||t==="legendary"?this.templates.itemSuffixes[i]:"",o=["Sword","Staff","Bow","Shield","Armor","Ring","Amulet","Helm","Boots","Gloves"],r=Math.floor(e*7%o.length),l=o[r];return`${a} ${l} ${n}`.trim()}generateItemStats(e,t){const s=t==="legendary"?3:t==="epic"?2:t==="rare"?1.5:1;return{attack:Math.floor((10+e*5)*s),defense:Math.floor((5+e*3)*s),health:Math.floor((20+e*10)*s),mana:Math.floor((15+e*8)*s),speed:Math.floor((5+e*2)*s)}}determineRarity(e){return e<this.config.itemGeneration.legendaryDropRate?"legendary":e<this.config.itemGeneration.epicDropRate?"epic":e<this.config.itemGeneration.rareDropRate?"rare":"common"}generateEnemy(e,t){const s=this.seededRandom(this.worldSeed+e+t.x+t.z),i=Math.floor(s*this.templates.enemyTypes.length),a=Math.floor(s*11%this.templates.enemyModifiers.length),n={id:`enemy_${e}_${Date.now()}_${Math.random()}`,name:`${this.templates.enemyModifiers[a]} ${this.templates.enemyTypes[i]}`,level:e,health:this.config.levelScaling.baseEnemyHealth+e*this.config.levelScaling.healthPerLevel,damage:this.config.levelScaling.baseDamage+e*this.config.levelScaling.damagePerLevel,experience:Math.floor(50*Math.pow(this.config.levelScaling.experienceMultiplier,e)),position:t,abilities:this.generateEnemyAbilities(e,s),lootTable:this.generateLootTable(e),generatedAt:Date.now()};return this.generatedContent.enemies.set(n.id,n),n}generateEnemyAbilities(e,t){const s=Math.min(1+Math.floor(e/5),5),i=[],a=["fireball","ice_blast","lightning_strike","poison_cloud","heal","shield","teleport","summon","rage","fear"];for(let n=0;n<s;n++){const o=Math.floor(t*(n+1)*7%a.length);i.push(a[o])}return i}generateLootTable(e){return{items:this.generateItems(Math.floor(1+e/10),Math.floor(e/5)),gold:Math.floor(50+e*25),experience:Math.floor(50*Math.pow(this.config.levelScaling.experienceMultiplier,e))}}generateBiome(e){const t=this.seededRandom(this.worldSeed+e*1e3),s=["Volcanic","Frozen","Desert","Ocean","Sky","Shadow","Crystal","Fungal","Mechanical","Ethereal"],i=Math.floor(t*s.length),a={id:`biome_${e}_${Date.now()}`,name:`${s[i]} Expanse`,unlockLevel:e,difficulty:Math.floor(e/5)+1,size:2e3+e*100,enemyLevel:e,resources:this.generateBiomeResources(e,s[i]),weather:this.generateBiomeWeather(s[i]),generatedAt:Date.now()};return this.generatedContent.worlds.set(a.id,a),console.log(`🌍 Generated new biome: ${a.name} (Level ${e})`),a}generateBiomeResources(e,t){const s=5+Math.floor(e/10),i=[];for(let a=0;a<s;a++)i.push({name:`${t} Essence`,rarity:this.determineRarity(this.seededRandom(e+a)),value:10+e*5});return i}generateBiomeWeather(e){return{Volcanic:["lava_eruption","ash_fall","heat_wave"],Frozen:["blizzard","snowfall","ice_storm"],Desert:["sandstorm","heat_wave","clear"],Ocean:["underwater","current_strong","rain"],Sky:["strong_winds","cloud_cover","clear"],Shadow:["darkness","void_storms","shadow_fog"],Crystal:["crystal_mist","clear","shimmer"],Fungal:["spore_clouds","fog","light_rain"],Mechanical:["oil_rain","spark_storm","clear"],Ethereal:["aurora","mist","shimmer"]}[e]||["clear"]}generateDungeon(e){const t=this.seededRandom(this.worldSeed+e*500),s=Math.floor(t*this.templates.dungeonThemes.length),i={id:`dungeon_${e}_${Date.now()}`,name:`${this.templates.dungeonThemes[s]} of Level ${e}`,unlockLevel:e,difficulty:Math.floor(e/3)+1,rooms:5+Math.floor(e/2),bossName:this.generateBossName(e,t),loot:this.generateDungeonLoot(e),generatedAt:Date.now()};return this.generatedContent.dungeons.set(i.id,i),console.log(`🏰 Generated new dungeon: ${i.name}`),i}generateBossName(e,t){const s=["Lord","King","Queen","Emperor","Empress","Guardian","Destroyer","Keeper","Master","Overlord"],i=["Azrael","Malachai","Seraphina","Drakonis","Mortis","Infernus","Glacius","Tempest","Umbra","Aether"],a=Math.floor(t*s.length),n=Math.floor(t*13%i.length);return`${s[a]} ${i[n]} the Level ${e}`}generateDungeonLoot(e){return{items:this.generateItems(3+Math.floor(e/5),Math.floor(e/3)),gold:500+e*100,experience:1e3+e*200}}generateQuestline(e){const t=this.seededRandom(this.worldSeed+e*750),s={id:`questline_${e}_${Date.now()}`,name:`The ${this.generateQuestlineName(t)} Chronicle`,unlockLevel:e,questCount:5+Math.floor(e/10),difficulty:Math.floor(e/10)+1,rewards:this.generateQuestlineRewards(e),generatedAt:Date.now()};return this.generatedContent.quests.set(s.id,s),console.log(`📜 Generated new questline: ${s.name}`),s}generateQuestlineName(e){const t=["Forgotten","Ancient","Lost","Hidden","Eternal","Divine","Cursed","Sacred","Mystical","Legendary"],s=["Prophecy","Legacy","Destiny","Covenant","Alliance","War","Revelation","Mystery","Secret","Truth"],i=Math.floor(e*t.length),a=Math.floor(e*17%s.length);return`${t[i]} ${s[a]}`}generateQuestlineRewards(e){return{items:this.generateItems(2,Math.floor(e/5)),gold:1e3+e*200,experience:2e3+e*500,title:`The ${e} Hero`}}generateGameMode(e){const t=["Survival","Time Attack","Boss Rush","Endless Waves","Puzzle Challenge","Stealth Mission","Tower Defense","Race Mode","Gauntlet","Arena"],s=this.seededRandom(this.worldSeed+e*2e3),i=Math.floor(s*t.length),a={id:`mode_${e}_${Date.now()}`,name:`${t[i]} Mode`,unlockLevel:e,difficulty:Math.floor(e/20)+1,description:`Special ${t[i]} gameplay mode`,rewards:this.generateItems(5,Math.floor(e/10)),generatedAt:Date.now()};return console.log(`🎮 Generated new game mode: ${a.name}`),a}seededRandom(e){const t=Math.sin(e)*1e4;return t-Math.floor(t)}getContentForLevel(e){return{levels:Array.from(this.generatedContent.levels.values()).filter(t=>t.number<=e),items:Array.from(this.generatedContent.items.values()).filter(t=>t.requiredLevel<=e),biomes:Array.from(this.generatedContent.worlds.values()).filter(t=>t.unlockLevel<=e),dungeons:Array.from(this.generatedContent.dungeons.values()).filter(t=>t.unlockLevel<=e),quests:Array.from(this.generatedContent.quests.values()).filter(t=>t.unlockLevel<=e)}}update(e){this.progressMetrics.totalPlayTime+=e;const t=this.progressMetrics.playerLevel,s=5;for(let i=t;i<=t+s;i++)this.generatedContent.levels.has(`level_${i}`)||this.generateLevel(i)}getStatistics(){return{levels:this.generatedContent.levels.size,items:this.generatedContent.items.size,enemies:this.generatedContent.enemies.size,worlds:this.generatedContent.worlds.size,dungeons:this.generatedContent.dungeons.size,quests:this.generatedContent.quests.size,playerProgress:this.progressMetrics}}}class Ys{constructor(e,t,s){this.scene=e,this.renderer=t,this.camera=s,this.settings={quality:"ultra",shadows:!0,postProcessing:!0,particleQuality:"high",textureQuality:"high",modelDetail:"high",animationSmoothing:!0},this.modelCache=new Map,this.materialCache=new Map,this.animationMixers=[],this.lights={ambient:null,directional:[],point:[],spot:[],hemisphere:null},this.particleSystems=[],this.postProcessing={bloom:!0,dof:!1,motionBlur:!1,ssao:!1,colorGrading:!0},console.log("🎨 Enhanced3DGraphicsSystem initialized")}init(){this.setupRenderer(),this.setupLighting(),this.setupShadows(),this.setupPostProcessing(),console.log("✨ Advanced 3D graphics initialized")}setupRenderer(){this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=Le,this.renderer.toneMapping=Ae,this.renderer.toneMappingExposure=1,this.renderer.outputColorSpace=Et,this.renderer.physicallyCorrectLights=!0,(this.settings.quality==="ultra"||this.settings.quality==="high")&&(this.renderer.antialias=!0)}setupLighting(){this.lights.hemisphere=new Ie(8900331,9137991,.6),this.scene.add(this.lights.hemisphere);const e=new U(16774630,1.2);e.position.set(50,100,50),e.castShadow=!0,e.shadow.mapSize.width=4096,e.shadow.mapSize.height=4096,e.shadow.camera.near=.5,e.shadow.camera.far=500,e.shadow.camera.left=-100,e.shadow.camera.right=100,e.shadow.camera.top=100,e.shadow.camera.bottom=-100,e.shadow.bias=-1e-4,this.lights.directional.push(e),this.scene.add(e);const t=new U(10309341,.4);t.position.set(-50,50,-50),this.lights.directional.push(t),this.scene.add(t);for(let s=0;s<5;s++){const i=new F(10309341,.8,30);i.position.set(Math.random()*40-20,Math.random()*10+5,Math.random()*40-20),this.lights.point.push(i),this.scene.add(i)}}setupShadows(){this.settings.shadows&&this.lights.directional.forEach(e=>{e.castShadow=!0})}setupPostProcessing(){this.settings.postProcessing&&(this.renderer.toneMapping=Ae,this.renderer.toneMappingExposure=1.2)}createPlayerModel(e){const t=new _,s=new q(.5,1.5,16,32),i=this.createAdvancedMaterial({color:4886754,metalness:.3,roughness:.4,emissive:1718874,emissiveIntensity:.2}),a=new d(s,i);a.castShadow=!0,a.receiveShadow=!0,t.add(a);const n=new q(.52,1.52,16,32),o=new D({color:10309341,side:X,transparent:!0,opacity:.3}),r=new d(n,o);return t.add(r),this.addCharacterParticles(t),this.addClassEffects(t,e),t.userData.type="player",t.userData.class=e,t}createEnemyModel(e,t){const s=new _,i=this.getEnemyGeometry(e),a=this.createAdvancedMaterial({color:this.getEnemyColor(e),metalness:.5,roughness:.3,emissive:this.getEnemyColor(e),emissiveIntensity:.3}),n=new d(i,a);n.castShadow=!0,n.receiveShadow=!0,s.add(n);const o=1+t*.05;return s.scale.setScalar(o),t>10&&this.addEnemyAura(s,t),this.addEnemyAnimations(s,e),s.userData.type="enemy",s.userData.enemyType=e,s.userData.level=t,s}getEnemyGeometry(e){const t={wraith:new z(.6,2,8),golem:new C(1.5,2,1),dragon:new f(1,16,16),demon:new Ze(.8,1),elemental:new Je(.7),default:new f(.7,16,16)};return t[e.toLowerCase()]||t.default}getEnemyColor(e){const t={shadow:2949197,flame:16729344,frost:65535,toxic:65280,void:1703987,default:9109504};return t[e.toLowerCase()]||t.default}createAdvancedMaterial(e){const t=new g({color:e.color||16777215,metalness:e.metalness||0,roughness:e.roughness||1,emissive:e.emissive||0,emissiveIntensity:e.emissiveIntensity||0});return this.settings.quality==="ultra"&&(t.envMapIntensity=1),t}addCharacterParticles(e){const s=new M,i=new Float32Array(150);for(let o=0;o<150;o+=3)i[o]=(Math.random()-.5)*2,i[o+1]=Math.random()*2,i[o+2]=(Math.random()-.5)*2;s.setAttribute("position",new ae(i,3));const a=new T({color:10309341,size:.05,transparent:!0,opacity:.6,blending:k}),n=new P(s,a);n.userData.isParticleEffect=!0,e.add(n)}addClassEffects(e,t){const s={warrior:{color:16711680,intensity:.5},mage:{color:39423,intensity:.8},rogue:{color:10309341,intensity:.4},default:{color:16777215,intensity:.3}},i=s[t]||s.default,a=new f(.7,16,16),n=new D({color:i.color,transparent:!0,opacity:.2,blending:k}),o=new d(a,n);o.userData.isAura=!0,e.add(o)}addEnemyAura(e,t){const s=Math.min(t/50,1),i=new f(1.5,16,16),a=new D({color:16711680,transparent:!0,opacity:.1+s*.2,blending:k}),n=new d(i,a);n.userData.isAura=!0,e.add(n)}addEnemyAnimations(e,t){e.userData.animations={idle:{type:"float",speed:.5},attack:{type:"lunge",speed:2},hurt:{type:"shake",speed:5}}}createTerrainMesh(e,t){const s=new $(e,e,t,t),i=s.attributes.position.array;for(let o=0;o<i.length;o+=3){const r=i[o],l=i[o+1];i[o+2]=Math.sin(r*.1)*Math.cos(l*.1)*2}s.computeVertexNormals();const a=this.createAdvancedMaterial({color:2969622,metalness:0,roughness:.9}),n=new d(s,a);return n.rotation.x=-Math.PI/2,n.receiveShadow=!0,n.userData.type="terrain",n}createWeatherEffect(e){const s=new M,i=new Float32Array(1e3*3);for(let o=0;o<1e3*3;o+=3)i[o]=(Math.random()-.5)*50,i[o+1]=Math.random()*50,i[o+2]=(Math.random()-.5)*50;s.setAttribute("position",new ae(i,3));const a=new T({color:this.getWeatherColor(e),size:.2,transparent:!0,opacity:.6,blending:k}),n=new P(s,a);return n.userData.weatherType=e,n.userData.isWeather=!0,n}getWeatherColor(e){const t={rain:8965375,snow:16777215,fire:16729344,ash:3355443,leaves:8368233,default:16777215};return t[e]||t.default}createItemModel(e){const t=new _,s=new Ze(.3,2),i=this.createAdvancedMaterial({color:this.getRarityColor(e.rarity),metalness:.8,roughness:.2,emissive:this.getRarityColor(e.rarity),emissiveIntensity:.5}),a=new d(s,i);return a.castShadow=!0,t.add(a),(e.rarity==="legendary"||e.rarity==="epic")&&this.addItemGlow(t,e.rarity),t.userData.rotationSpeed=.5,t}getRarityColor(e){const t={common:13421772,uncommon:65280,rare:39423,epic:10309341,legendary:16755200};return t[e]||t.common}addItemGlow(e,t){const s=new f(.5,16,16),i=new D({color:this.getRarityColor(t),transparent:!0,opacity:.3,blending:k}),a=new d(s,i);a.userData.isGlow=!0,e.add(a)}createAbilityEffect(e,t){const s=new _,i=100,a=new M,n=new Float32Array(i*3),o=[];for(let c=0;c<i;c++){const m=c*3;n[m]=t.x,n[m+1]=t.y,n[m+2]=t.z,o.push({x:(Math.random()-.5)*2,y:Math.random()*2,z:(Math.random()-.5)*2})}a.setAttribute("position",new ae(n,3));const r=new T({color:this.getAbilityColor(e),size:.3,transparent:!0,opacity:1,blending:k}),l=new P(a,r);return l.userData.velocities=o,l.userData.isAbilityEffect=!0,l.userData.lifetime=2e3,l.userData.createdAt=Date.now(),s.add(l),this.particleSystems.push(l),s}getAbilityColor(e){const t={fire:16729344,ice:65535,lightning:16776960,shadow:10309341,holy:16777215,default:10309341};return t[e]||t.default}update(e){for(let t=this.particleSystems.length-1;t>=0;t--){const s=this.particleSystems[t];if(s.userData.isAbilityEffect){const i=Date.now()-s.userData.createdAt;if(i>s.userData.lifetime){this.scene.remove(s),this.particleSystems.splice(t,1);continue}const a=s.geometry.attributes.position.array,n=s.userData.velocities;for(let r=0;r<n.length;r++){const l=r*3;a[l]+=n[r].x*e*.01,a[l+1]+=n[r].y*e*.01,a[l+2]+=n[r].z*e*.01}s.geometry.attributes.position.needsUpdate=!0;const o=1-i/s.userData.lifetime;s.material.opacity=o}}this.lights.point.forEach((t,s)=>{const i=Date.now()*.001;t.intensity=.5+Math.sin(i+s)*.3}),this.scene.traverse(t=>{if(t.userData.rotationSpeed&&(t.rotation.y+=t.userData.rotationSpeed*e*.01),t.userData.isAura){const s=1+Math.sin(Date.now()*.002)*.1;t.scale.setScalar(s)}})}setQuality(e){switch(this.settings.quality=e,e){case"low":this.settings.shadows=!1,this.settings.postProcessing=!1,this.settings.particleQuality="low";break;case"medium":this.settings.shadows=!0,this.settings.postProcessing=!1,this.settings.particleQuality="medium";break;case"high":this.settings.shadows=!0,this.settings.postProcessing=!0,this.settings.particleQuality="high";break;case"ultra":this.settings.shadows=!0,this.settings.postProcessing=!0,this.settings.particleQuality="ultra";break}this.applyQualitySettings()}applyQualitySettings(){this.setupRenderer(),this.lights.directional.forEach(e=>{e.castShadow=this.settings.shadows}),console.log(`🎨 Graphics quality set to: ${this.settings.quality}`)}}class Xs{constructor(e){this.gameEngine=e,this.chapters={prologue:{id:"prologue",title:"The Awakening",description:"You awaken in the mystical realm of Emberveil, a world shrouded in twilight and mystery.",unlockLevel:1,quests:["awakening_quest","first_steps","discover_power"],loreEntries:["world_origin","twilight_curse","ancient_prophecy"],completed:!1},chapter1:{id:"chapter1",title:"Shadows of the Past",description:"Ancient ruins whisper secrets of a civilization long forgotten, and dark forces stir in the depths.",unlockLevel:10,quests:["ruins_investigation","shadow_threat","lost_artifact"],loreEntries:["ancient_civilization","shadow_realm_origin","first_guardians"],completed:!1},chapter2:{id:"chapter2",title:"The Elemental War",description:"The balance of elements has been disrupted. Fire, Ice, Shadow, and Light clash for dominance.",unlockLevel:20,quests:["elemental_conflict","restore_balance","unite_factions"],loreEntries:["elemental_lords","great_war","balance_breaking"],completed:!1},chapter3:{id:"chapter3",title:"Rise of the Dynasty",description:"You must unite the scattered kingdoms under a single banner to face the coming darkness.",unlockLevel:30,quests:["kingdom_alliance","crown_retrieval","coronation"],loreEntries:["dynasty_history","royal_bloodline","crown_power"],completed:!1},chapter4:{id:"chapter4",title:"The Void Awakens",description:"An ancient evil stirs beyond reality itself. The Void threatens to consume all existence.",unlockLevel:40,quests:["void_investigation","seal_breaches","final_battle"],loreEntries:["void_entity","reality_fabric","ultimate_sacrifice"],completed:!1}},this.lore={world_origin:{title:"The Birth of Emberveil",category:"World History",content:"In the beginning, there was only the Void - an endless expanse of nothingness. From this void, the First Light emerged, and with it, the realm of Emberveil was born. The world exists in perpetual twilight, caught between day and night, a testament to the balance that must be maintained.",discovered:!1,unlockCondition:"Start game"},twilight_curse:{title:"The Eternal Twilight",category:"Curses & Blessings",content:"The realm of Emberveil is cursed to exist in eternal twilight. Neither fully in light nor darkness, this state grants the world unique magical properties but also attracts forces from both extremes. Some say the twilight is a blessing, others a curse - but all agree it is the source of the realm's power.",discovered:!1,unlockCondition:"Complete Prologue"},ancient_prophecy:{title:"Prophecy of the Chosen",category:"Prophecies",content:'"When twilight fades and shadows grow long, a hero shall rise from beyond the veil. With power drawn from light and dark, they shall unite the scattered realms and face the Void itself. Only through balance shall salvation come."',discovered:!1,unlockCondition:"Reach Level 5"},ancient_civilization:{title:"The Emberborn Empire",category:"Ancient History",content:"Long before the current age, the Emberborn Empire ruled all of Emberveil. Masters of fire and shadow magic, they built magnificent cities that touched the sky. Their hubris led them to delve too deep into forbidden knowledge, unleashing the Shadow Plague that consumed their civilization in a single night.",discovered:!1,unlockCondition:"Discover Ancient Ruins"},elemental_lords:{title:"The Four Elemental Lords",category:"Legendary Beings",content:"Four primordial beings embody the fundamental forces: Infernus the Flame Lord, Glacius the Frost Monarch, Umbra the Shadow Queen, and Lux the Light Sovereign. Once allies in maintaining balance, they now war for supremacy, threatening to tear the realm apart.",discovered:!1,unlockCondition:"Complete Chapter 1"},void_entity:{title:"The Nameless Void",category:"Cosmic Threats",content:"Beyond the boundaries of reality lurks an entity without name or form - pure entropy given consciousness. It seeks to unmake all creation, returning everything to the primordial void. The ancient seals that bind it weaken with each passing century.",discovered:!1,unlockCondition:"Reach Level 40"}},this.activeEvents=[],this.characters={mentor:{name:"Eldrin the Wise",role:"Mentor",relationship:0,dialogues:["The path ahead is fraught with danger, but I sense great potential within you.","The ancient texts speak of one who would bridge light and shadow.","Remember, true power comes not from strength alone, but from understanding."],unlocked:!0},rival:{name:"Sable Nightshade",role:"Rival",relationship:0,dialogues:["You think you can surpass me? Prove it.","I've been training since before you even knew magic existed.","Perhaps... you are worthy of respect after all."],unlocked:!1,unlockLevel:10},mysterious_ally:{name:"The Veiled One",role:"Mysterious Ally",relationship:0,dialogues:["The threads of fate are tangled... interesting.","I have seen your future in the smoke of time.","When the moment comes, you will know what must be done."],unlocked:!1,unlockLevel:20}},this.playerChoices=[],this.worldState={alignment:"neutral",reputation:{light_faction:0,shadow_faction:0,neutral_faction:0},majorDecisions:[]},console.log("📖 StorylineAndLoreSystem initialized")}init(e){this.unlockChapter("prologue"),this.discoverLore("world_origin"),console.log("📜 Storyline begins...")}unlockChapter(e){const t=this.chapters[e];t&&(console.log(`📖 Chapter Unlocked: ${t.title}`),console.log(`   ${t.description}`),t.loreEntries.forEach(s=>{this.discoverLore(s)}),this.triggerStoryEvent({type:"chapter_start",chapterId:e,title:t.title,description:t.description}))}discoverLore(e){const t=this.lore[e];!t||t.discovered||(t.discovered=!0,console.log(`📚 Lore Discovered: ${t.title}`),console.log(`   ${t.content.substring(0,100)}...`),this.showLoreNotification(t))}showLoreNotification(e){console.log(`✨ New Lore Entry: ${e.title} (${e.category})`)}triggerStoryEvent(e){this.activeEvents.push({...e,timestamp:Date.now(),active:!0}),this.displayNarrative(e)}displayNarrative(e){console.log(`
═══════════════════════════════════════`),console.log(`📜 ${e.title}`),console.log("───────────────────────────────────────"),console.log(`   ${e.description}`),console.log(`═══════════════════════════════════════
`)}makeChoice(e,t){const s={id:e,option:t,timestamp:Date.now()};this.playerChoices.push(s),this.applyChoiceConsequences(e,t),console.log(`⚖️ Choice Made: ${e} - ${t}`)}applyChoiceConsequences(e,t){const i={help_village:{light:{reputation:{light_faction:10},alignment:"light"},ignore:{reputation:{neutral_faction:5},alignment:"neutral"},attack:{reputation:{shadow_faction:15},alignment:"shadow"}},spare_enemy:{mercy:{reputation:{light_faction:15},alignment:"light"},kill:{reputation:{shadow_faction:10},alignment:"shadow"}},ancient_power:{accept:{reputation:{shadow_faction:20},alignment:"shadow"},refuse:{reputation:{light_faction:20},alignment:"light"}}}[e]?.[t];i&&(i.reputation&&Object.entries(i.reputation).forEach(([a,n])=>{this.worldState.reputation[a]+=n}),i.alignment&&this.updateAlignment(i.alignment),this.worldState.majorDecisions.push({choiceId:e,option:t,timestamp:Date.now()}))}updateAlignment(e){const t=["shadow","neutral","light"],s=t.indexOf(this.worldState.alignment),i=t.indexOf(e);i>s?s<t.length-1&&(this.worldState.alignment=t[s+1]):i<s&&s>0&&(this.worldState.alignment=t[s-1]),console.log(`⚖️ Alignment shifted to: ${this.worldState.alignment}`)}getCharacterDialogue(e,t="general"){const s=this.characters[e];if(!s||!s.unlocked)return null;const i=Math.min(Math.floor(s.relationship/30),s.dialogues.length-1);return{character:s.name,role:s.role,text:s.dialogues[i]}}improveRelationship(e,t){const s=this.characters[e];s&&(s.relationship=Math.min(100,s.relationship+t),console.log(`💖 Relationship with ${s.name}: ${s.relationship}%`),s.relationship>=50&&s.relationship-t<50&&console.log(`✨ ${s.name} now trusts you more deeply`))}getCurrentChapter(e){let t=null;return Object.values(this.chapters).forEach(s=>{e>=s.unlockLevel&&!s.completed&&(!t||s.unlockLevel>t.unlockLevel)&&(t=s)}),t}completeChapter(e){const t=this.chapters[e];if(!t)return;t.completed=!0,console.log(`✅ Chapter Completed: ${t.title}`);const s=this.getNextChapter(e);if(s){const i=this.chapters[s];i&&console.log(`📖 Next Chapter Available: ${i.title}`)}}getNextChapter(e){const t=["prologue","chapter1","chapter2","chapter3","chapter4"],s=t.indexOf(e);return t[s+1]}getDiscoveredLore(){return Object.entries(this.lore).filter(([e,t])=>t.discovered).map(([e,t])=>({id:e,...t}))}getLoreByCategory(e){return this.getDiscoveredLore().filter(t=>t.category===e)}getWorldState(){return{alignment:this.worldState.alignment,reputation:this.worldState.reputation,majorDecisions:this.worldState.majorDecisions.length,discoveredLore:this.getDiscoveredLore().length,completedChapters:Object.values(this.chapters).filter(e=>e.completed).length}}update(e,t){const s=this.getCurrentChapter(t);s&&!s.unlocked&&(this.unlockChapter(s.id),s.unlocked=!0),Object.entries(this.characters).forEach(([i,a])=>{!a.unlocked&&t>=(a.unlockLevel||0)&&(a.unlocked=!0,console.log(`👤 New Character Unlocked: ${a.name} (${a.role})`))}),this.activeEvents=this.activeEvents.filter(i=>Date.now()-i.timestamp<3e4)}getProgress(){const e=Object.keys(this.chapters).length,t=Object.values(this.chapters).filter(a=>a.completed).length,s=Object.keys(this.lore).length,i=this.getDiscoveredLore().length;return{chapters:`${t}/${e}`,lore:`${i}/${s}`,choices:this.playerChoices.length,alignment:this.worldState.alignment,charactersUnlocked:Object.values(this.characters).filter(a=>a.unlocked).length}}}class Js{constructor(e){this.gameEngine=e,this.weaponTypes={sword:{name:"Sword",baseDamage:25,attackSpeed:1,range:2,skills:["slash","thrust","whirlwind","blade_dance","execute"],masteryBonus:{damage:1.5,critChance:.15}},axe:{name:"Axe",baseDamage:35,attackSpeed:.8,range:2,skills:["cleave","rend","berserker_rage","shatter","devastate"],masteryBonus:{damage:1.8,critDamage:2}},bow:{name:"Bow",baseDamage:20,attackSpeed:1.2,range:15,skills:["power_shot","multi_shot","rain_of_arrows","snipe","volley"],masteryBonus:{damage:1.4,range:1.5}},staff:{name:"Staff",baseDamage:30,attackSpeed:.9,range:10,skills:["fireball","ice_lance","arcane_blast","meteor","chain_lightning"],masteryBonus:{magicPower:1.8,manaCost:.7}},dagger:{name:"Dagger",baseDamage:15,attackSpeed:1.5,range:1.5,skills:["backstab","poison_strike","shadow_step","assassinate","flurry"],masteryBonus:{critChance:.25,attackSpeed:1.3}},spear:{name:"Spear",baseDamage:28,attackSpeed:1.1,range:3,skills:["pierce","sweep","charge","impale","dragon_strike"],masteryBonus:{damage:1.6,range:1.3}},hammer:{name:"Hammer",baseDamage:40,attackSpeed:.7,range:2,skills:["crush","ground_slam","shockwave","earthquake","titanic_blow"],masteryBonus:{damage:2,stun:1.5}},wand:{name:"Wand",baseDamage:18,attackSpeed:1.3,range:8,skills:["magic_missile","heal","shield","teleport","time_warp"],masteryBonus:{magicPower:1.5,castSpeed:1.3}}},this.proficiency={},Object.keys(this.weaponTypes).forEach(t=>{this.proficiency[t]={level:1,experience:0,nextLevel:100,masteryTier:"novice",unlockedSkills:[this.weaponTypes[t].skills[0]],bonuses:{}}}),this.equippedWeapon=null,this.masteryTiers={novice:{level:1,bonusMultiplier:1},adept:{level:10,bonusMultiplier:1.2},expert:{level:25,bonusMultiplier:1.5},master:{level:50,bonusMultiplier:2},grandmaster:{level:100,bonusMultiplier:3}},this.skillCooldowns={},this.weaponEvolution={tiers:["common","uncommon","rare","epic","legendary","mythic"],requirements:{uncommon:{proficiencyLevel:5,materials:["basic_ore"]},rare:{proficiencyLevel:15,materials:["rare_gem","enchanted_metal"]},epic:{proficiencyLevel:30,materials:["epic_crystal","ancient_rune"]},legendary:{proficiencyLevel:50,materials:["legendary_essence","dragon_scale"]},mythic:{proficiencyLevel:75,materials:["mythic_fragment","void_core","celestial_dust"]}}},console.log("⚔️ WeaponSkillSystem initialized")}equipWeapon(e,t="common"){if(!this.weaponTypes[e]){console.warn("Unknown weapon type:",e);return}this.equippedWeapon={type:e,tier:t,data:this.weaponTypes[e],proficiency:this.proficiency[e]},console.log(`⚔️ Equipped ${t} ${e}`)}useSkill(e){if(!this.equippedWeapon)return{success:!1,reason:"no_weapon"};if(!this.equippedWeapon.proficiency.unlockedSkills.includes(e))return{success:!1,reason:"skill_locked"};const s=this.skillCooldowns[e];if(s&&Date.now()<s)return{success:!1,reason:"on_cooldown",remaining:s-Date.now()};const i=this.getSkillDamage(e),a=this.getProficiencyBonus(),n=i*a;return this.skillCooldowns[e]=Date.now()+this.getSkillCooldown(e),this.gainExperience(this.equippedWeapon.type,10),console.log(`💥 Used ${e}: ${n.toFixed(0)} damage`),{success:!0,skillName:e,damage:n,proficiencyBonus:a}}getSkillDamage(e){if(!this.equippedWeapon)return 0;const t=this.equippedWeapon.data,s=t.skills.indexOf(e);return t.baseDamage*(1+s*.5)}getSkillCooldown(e){return this.equippedWeapon?1e3+this.equippedWeapon.data.skills.indexOf(e)*2e3:0}gainExperience(e,t){const s=this.proficiency[e];if(s)for(s.experience+=t;s.experience>=s.nextLevel;)s.experience-=s.nextLevel,s.level++,s.nextLevel=Math.floor(s.nextLevel*1.5),this.onProficiencyLevelUp(e,s)}onProficiencyLevelUp(e,t){if(console.log(`📈 ${e} proficiency reached level ${t.level}!`),t.level%5===0){const s=this.weaponTypes[e],i=Math.floor(t.level/5);if(i<s.skills.length){const a=s.skills[i];t.unlockedSkills.push(a),console.log(`✨ Unlocked skill: ${a}`)}}this.updateMasteryTier(e,t),this.calculateProficiencyBonuses(e,t)}updateMasteryTier(e,t){const s=t.masteryTier;t.level>=100?t.masteryTier="grandmaster":t.level>=50?t.masteryTier="master":t.level>=25?t.masteryTier="expert":t.level>=10?t.masteryTier="adept":t.masteryTier="novice",s!==t.masteryTier&&console.log(`🏆 ${e} mastery: ${t.masteryTier.toUpperCase()}!`)}calculateProficiencyBonuses(e,t){const s=this.weaponTypes[e],i=this.masteryTiers[t.masteryTier].bonusMultiplier;t.bonuses={},Object.entries(s.masteryBonus).forEach(([a,n])=>{t.bonuses[a]=n*i})}getProficiencyBonus(){if(!this.equippedWeapon)return 1;const e=this.equippedWeapon.proficiency,t=this.masteryTiers[e.masteryTier].bonusMultiplier;return 1+e.level*.02*t}evolveWeapon(e,t){if(!this.equippedWeapon||this.equippedWeapon.type!==e)return{success:!1,reason:"weapon_not_equipped"};const s=this.equippedWeapon.tier,i=this.weaponEvolution.tiers,a=i.indexOf(s);if(a>=i.length-1)return{success:!1,reason:"max_tier"};const n=i[a+1],o=this.weaponEvolution.requirements[n],r=this.proficiency[e];return r.level<o.proficiencyLevel?{success:!1,reason:"proficiency_too_low",required:o.proficiencyLevel,current:r.level}:(this.equippedWeapon.tier=n,console.log(`✨ Weapon evolved to ${n}!`),{success:!0,newTier:n})}getWeaponStats(){if(!this.equippedWeapon)return null;const e=this.equippedWeapon.data,t=this.equippedWeapon.proficiency,s=this.getTierMultiplier(this.equippedWeapon.tier),i=this.getProficiencyBonus();return{type:this.equippedWeapon.type,tier:this.equippedWeapon.tier,damage:e.baseDamage*s*i,attackSpeed:e.attackSpeed*(t.bonuses.attackSpeed||1),range:e.range*(t.bonuses.range||1),proficiencyLevel:t.level,masteryTier:t.masteryTier,unlockedSkills:t.unlockedSkills,bonuses:t.bonuses}}getTierMultiplier(e){return{common:1,uncommon:1.3,rare:1.7,epic:2.2,legendary:3,mythic:5}[e]||1}getAllProficiency(){return Object.entries(this.proficiency).map(([e,t])=>({weapon:e,level:t.level,experience:t.experience,nextLevel:t.nextLevel,masteryTier:t.masteryTier,unlockedSkills:t.unlockedSkills.length,totalSkills:this.weaponTypes[e].skills.length}))}update(e){}getState(){return{equippedWeapon:this.equippedWeapon?{type:this.equippedWeapon.type,tier:this.equippedWeapon.tier,stats:this.getWeaponStats()}:null,proficiency:this.getAllProficiency(),availableSkills:this.equippedWeapon?this.equippedWeapon.proficiency.unlockedSkills:[]}}}class ei{constructor(e){this.gameEngine=e,this.difficultySettings={easy:{reactionTime:1e3,accuracy:.5,strategyComplexity:1,cooperationLevel:.3},normal:{reactionTime:500,accuracy:.7,strategyComplexity:2,cooperationLevel:.6},hard:{reactionTime:250,accuracy:.85,strategyComplexity:3,cooperationLevel:.8},expert:{reactionTime:100,accuracy:.95,strategyComplexity:4,cooperationLevel:1}},this.currentDifficulty="normal",this.formations={circle:{name:"Circle Formation",positions:(t,s,i=5)=>{const a=[];for(let n=0;n<s;n++){const o=n/s*Math.PI*2;a.push({x:t.x+Math.cos(o)*i,z:t.z+Math.sin(o)*i})}return a},strategy:"surround"},line:{name:"Line Formation",positions:(t,s,i=2)=>{const a=[],n=t.x-s/2*i;for(let o=0;o<s;o++)a.push({x:n+o*i,z:t.z});return a},strategy:"frontal_assault"},wedge:{name:"Wedge Formation",positions:(t,s)=>{const i=[];let a=0,n=1,o=0;for(;o<s;){const r=t.x-n/2*2;for(let l=0;l<n&&o<s;l++)i.push({x:r+l*2,z:t.z-a*2}),o++;a++,n+=2}return i},strategy:"breakthrough"},scattered:{name:"Scattered Formation",positions:(t,s,i=10)=>{const a=[];for(let n=0;n<s;n++){const o=Math.random()*Math.PI*2,r=Math.random()*i;a.push({x:t.x+Math.cos(o)*r,z:t.z+Math.sin(o)*r})}return a},strategy:"guerrilla"}},this.bossPhases={phase1:{name:"Normal",healthThreshold:1,attackPattern:"basic",speed:1,abilities:["basic_attack"]},phase2:{name:"Enraged",healthThreshold:.75,attackPattern:"aggressive",speed:1.3,abilities:["basic_attack","power_attack","dash"]},phase3:{name:"Desperate",healthThreshold:.5,attackPattern:"mixed",speed:1.5,abilities:["basic_attack","power_attack","dash","summon_minions"]},phase4:{name:"Berserk",healthThreshold:.25,attackPattern:"chaos",speed:1.8,abilities:["basic_attack","power_attack","dash","summon_minions","ultimate"]}},this.enemyGroups=[],this.playerPerformance={wins:0,losses:0,avgTimeToKill:30,damageTaken:0,perfectDodges:0},this.cooperationStrategies=["focus_fire","protect_weak","combo_attack","flank","heal_support"],console.log("🧠 TacticalCombatAI initialized")}createEnemyGroup(e,t,s="circle"){const i=this.formations[s];if(!i)return console.warn("Unknown formation:",s),null;const a=i.positions(e,t),n=i.strategy,o={id:`group_${Date.now()}`,centerPosition:e,formation:s,strategy:n,enemies:[],active:!0,createdAt:Date.now()};return a.forEach((r,l)=>{o.enemies.push({id:`enemy_${Date.now()}_${l}`,position:{...r,y:0},formationPosition:l,targetPosition:r,state:"idle",health:100,maxHealth:100})}),this.enemyGroups.push(o),console.log(`👥 Created ${s} formation with ${t} enemies`),o}updateBossAI(e,t){if(!e)return;const s=e.health/e.maxHealth;let i=this.bossPhases.phase1;Object.values(this.bossPhases).forEach(a=>{s<=a.healthThreshold&&(i=a)}),e.currentPhase!==i.name&&(e.currentPhase=i.name,this.onBossPhaseTransition(e,i)),this.executeBossPhase(e,i,t)}onBossPhaseTransition(e,t){console.log(`⚡ Boss entered ${t.name} phase!`),e.speed=e.baseSpeed*t.speed,e.availableAbilities=t.abilities,t.name==="Enraged"?console.log("💢 Boss is now enraged!"):t.name==="Berserk"&&console.log("🔥 Boss has entered berserk mode!")}executeBossPhase(e,t,s){switch(t.attackPattern){case"basic":this.executeBasicPattern(e,s);break;case"aggressive":this.executeAggressivePattern(e,s);break;case"mixed":this.executeMixedPattern(e,s);break;case"chaos":this.executeChaosPattern(e,s);break}}executeBasicPattern(e,t){(!e.nextAttackTime||Date.now()>=e.nextAttackTime)&&(this.bossAttack(e,"basic_attack"),e.nextAttackTime=Date.now()+2e3)}executeAggressivePattern(e,t){if(!e.nextAttackTime||Date.now()>=e.nextAttackTime){const s=Math.random()>.3?"basic_attack":"power_attack";this.bossAttack(e,s),e.nextAttackTime=Date.now()+1500}}executeMixedPattern(e,t){if(!e.nextAttackTime||Date.now()>=e.nextAttackTime){const s=e.availableAbilities,i=s[Math.floor(Math.random()*s.length)];this.bossAttack(e,i),e.nextAttackTime=Date.now()+1e3}}executeChaosPattern(e,t){if(!e.nextAttackTime||Date.now()>=e.nextAttackTime){const s=e.availableAbilities,i=s[Math.floor(Math.random()*s.length)];this.bossAttack(e,i),e.nextAttackTime=Date.now()+(500+Math.random()*1e3)}}bossAttack(e,t){console.log(`💥 Boss uses ${t}!`)}updateGroupTactics(e,t,s){if(!e.active)return;const i=this.difficultySettings[this.currentDifficulty];switch(this.selectCooperationStrategy(e,i)){case"focus_fire":this.executeFocusFire(e,t);break;case"protect_weak":this.executeProtectWeak(e);break;case"combo_attack":this.executeComboAttack(e,t);break;case"flank":this.executeFlank(e,t);break;case"heal_support":this.executeHealSupport(e);break}e.enemies.forEach(n=>{this.updateEnemyAI(n,t,i,s)})}selectCooperationStrategy(e,t){if(Math.random()>t.cooperationLevel)return null;const i=e.enemies.filter(n=>n.health<n.maxHealth*.3).length,a=e.enemies.length;return i>a*.3?"protect_weak":a>=3?"combo_attack":this.cooperationStrategies[Math.floor(Math.random()*this.cooperationStrategies.length)]}executeFocusFire(e,t){e.enemies.forEach(s=>{s.targetPosition=t,s.strategy="aggressive"})}executeProtectWeak(e){e.enemies.filter(s=>s.health<s.maxHealth*.3),e.enemies.filter(s=>s.health>=s.maxHealth*.3).forEach(s=>{s.strategy="protect"})}executeComboAttack(e,t){e.enemies.forEach((i,a)=>{i.attackTime=Date.now()+a*500,i.strategy="combo"})}executeFlank(e,t){const s=Math.floor(e.enemies.length/2);e.enemies.forEach((i,a)=>{const n=a<s?-1:1;i.targetPosition={x:t.x+n*5,z:t.z},i.strategy="flank"})}executeHealSupport(e){const t=e.enemies.filter(i=>i.type==="healer"),s=e.enemies.filter(i=>i.health<i.maxHealth*.7);t.forEach(i=>{s.length>0&&(i.healTarget=s[0],i.strategy="support")})}updateEnemyAI(e,t,s,i){if(!e.canAct)if(!e.nextActionTime||Date.now()>=e.nextActionTime)e.canAct=!0;else return;switch(e.strategy||"default"){case"aggressive":this.moveTowards(e,t,i);break;case"defensive":this.maintainDistance(e,t,5,i);break;case"evasive":this.evadePlayer(e,t,i);break;default:const n=this.getDistance(e.position,t);n>10?this.moveTowards(e,t,i):n<3&&this.moveAway(e,t,i)}e.canAct=!1,e.nextActionTime=Date.now()+s.reactionTime}moveTowards(e,t,s){const i=t.x-e.position.x,a=t.z-e.position.z,n=Math.sqrt(i*i+a*a);n>.5&&(e.position.x+=i/n*2*s*.01,e.position.z+=a/n*2*s*.01)}moveAway(e,t,s){const i=e.position.x-t.x,a=e.position.z-t.z,n=Math.sqrt(i*i+a*a);n>.1&&(e.position.x+=i/n*2*s*.01,e.position.z+=a/n*2*s*.01)}maintainDistance(e,t,s,i){const a=this.getDistance(e.position,t);a<s-1?this.moveAway(e,t,i):a>s+1&&this.moveTowards(e,t,i)}evadePlayer(e,t,s){const i=e.position.x-t.x,a=e.position.z-t.z;e.position.x+=a*s*.01,e.position.z-=i*s*.01}getDistance(e,t){const s=e.x-t.x,i=e.z-t.z;return Math.sqrt(s*s+i*i)}updateAdaptiveDifficulty(e,t,s){e?this.playerPerformance.wins++:this.playerPerformance.losses++,this.playerPerformance.avgTimeToKill=(this.playerPerformance.avgTimeToKill+t)/2,this.playerPerformance.damageTaken+=s;const i=this.playerPerformance.wins/(this.playerPerformance.wins+this.playerPerformance.losses);i>.8&&this.currentDifficulty!=="expert"?this.increaseDifficulty():i<.3&&this.currentDifficulty!=="easy"&&this.decreaseDifficulty()}increaseDifficulty(){const e=["easy","normal","hard","expert"],t=e.indexOf(this.currentDifficulty);t<e.length-1&&(this.currentDifficulty=e[t+1],console.log(`⚡ AI Difficulty increased to: ${this.currentDifficulty}`))}decreaseDifficulty(){const e=["easy","normal","hard","expert"],t=e.indexOf(this.currentDifficulty);t>0&&(this.currentDifficulty=e[t-1],console.log(`📉 AI Difficulty decreased to: ${this.currentDifficulty}`))}update(e,t){this.enemyGroups.forEach(s=>{s.active&&this.updateGroupTactics(s,t,e)})}getState(){return{difficulty:this.currentDifficulty,activeGroups:this.enemyGroups.filter(e=>e.active).length,playerPerformance:this.playerPerformance}}}class ti{constructor(e){this.gameEngine=e,this.arenaModes={duel_1v1:{name:"1v1 Duel",playerCount:2,timeLimit:18e4,winCondition:"elimination",mapSize:"small"},team_2v2:{name:"2v2 Team Arena",playerCount:4,timeLimit:3e5,winCondition:"team_elimination",mapSize:"medium"},team_3v3:{name:"3v3 Team Arena",playerCount:6,timeLimit:42e4,winCondition:"team_elimination",mapSize:"large"},free_for_all:{name:"Free For All",playerCount:6,timeLimit:6e5,winCondition:"most_kills",mapSize:"large"}},this.rankTiers=[{name:"Bronze",minRating:0,maxRating:1e3,color:13467442},{name:"Silver",minRating:1e3,maxRating:1500,color:12632256},{name:"Gold",minRating:1500,maxRating:2e3,color:16766720},{name:"Platinum",minRating:2e3,maxRating:2500,color:15066338},{name:"Diamond",minRating:2500,maxRating:3e3,color:12186367},{name:"Master",minRating:3e3,maxRating:3500,color:10309341},{name:"Grandmaster",minRating:3500,maxRating:9999,color:16711680}],this.playerRatings=new Map,this.activeMatches=[],this.matchmakingQueue={duel_1v1:[],team_2v2:[],team_3v3:[],free_for_all:[]},this.currentSeason={number:1,startDate:Date.now(),endDate:Date.now()+2160*60*60*1e3,rewards:{bronze:["bronze_mount","1000_gold"],silver:["silver_mount","2000_gold","silver_title"],gold:["gold_mount","5000_gold","gold_title"],platinum:["platinum_mount","10000_gold","platinum_title"],diamond:["diamond_mount","20000_gold","diamond_title"],master:["master_mount","50000_gold","master_title","master_armor"],grandmaster:["grandmaster_mount","100000_gold","grandmaster_title","grandmaster_weapon"]}},this.honorPoints=new Map,this.titles={gladiator:{name:"Gladiator",requirement:{wins:100},bonus:{damage:1.05}},duelist:{name:"Duelist",requirement:{duelWins:50},bonus:{critChance:.05}},warlord:{name:"Warlord",requirement:{teamWins:200},bonus:{health:1.1}},champion:{name:"Champion",requirement:{rating:3e3},bonus:{allStats:1.1}},legend:{name:"Legend",requirement:{grandmasterSeasons:3},bonus:{allStats:1.15}}},this.playerTitles=new Map,this.pendingDuels=[],this.activeDuels=[],this.spectators=new Map,console.log("⚔️ PvPArenaSystem initialized")}queueForMatch(e,t){if(!this.arenaModes[t])return{success:!1,reason:"invalid_mode"};if(this.isPlayerInQueue(e))return{success:!1,reason:"already_in_queue"};const s=this.getPlayerRating(e);return this.matchmakingQueue[t].push({playerId:e,rating:s,queueTime:Date.now()}),console.log(`🎮 Player ${e} queued for ${t} (Rating: ${s})`),this.tryMatchmaking(t),{success:!0,queuePosition:this.matchmakingQueue[t].length}}tryMatchmaking(e){const t=this.arenaModes[e],s=this.matchmakingQueue[e];if(s.length<t.playerCount)return;s.sort((a,n)=>a.rating-n.rating);const i=[];for(let a=0;a<t.playerCount&&s.length>0;a++)i.push(s.shift());this.createMatch(e,i)}createMatch(e,t){const s=this.arenaModes[e],i={id:`match_${Date.now()}`,mode:e,config:s,players:t.map(a=>({id:a.playerId,rating:a.rating,kills:0,deaths:0,damage:0,healing:0,team:e.includes("team")?Math.random()>.5?"red":"blue":null})),startTime:Date.now(),endTime:null,status:"active",winner:null};if(e.includes("team")){const a=Math.floor(t.length/2);i.players.forEach((n,o)=>{n.team=o<a?"red":"blue"})}return this.activeMatches.push(i),console.log(`🏟️ Match created: ${s.name} (${t.length} players)`),i}challengeToDuel(e,t,s=0){if(this.isPlayerInMatch(t)||this.isPlayerInQueue(t))return{success:!1,reason:"target_busy"};const i={id:`duel_${Date.now()}`,challenger:e,target:t,wager:s,status:"pending",timestamp:Date.now(),expiresAt:Date.now()+6e4};return this.pendingDuels.push(i),console.log(`⚔️ Duel challenge sent from ${e} to ${t} (Wager: ${s})`),{success:!0,duelId:i.id}}acceptDuel(e,t){const s=this.pendingDuels.find(a=>a.id===e&&a.target===t);if(!s)return{success:!1,reason:"duel_not_found"};if(Date.now()>s.expiresAt)return{success:!1,reason:"duel_expired"};this.pendingDuels=this.pendingDuels.filter(a=>a.id!==e);const i=this.createMatch("duel_1v1",[{playerId:s.challenger,rating:this.getPlayerRating(s.challenger)},{playerId:s.target,rating:this.getPlayerRating(s.target)}]);return i.wager=s.wager,i.isDuel=!0,this.activeDuels.push(i),console.log(`⚔️ Duel accepted! ${s.challenger} vs ${s.target}`),{success:!0,matchId:i.id}}endMatch(e,t){const s=this.activeMatches.find(a=>a.id===e);if(!s)return;s.status="completed",s.endTime=Date.now(),s.winner=t,s.players.forEach(a=>{const n=a.id===t||s.config.winCondition==="team_elimination"&&s.players.find(o=>o.id===t)?.team===a.team;this.updateRating(a.id,n,s.players.map(o=>o.rating))});const i=this.calculateHonorPoints(s,t);if(this.awardHonorPoints(t,i),s.isDuel&&s.wager>0){const a=s.players.find(n=>n.id!==t)?.id;console.log(`💰 ${t} wins ${s.wager} gold from ${a}`)}return this.checkTitleUnlocks(t),console.log(`🏆 Match ended! Winner: ${t}`),{winner:t,honorGained:i,ratingChange:this.getPlayerRating(t)}}updateRating(e,t,s){const i=this.getPlayerRating(e),a=s.reduce((m,u)=>m+u,0)/s.length,n=32,o=1/(1+Math.pow(10,(a-i)/400)),l=Math.floor(n*((t?1:0)-o)),c=Math.max(0,i+l);this.playerRatings.set(e,c),console.log(`📊 ${e} rating: ${i} → ${c} (${l>0?"+":""}${l})`)}getPlayerRating(e){return this.playerRatings.get(e)||1e3}getPlayerRank(e){const t=this.getPlayerRating(e);return this.rankTiers.find(s=>t>=s.minRating&&t<=s.maxRating)||this.rankTiers[0]}calculateHonorPoints(e,t){const i=e.config.playerCount/2,a=this.getPlayerRank(t),n=this.rankTiers.indexOf(a)*10;return Math.floor(100*i+n)}awardHonorPoints(e,t){const s=this.honorPoints.get(e)||0;this.honorPoints.set(e,s+t),console.log(`🏅 ${e} earned ${t} honor points (Total: ${s+t})`)}checkTitleUnlocks(e){const t=this.getPlayerStats(e);Object.entries(this.titles).forEach(([s,i])=>{this.meetsRequirement(t,i.requirement)&&(this.hasTitle(e,s)||this.unlockTitle(e,s))})}meetsRequirement(e,t){return Object.entries(t).every(([s,i])=>e[s]>=i)}unlockTitle(e,t){this.playerTitles.has(e)||this.playerTitles.set(e,[]),this.playerTitles.get(e).push(t);const s=this.titles[t];console.log(`🏆 ${e} unlocked title: ${s.name}!`)}hasTitle(e,t){return this.playerTitles.get(e)?.includes(t)||!1}joinAsSpectator(e,t){const s=this.activeMatches.find(i=>i.id===t);return!s||s.status!=="active"?{success:!1,reason:"match_not_available"}:(this.spectators.has(t)||this.spectators.set(t,[]),this.spectators.get(t).push(e),console.log(`👁️ ${e} is now spectating match ${t}`),{success:!0,match:s})}getPlayerStats(e){const t=this.activeMatches.filter(n=>n.players.some(o=>o.id===e));let s=0,i=0,a=0;return t.forEach(n=>{n.winner===e&&(s++,n.isDuel&&i++,n.config.winCondition==="team_elimination"&&a++)}),{wins:s,duelWins:i,teamWins:a,rating:this.getPlayerRating(e),honor:this.honorPoints.get(e)||0}}isPlayerInQueue(e){return Object.values(this.matchmakingQueue).some(t=>t.some(s=>s.playerId===e))}isPlayerInMatch(e){return this.activeMatches.some(t=>t.status==="active"&&t.players.some(s=>s.id===e))}getLeaderboard(e=100){return Array.from(this.playerRatings.entries()).map(([s,i])=>({playerId:s,rating:i,rank:this.getPlayerRank(s),stats:this.getPlayerStats(s)})).sort((s,i)=>i.rating-s.rating).slice(0,e)}endSeason(){console.log(`🏆 Season ${this.currentSeason.number} ended!`),this.playerRatings.forEach((e,t)=>{const s=this.getPlayerRank(t),i=this.currentSeason.rewards[s.name.toLowerCase()];i&&console.log(`🎁 ${t} received season rewards: ${i.join(", ")}`)}),this.currentSeason={number:this.currentSeason.number+1,startDate:Date.now(),endDate:Date.now()+2160*60*60*1e3,rewards:this.currentSeason.rewards},this.playerRatings.forEach((e,t)=>{const s=Math.floor((e+1e3)/2);this.playerRatings.set(t,s)})}update(e){this.pendingDuels=this.pendingDuels.filter(t=>Date.now()<t.expiresAt),Date.now()>=this.currentSeason.endDate&&this.endSeason()}getState(){return{activeMatches:this.activeMatches.filter(e=>e.status==="active").length,queuedPlayers:Object.values(this.matchmakingQueue).reduce((e,t)=>e+t.length,0),currentSeason:this.currentSeason.number,seasonTimeRemaining:this.currentSeason.endDate-Date.now()}}}class si{constructor(e){this.gameEngine=e,this.guilds=new Map,this.guildMembers=new Map,this.guildPerks={1:{name:"Basic Storage",benefit:"storage_slots",value:50},5:{name:"Enhanced Gathering",benefit:"gathering_bonus",value:1.1},10:{name:"Combat Bonus",benefit:"damage_bonus",value:1.05},15:{name:"Advanced Storage",benefit:"storage_slots",value:100},20:{name:"Guild Mount",benefit:"special_mount",value:"guild_wolf"},25:{name:"Experience Boost",benefit:"exp_bonus",value:1.15},30:{name:"Elite Storage",benefit:"storage_slots",value:200},35:{name:"War Banner",benefit:"guild_ability",value:"war_banner"},40:{name:"Master Perks",benefit:"all_stats",value:1.1},50:{name:"Legendary Status",benefit:"prestige",value:"max"}},this.playerHouses=new Map,this.houseTypes={cottage:{name:"Cozy Cottage",cost:1e4,furnitureSlots:20,decorationSlots:30,size:"small",rooms:["main_room"]},house:{name:"Comfortable House",cost:5e4,furnitureSlots:50,decorationSlots:75,size:"medium",rooms:["living_room","bedroom","kitchen"]},villa:{name:"Luxurious Villa",cost:2e5,furnitureSlots:100,decorationSlots:150,size:"large",rooms:["living_room","bedroom","kitchen","study","garden"]},mansion:{name:"Grand Mansion",cost:1e6,furnitureSlots:200,decorationSlots:300,size:"massive",rooms:["great_hall","bedroom","kitchen","study","garden","library","workshop"]}},this.furnitureCatalog={wooden_chair:{name:"Wooden Chair",cost:50,category:"seating",size:1},wooden_table:{name:"Wooden Table",cost:100,category:"surface",size:2},simple_bed:{name:"Simple Bed",cost:200,category:"bed",size:3,benefit:{rest_bonus:1.1}},basic_forge:{name:"Basic Forge",cost:1e3,category:"crafting",benefit:{smithing_bonus:1.1}},alchemy_table:{name:"Alchemy Table",cost:1500,category:"crafting",benefit:{alchemy_bonus:1.1}},enchanting_station:{name:"Enchanting Station",cost:2e3,category:"crafting",benefit:{enchanting_bonus:1.1}},small_chest:{name:"Small Chest",cost:300,category:"storage",benefit:{storage_slots:20}},large_chest:{name:"Large Chest",cost:1e3,category:"storage",benefit:{storage_slots:50}},vault:{name:"Secure Vault",cost:5e3,category:"storage",benefit:{storage_slots:100}},painting:{name:"Painting",cost:500,category:"decoration"},rug:{name:"Rug",cost:300,category:"decoration"},chandelier:{name:"Chandelier",cost:1500,category:"decoration",benefit:{mood:1.05}}},this.marketplace={listings:[],transactions:[],fees:.05},this.guildWars=[],console.log("🏰 GuildAndHousingSystem initialized")}createGuild(e,t,s){for(const a of this.guilds.values())if(a.name===t||a.tag===s)return{success:!1,reason:"name_taken"};const i={id:`guild_${Date.now()}`,name:t,tag:s,founder:e,leader:e,members:[e],level:1,experience:0,nextLevel:1e3,treasury:0,perks:[],createdAt:Date.now(),hall:{level:1,customization:[],storage:[]},ranks:{[e]:"leader"}};return this.guilds.set(i.id,i),this.guildMembers.set(e,i.id),console.log(`🏰 Guild created: ${t} [${s}]`),{success:!0,guildId:i.id}}inviteToGuild(e,t,s){const i=this.guilds.get(e);return i?i.ranks[t]!=="leader"&&i.ranks[t]!=="officer"?{success:!1,reason:"no_permission"}:this.guildMembers.has(s)?{success:!1,reason:"already_in_guild"}:(console.log(`📨 Guild invitation sent to ${s} from ${i.name}`),{success:!0}):{success:!1,reason:"guild_not_found"}}joinGuild(e,t){const s=this.guilds.get(t);return s?(s.members.push(e),s.ranks[e]="member",this.guildMembers.set(e,t),console.log(`✅ ${e} joined ${s.name}`),{success:!0}):{success:!1,reason:"guild_not_found"}}contributeToGuild(e,t,s="gold"){const i=this.guildMembers.get(e);if(!i)return{success:!1,reason:"not_in_guild"};const a=this.guilds.get(i);if(s==="gold")a.treasury+=t;else if(s==="experience")for(a.experience+=t;a.experience>=a.nextLevel;)a.experience-=a.nextLevel,a.level++,a.nextLevel=Math.floor(a.nextLevel*1.5),this.onGuildLevelUp(a);return console.log(`💰 ${e} contributed ${t} ${s} to ${a.name}`),{success:!0}}onGuildLevelUp(e){console.log(`🎉 ${e.name} reached level ${e.level}!`);const t=this.guildPerks[e.level];t&&(e.perks.push(t),console.log(`✨ Unlocked perk: ${t.name}`)),e.level%10===0&&(e.hall.level++,console.log(`🏰 Guild hall upgraded to level ${e.hall.level}!`))}declareGuildWar(e,t){const s=this.guilds.get(e),i=this.guilds.get(t);if(!s||!i)return{success:!1,reason:"guild_not_found"};const a={id:`war_${Date.now()}`,attacker:e,defender:t,attackerScore:0,defenderScore:0,startTime:Date.now(),endTime:Date.now()+10080*60*1e3,status:"active"};return this.guildWars.push(a),console.log(`⚔️ Guild war declared: ${s.name} vs ${i.name}!`),{success:!0,warId:a.id}}buyHouse(e,t){if(this.playerHouses.has(e))return{success:!1,reason:"already_own_house"};const s=this.houseTypes[t];if(!s)return{success:!1,reason:"invalid_house_type"};const i={id:`house_${Date.now()}`,ownerId:e,type:t,config:s,furniture:[],decorations:[],visitors:[],permissions:{public:!1,friends:!0,guild:!1},garden:{plants:[],harvestReady:0},purchasedAt:Date.now()};return this.playerHouses.set(e,i),console.log(`🏠 ${e} purchased ${s.name}`),{success:!0,house:i}}placeFurniture(e,t,s){const i=this.playerHouses.get(e);if(!i)return{success:!1,reason:"no_house"};const a=this.furnitureCatalog[t];return a?i.furniture.length>=i.config.furnitureSlots?{success:!1,reason:"capacity_full"}:(i.furniture.push({id:t,data:a,position:s,placedAt:Date.now()}),console.log(`🪑 Placed ${a.name} in house`),{success:!0}):{success:!1,reason:"invalid_furniture"}}plantInGarden(e,t){const s=this.playerHouses.get(e);if(!s)return{success:!1,reason:"no_house"};if(!s.config.rooms.includes("garden"))return{success:!1,reason:"no_garden"};const i={type:t,plantedAt:Date.now(),harvestAt:Date.now()+1440*60*1e3,wateredAt:Date.now()};return s.garden.plants.push(i),console.log(`🌱 Planted ${t} in garden`),{success:!0}}harvestGarden(e){const t=this.playerHouses.get(e);if(!t)return{success:!1,reason:"no_house"};const s=Date.now(),i=[];return t.garden.plants=t.garden.plants.filter(a=>s>=a.harvestAt?(i.push(a.type),!1):!0),i.length>0&&console.log(`🌾 Harvested from garden: ${i.join(", ")}`),{success:!0,harvested:i}}listItem(e,t,s,i=1){const a={id:`listing_${Date.now()}`,seller:e,itemId:t,price:s,quantity:i,listedAt:Date.now(),expiresAt:Date.now()+6048e5,status:"active"};return this.marketplace.listings.push(a),console.log(`🏪 Item listed: ${t} for ${s} gold`),{success:!0,listingId:a.id}}buyFromMarketplace(e,t){const s=this.marketplace.listings.find(n=>n.id===t&&n.status==="active");if(!s)return{success:!1,reason:"listing_not_found"};const i=s.price*(1+this.marketplace.fees),a=s.price*(1-this.marketplace.fees);return s.status="sold",s.buyer=e,s.soldAt=Date.now(),this.marketplace.transactions.push({listingId:t,buyer:e,seller:s.seller,price:s.price,timestamp:Date.now()}),console.log(`💰 ${e} bought ${s.itemId} for ${i} gold`),{success:!0,totalCost:i,sellerProfit:a}}searchMarketplace(e={}){let t=this.marketplace.listings.filter(s=>s.status==="active");return e.itemId&&(t=t.filter(s=>s.itemId.includes(e.itemId))),e.maxPrice&&(t=t.filter(s=>s.price<=e.maxPrice)),e.minPrice&&(t=t.filter(s=>s.price>=e.minPrice)),t.sort((s,i)=>e.sortBy==="price_asc"?s.price-i.price:e.sortBy==="price_desc"?i.price-s.price:i.listedAt-s.listedAt),t}getGuildBenefits(e){const t=this.guildMembers.get(e);if(!t)return{};const s=this.guilds.get(t),i={};return s.perks.forEach(a=>{i[a.benefit]?typeof a.value=="number"&&(i[a.benefit]*=a.value):i[a.benefit]=a.value}),i}getHouseBenefits(e){const t=this.playerHouses.get(e);if(!t)return{};const s={};return t.furniture.forEach(i=>{i.data.benefit&&Object.entries(i.data.benefit).forEach(([a,n])=>{s[a]?typeof n=="number"&&(s[a]+=n-1):s[a]=n})}),s}update(e){this.guildWars.forEach(t=>{t.status==="active"&&Date.now()>=t.endTime&&this.endGuildWar(t)}),this.marketplace.listings=this.marketplace.listings.filter(t=>t.status==="active"&&Date.now()>=t.expiresAt?(t.status="expired",!1):t.status==="active")}endGuildWar(e){e.status="ended";const t=e.attackerScore>e.defenderScore?e.attacker:e.defender;e.winner=t;const s=this.guilds.get(t);console.log(`🏆 Guild war ended! Winner: ${s.name}`),s.treasury+=5e4,s.experience+=1e4}getState(){return{totalGuilds:this.guilds.size,totalHouses:this.playerHouses.size,activeListings:this.marketplace.listings.filter(e=>e.status==="active").length,activeWars:this.guildWars.filter(e=>e.status==="active").length}}}class ii{constructor(){this.queue=new Map,this.groups=new Map,this.events=new Map,this.communityGoals=new Map,this.eventCalendar=[],this.nextGroupId=1,this.nextEventId=1,this.initializeRoles(),this.initializeEvents(),this.initializeCommunityGoals()}initializeRoles(){this.roles={tank:{name:"Tank",maxPerGroup:2,icon:"🛡️"},healer:{name:"Healer",maxPerGroup:2,icon:"❤️"},dps:{name:"DPS",maxPerGroup:6,icon:"⚔️"}},this.queue.set("tank",[]),this.queue.set("healer",[]),this.queue.set("dps",[])}initializeEvents(){this.eventTypes=[{id:"invasion",name:"Monster Invasion",duration:36e5,reward:1e4},{id:"festival",name:"Harvest Festival",duration:72e5,reward:5e3},{id:"tournament",name:"Grand Tournament",duration:54e5,reward:2e4},{id:"raid_boss",name:"World Boss Raid",duration:18e5,reward:15e3},{id:"treasure_hunt",name:"Treasure Hunt",duration:36e5,reward:8e3},{id:"defense",name:"City Defense",duration:27e5,reward:12e3}],this.scheduleWeeklyEvents()}initializeCommunityGoals(){this.goalTemplates=[{id:"kill_monsters",name:"Slay 100,000 Monsters",target:1e5,reward:{gold:5e4,title:"Monster Slayer"}},{id:"complete_quests",name:"Complete 10,000 Quests",target:1e4,reward:{exp:1e5,mount:"Community Mount"}},{id:"craft_items",name:"Craft 50,000 Items",target:5e4,reward:{gold:3e4,recipe:"Legendary Recipe"}},{id:"gather_resources",name:"Gather 200,000 Resources",target:2e5,reward:{gold:4e4,buff:"Community Blessing"}},{id:"donate_gold",name:"Donate 10,000,000 Gold",target:1e7,reward:{title:"Generous Benefactor",statue:!0}}],this.createCommunityGoal("kill_monsters"),this.createCommunityGoal("complete_quests")}queueForDungeon(e,t,s,i,a){if(!this.roles[s])return{success:!1,error:"Invalid role"};const n={playerId:e,playerName:t,role:s,dungeonType:i,playerLevel:a,queueTime:Date.now(),status:"queued"},o=this.queue.get(s);return o.push(n),this.tryFormGroup(i),{success:!0,position:o.length,estimatedWait:this.estimateWaitTime(s,i)}}tryFormGroup(e){const t={tank:1,healer:1,dps:3};let s={tank:this.queue.get("tank").filter(i=>i.dungeonType===e&&i.status==="queued"),healer:this.queue.get("healer").filter(i=>i.dungeonType===e&&i.status==="queued"),dps:this.queue.get("dps").filter(i=>i.dungeonType===e&&i.status==="queued")};if(s.tank.length>=t.tank&&s.healer.length>=t.healer&&s.dps.length>=t.dps){const i=[...s.tank.slice(0,t.tank),...s.healer.slice(0,t.healer),...s.dps.slice(0,t.dps)],a=this.nextGroupId++,n={groupId:a,dungeonType:e,members:i,leader:i[0].playerId,status:"ready",createdAt:Date.now(),instance:null};return this.groups.set(a,n),i.forEach(o=>{o.status="grouped",o.groupId=a;const r=this.queue.get(o.role),l=r.indexOf(o);l>-1&&r.splice(l,1)}),n}return null}leaveQueue(e){for(const[t,s]of this.queue.entries()){const i=s.findIndex(a=>a.playerId===e);if(i>-1)return s.splice(i,1),{success:!0}}return{success:!1,error:"Not in queue"}}estimateWaitTime(e,t){const s={tank:this.queue.get("tank").length,healer:this.queue.get("healer").length,dps:this.queue.get("dps").length};return Math.max(Math.ceil(s.tank/1),Math.ceil(s.healer/1),Math.ceil(s.dps/3))*12e4}getQueueStatus(e){for(const[t,s]of this.queue.entries()){const i=s.find(a=>a.playerId===e);if(i)return{inQueue:!0,role:t,position:s.indexOf(i)+1,waitTime:Date.now()-i.queueTime,estimatedRemaining:this.estimateWaitTime(t,i.dungeonType)}}return{inQueue:!1}}createRaidGroup(e,t,s){const i=this.nextGroupId++,a={groupId:i,type:"raid",raidType:s,leader:e,members:[{playerId:e,playerName:t,role:"tank",ready:!1}],maxMembers:10,status:"forming",composition:{tank:0,healer:0,dps:0},createdAt:Date.now()};return this.groups.set(i,a),a}joinRaidGroup(e,t,s,i){const a=this.groups.get(e);return!a||a.type!=="raid"?{success:!1,error:"Invalid raid group"}:a.members.length>=a.maxMembers?{success:!1,error:"Group is full"}:a.members.filter(o=>o.role===i).length>=this.roles[i].maxPerGroup?{success:!1,error:"Too many players with this role"}:(a.members.push({playerId:t,playerName:s,role:i,ready:!1}),a.composition[i]++,{success:!0,group:a})}setPlayerReady(e,t,s){const i=this.groups.get(e);if(!i)return{success:!1};const a=i.members.find(n=>n.playerId===t);if(a){a.ready=s;const n=i.members.every(o=>o.ready);return n&&i.members.length>=5&&(i.status="ready"),{success:!0,allReady:n,group:i}}return{success:!1}}scheduleWeeklyEvents(){const e=Date.now(),t=864e5;for(let s=0;s<7;s++){const i=e+s*t+Math.random()*t,a=this.eventTypes[Math.floor(Math.random()*this.eventTypes.length)],n={id:this.nextEventId++,type:a.id,name:a.name,startTime:i,endTime:i+a.duration,status:"scheduled",participants:[],progress:0,reward:a.reward,description:this.getEventDescription(a.id)};this.events.set(n.id,n),this.eventCalendar.push(n)}this.eventCalendar.sort((s,i)=>s.startTime-i.startTime)}getEventDescription(e){return{invasion:"Monsters are attacking the city! Defend against waves of enemies.",festival:"Join the harvest festival with special quests and mini-games.",tournament:"Compete in the grand tournament for glory and prizes.",raid_boss:"A world boss has appeared! Team up to defeat it.",treasure_hunt:"Search the world for hidden treasures and rare items.",defense:"Protect the city walls from an incoming siege."}[e]||"A special event is happening!"}joinEvent(e,t,s){const i=this.events.get(e);return i?i.status==="completed"?{success:!1,error:"Event already completed"}:(i.participants.find(a=>a.playerId===t)||i.participants.push({playerId:t,playerName:s,contribution:0}),{success:!0,event:i}):{success:!1,error:"Event not found"}}contributeToEvent(e,t,s){const i=this.events.get(e);if(!i||i.status!=="active")return{success:!1};const a=i.participants.find(n=>n.playerId===t);return a?(a.contribution+=s,i.progress+=s,{success:!0,progress:i.progress}):{success:!1}}createCommunityGoal(e){const t=this.goalTemplates.find(i=>i.id===e);if(!t)return null;const s={id:`goal_${Date.now()}`,...t,progress:0,contributors:new Map,startTime:Date.now(),endTime:Date.now()+6048e5,status:"active",rewardsClaimed:!1};return this.communityGoals.set(s.id,s),s}contributeToGoal(e,t,s,i){const a=this.communityGoals.get(e);if(!a||a.status!=="active")return{success:!1};a.progress+=i;const n=a.contributors.get(t)||{playerName:s,amount:0};return n.amount+=i,a.contributors.set(t,n),a.progress>=a.target&&(a.status="completed",a.completedAt=Date.now()),{success:!0,progress:a.progress,target:a.target,percentage:a.progress/a.target*100,completed:a.status==="completed"}}getActiveGoals(){const e=[];for(const t of this.communityGoals.values())t.status==="active"&&e.push({id:t.id,name:t.name,progress:t.progress,target:t.target,percentage:t.progress/t.target*100,reward:t.reward,timeRemaining:t.endTime-Date.now()});return e}claimGoalReward(e,t){const s=this.communityGoals.get(e);if(!s||s.status!=="completed")return{success:!1,error:"Goal not completed"};const i=s.contributors.get(t);return i?{success:!0,reward:s.reward,contribution:i.amount}:{success:!1,error:"Did not contribute to this goal"}}getEventCalendar(e=7){const t=Date.now(),s=t+e*864e5;return this.eventCalendar.filter(i=>i.startTime>=t&&i.startTime<=s).map(i=>({id:i.id,name:i.name,type:i.type,startTime:i.startTime,duration:i.endTime-i.startTime,status:i.status,description:i.description}))}voteForNextEvent(e,t){return this.eventVotes||(this.eventVotes=new Map),this.eventVotes.has(e)?{success:!1,error:"Already voted"}:(this.eventVotes.set(e,t),{success:!0,votes:this.getVoteTally()})}getVoteTally(){const e={};for(const t of this.eventVotes.values())e[t]=(e[t]||0)+1;return e}update(e){const t=Date.now();for(const s of this.events.values())s.status==="scheduled"&&t>=s.startTime?s.status="active":s.status==="active"&&t>=s.endTime&&(s.status="completed");for(const s of this.communityGoals.values())s.status==="active"&&t>=s.endTime&&(s.status="expired")}}class ai{constructor(e,t){this.scene=e,this.renderer=t,this.terrainChunks=new Map,this.waterBodies=[],this.lights=[],this.animations=new Map,this.emotes=new Map,this.initializeTerrainSystem(),this.initializeWaterSystem(),this.initializeLightingSystem(),this.initializeAnimationSystem(),this.initializeEmoteSystem()}initializeTerrainSystem(){this.terrainConfig={chunkSize:64,heightScale:50,textureResolution:512,lodLevels:4,grassDensity:1e3,foliageDensity:500},this.terrainTextures={grass:{color:4885562,roughness:.8},rock:{color:8026746,roughness:.95},sand:{color:13935988,roughness:.7},snow:{color:16777215,roughness:.3}}}generateTerrainChunk(e,t){const s=`${e}_${t}`;if(this.terrainChunks.has(s))return this.terrainChunks.get(s);const i=this.terrainConfig.chunkSize,a=this.generateHeightMap(e,t,i),n=this.createTerrainGeometry(a,i),o=this.createTerrainMaterial(a,i),r={chunkX:e,chunkZ:t,geometry:n,material:o,mesh:null,grass:[],foliage:[],lod:0};return r.mesh=this.createMesh(n,o),r.mesh.position.set(e*i,0,t*i),r.mesh.receiveShadow=!0,this.populateVegetation(r,a),this.terrainChunks.set(s,r),this.scene.add(r.mesh),r}generateHeightMap(e,t,s){const i=[];for(let n=0;n<s;n++){i[n]=[];for(let o=0;o<s;o++){const r=e*s+o,l=t*s+n;let c=0;c+=this.noise2D(r*.1,l*.1)*1,c+=this.noise2D(r*.1*2,l*.1*2)*.5,c+=this.noise2D(r*.1*4,l*.1*4)*.25,i[n][o]=c*this.terrainConfig.heightScale}}return i}createTerrainGeometry(e,t){const s=[],i=[],a=[],n=[];for(let o=0;o<t;o++)for(let r=0;r<t;r++)s.push(r,e[o][r],o),a.push(r/t,o/t);for(let o=0;o<t-1;o++)for(let r=0;r<t-1;r++){const l=o*t+r,c=l+1,m=(o+1)*t+r,u=m+1;i.push(l,m,c),i.push(c,m,u)}return this.calculateNormals(s,i,n),{vertices:s,indices:i,uvs:a,normals:n}}createTerrainMaterial(e,t){return{type:"terrain",textures:[],splatmap:this.generateSplatmap(e,t),metalness:0,roughness:.9,receiveShadow:!0}}generateSplatmap(e,t){const s=[];for(let i=0;i<t;i++){s[i]=[];for(let a=0;a<t;a++){const n=e[i][a],o=this.calculateSlope(e,a,i,t);let r={grass:0,rock:0,sand:0,snow:0};n<5?r.sand=1:n<15?r.grass=1:n<35?o>.5?r.rock=1:(r.grass=.6,r.rock=.4):r.snow=1,s[i][a]=r}}return s}calculateSlope(e,t,s,i){if(t===0||t===i-1||s===0||s===i-1)return 0;const a=e[s][t+1]-e[s][t-1],n=e[s+1][t]-e[s-1][t];return Math.sqrt(a*a+n*n)}populateVegetation(e,t){const s=this.terrainConfig.chunkSize,i=this.terrainConfig.grassDensity,a=this.terrainConfig.foliageDensity;for(let n=0;n<i;n++){const o=Math.random()*s,r=Math.random()*s,l=this.sampleHeightMap(t,o,r,s);l>5&&l<30&&e.grass.push({position:{x:o,y:l,z:r},scale:.5+Math.random()*.5,rotation:Math.random()*Math.PI*2})}for(let n=0;n<a;n++){const o=Math.random()*s,r=Math.random()*s,l=this.sampleHeightMap(t,o,r,s);if(l>10&&l<25){const c=Math.random()>.7?"tree":"bush";e.foliage.push({type:c,position:{x:o,y:l,z:r},scale:c==="tree"?2+Math.random()*2:.8+Math.random()*.6})}}}sampleHeightMap(e,t,s,i){const a=Math.floor(t),n=Math.floor(s);if(a<0||a>=i-1||n<0||n>=i-1)return 0;const o=t-a,r=s-n,l=e[n][a],c=e[n][a+1],m=e[n+1][a],u=e[n+1][a+1],p=l*(1-o)+c*o,S=m*(1-o)+u*o;return p*(1-r)+S*r}updateTerrainLOD(e){for(const t of this.terrainChunks.values()){const s={x:(t.chunkX+.5)*this.terrainConfig.chunkSize,z:(t.chunkZ+.5)*this.terrainConfig.chunkSize},i=Math.sqrt(Math.pow(e.x-s.x,2)+Math.pow(e.z-s.z,2));let a=0;i>200?a=3:i>100?a=2:i>50&&(a=1),a!==t.lod&&(t.lod=a,this.applyTerrainLOD(t,a))}}applyTerrainLOD(e,t){const s=t<2,i=t<3;e.grass.forEach(a=>{a.visible=s}),e.foliage.forEach(a=>{a.visible=i})}initializeWaterSystem(){this.waterConfig={reflectionQuality:"high",refractionEnabled:!0,foamEnabled:!0,causticsEnabled:!0,waveHeight:.5,waveSpeed:1}}createWaterBody(e,t,s,i="ocean"){const a={id:`water_${Date.now()}`,type:i,position:e,width:t,depth:s,geometry:null,material:null,mesh:null,reflection:null,refraction:null,time:0};return a.geometry=this.createWaterGeometry(t,s),a.material=this.createWaterMaterial(i),a.mesh=this.createMesh(a.geometry,a.material),a.mesh.position.set(e.x,e.y,e.z),a.mesh.receiveShadow=!0,this.waterConfig.reflectionQuality!=="off"&&(a.reflection=this.createReflectionTexture(a)),this.waterBodies.push(a),this.scene.add(a.mesh),a}createWaterGeometry(e,t){const i=[],a=[],n=[];for(let o=0;o<=64;o++)for(let r=0;r<=64;r++){const l=r/64,c=o/64;i.push((l-.5)*e,0,(c-.5)*t),n.push(l*4,c*4)}for(let o=0;o<64;o++)for(let r=0;r<64;r++){const l=o*65+r,c=l+64+1;a.push(l,c,l+1),a.push(c,c+1,l+1)}return{vertices:i,indices:a,uvs:n}}createWaterMaterial(e){const t={ocean:{color:27028,opacity:.8,metalness:.1,roughness:.1,transparent:!0,reflective:!0},lake:{color:4881546,opacity:.7,metalness:0,roughness:.2,transparent:!0,reflective:!0},river:{color:5938360,opacity:.6,metalness:0,roughness:.3,transparent:!0,reflective:!1}};return t[e]||t.ocean}createReflectionTexture(e){return{width:512,height:512,camera:null,renderTarget:null,needsUpdate:!0}}updateWater(e){this.waterBodies.forEach(t=>{t.time+=e*this.waterConfig.waveSpeed,this.animateWaterWaves(t),t.reflection&&t.reflection.needsUpdate&&this.updateReflection(t),this.waterConfig.foamEnabled&&this.updateWaterFoam(t)})}animateWaterWaves(e){const t=e.geometry,s=t.vertices,i=e.time;for(let a=0;a<s.length;a+=3){const n=s[a],o=s[a+2];let r=0;r+=Math.sin(n*.1+i)*this.waterConfig.waveHeight,r+=Math.cos(o*.15+i*1.3)*this.waterConfig.waveHeight*.5,r+=Math.sin((n+o)*.08+i*.7)*this.waterConfig.waveHeight*.3,s[a+1]=r}t.needsUpdate=!0}updateReflection(e){e.reflection.needsUpdate=!1}updateWaterFoam(e){}initializeLightingSystem(){this.lightingConfig={shadowMapSize:4096,shadowCascades:3,ambientIntensity:.3,enableDynamicShadows:!0,enableLightProbes:!0},this.setupAmbientLight(),this.setupDirectionalLight()}setupAmbientLight(){const e={type:"ambient",color:4210752,intensity:this.lightingConfig.ambientIntensity};this.lights.push(e)}setupDirectionalLight(){const e={type:"directional",color:16777215,intensity:1,position:{x:100,y:100,z:50},target:{x:0,y:0,z:0},castShadow:!0,shadowMapSize:this.lightingConfig.shadowMapSize};this.lights.push(e)}addPointLight(e,t,s,i){const a={type:"point",color:t,intensity:s,position:e,range:i,castShadow:!0};return this.lights.push(a),a}addSpotLight(e,t,s,i,a){const n={type:"spot",color:s,intensity:i,position:e,target:t,angle:a,penumbra:.2,castShadow:!0};return this.lights.push(n),n}initializeAnimationSystem(){this.animationConfig={blendDuration:.2,enableIK:!0,enableProcedural:!0},this.animationStates=new Map}createAnimationState(e,t){const s={entityId:e,animations:new Map,currentAnimation:null,nextAnimation:null,blendProgress:0,blendDuration:this.animationConfig.blendDuration,layers:[]};return t.forEach(i=>{s.animations.set(i.name,{name:i.name,duration:i.duration,loop:i.loop!==!1,speed:i.speed||1,frames:i.frames||[]})}),this.animationStates.set(e,s),s}playAnimation(e,t,s){const i=this.animationStates.get(e);!i||!i.animations.get(t)||i.currentAnimation!==t&&(i.nextAnimation=t,i.blendProgress=0,i.blendDuration=s||this.animationConfig.blendDuration)}updateAnimations(e){for(const t of this.animationStates.values())t.nextAnimation&&(t.blendProgress+=e/t.blendDuration,t.blendProgress>=1&&(t.currentAnimation=t.nextAnimation,t.nextAnimation=null,t.blendProgress=0)),t.currentAnimation&&t.animations.get(t.currentAnimation)}initializeEmoteSystem(){this.emoteList=[{id:"wave",name:"Wave",duration:2,loop:!1},{id:"dance",name:"Dance",duration:4,loop:!0},{id:"laugh",name:"Laugh",duration:2.5,loop:!1},{id:"cry",name:"Cry",duration:3,loop:!1},{id:"cheer",name:"Cheer",duration:2,loop:!1},{id:"sit",name:"Sit",duration:1,loop:!0},{id:"kneel",name:"Kneel",duration:1.5,loop:!0},{id:"point",name:"Point",duration:1.5,loop:!1},{id:"salute",name:"Salute",duration:2,loop:!1},{id:"sleep",name:"Sleep",duration:0,loop:!0},{id:"flex",name:"Flex",duration:2.5,loop:!1},{id:"bow",name:"Bow",duration:2,loop:!1},{id:"clap",name:"Clap",duration:3,loop:!0},{id:"shrug",name:"Shrug",duration:1.5,loop:!1},{id:"think",name:"Think",duration:0,loop:!0},{id:"surprised",name:"Surprised",duration:2,loop:!1},{id:"angry",name:"Angry",duration:2.5,loop:!1},{id:"happy",name:"Happy",duration:2,loop:!1},{id:"sad",name:"Sad",duration:2.5,loop:!1},{id:"confused",name:"Confused",duration:2,loop:!1}],this.emoteList.forEach(e=>{this.emotes.set(e.id,e)})}playEmote(e,t){const s=this.emotes.get(t);if(!s)return{success:!1};const i=this.animationStates.get(e);return i?(i.currentEmote={id:t,startTime:Date.now(),duration:s.duration*1e3,loop:s.loop},{success:!0,emote:s}):{success:!1}}noise2D(e,t){const s=Math.sin(e*12.9898+t*78.233)*43758.5453;return s-Math.floor(s)}calculateNormals(e,t,s){const i=[];for(let a=0;a<t.length;a+=3){const n=t[a]*3,o=t[a+1]*3,r=t[a+2]*3,l={x:e[n],y:e[n+1],z:e[n+2]},c={x:e[o],y:e[o+1],z:e[o+2]},m={x:e[r],y:e[r+1],z:e[r+2]},u={x:c.x-l.x,y:c.y-l.y,z:c.z-l.z},p={x:m.x-l.x,y:m.y-l.y,z:m.z-l.z},S={x:u.y*p.z-u.z*p.y,y:u.z*p.x-u.x*p.z,z:u.x*p.y-u.y*p.x};i.push(S)}for(let a=0;a<e.length;a++)s.push(0);for(let a=0;a<t.length;a++){const n=t[a]*3,o=Math.floor(a/3),r=i[o];s[n]+=r.x,s[n+1]+=r.y,s[n+2]+=r.z}for(let a=0;a<s.length;a+=3){const n=Math.sqrt(s[a]*s[a]+s[a+1]*s[a+1]+s[a+2]*s[a+2]);n>0&&(s[a]/=n,s[a+1]/=n,s[a+2]/=n)}}createMesh(e,t){return{geometry:e,material:t,position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0},scale:{x:1,y:1,z:1},visible:!0,castShadow:!1,receiveShadow:!1}}update(e,t){this.updateTerrainLOD(t),this.updateWater(e),this.updateAnimations(e)}}class ni{constructor(){this.enemies=new Map,this.behaviorTrees=this.initializeBehaviorTrees(),this.learningData=new Map,this.packCoordination=new Map,this.personalities={aggressive:{attackChance:.8,retreatThreshold:.2,useSkillChance:.7},defensive:{attackChance:.5,retreatThreshold:.5,useSkillChance:.4},tactical:{attackChance:.6,retreatThreshold:.4,useSkillChance:.9},berserker:{attackChance:.95,retreatThreshold:.05,useSkillChance:.3}},this.lastUpdate=Date.now()}initializeBehaviorTrees(){return{patrol:{name:"Patrol",priority:1,conditions:["notInCombat","hasPatrolRoute"],actions:["moveToNextPatrolPoint","lookAround"]},hunt:{name:"Hunt",priority:5,conditions:["playerDetected","withinAggroRange"],actions:["moveTowardsPlayer","prepareAttack"]},ambush:{name:"Ambush",priority:4,conditions:["playerNearby","hasHidingSpot"],actions:["moveToHidingSpot","waitForPlayer","surpriseAttack"]},flee:{name:"Flee",priority:6,conditions:["lowHealth","outmatched"],actions:["retreatToSafety","callForHelp"]},attackMelee:{name:"AttackMelee",priority:7,conditions:["inMeleeRange","canAttack"],actions:["executeAttack","useCombatSkill"]},attackRanged:{name:"AttackRanged",priority:7,conditions:["inRangedRange","hasRangedWeapon","canAttack"],actions:["findOptimalPosition","executeRangedAttack"]},useSkill:{name:"UseSkill",priority:8,conditions:["skillReady","tacticalAdvantage"],actions:["selectBestSkill","positionForSkill","castSkill"]},coordinateAttack:{name:"CoordinateAttack",priority:9,conditions:["hasAllies","targetShared"],actions:["synchronizeAttack","formationMove","comboSkill"]}}}createEnemy(e,t){const s={id:e,position:t.position||{x:0,y:0,z:0},health:t.health||100,maxHealth:t.maxHealth||100,level:t.level||1,personality:t.personality||"aggressive",aggroRange:t.aggroRange||15,meleeRange:t.meleeRange||2,rangedRange:t.rangedRange||10,hasRangedWeapon:t.hasRangedWeapon||!1,skills:t.skills||[],currentBehavior:"patrol",target:null,patrolRoute:t.patrolRoute||[],currentPatrolIndex:0,lastAttackTime:0,attackCooldown:2e3,skillCooldowns:new Map,environmentalAwareness:{nearestCover:null,nearestAmbushPoint:null,nearestAllies:[],threateningEnemies:[]},learningProfile:{playerDodgePattern:[],playerAttackPattern:[],playerSkillUsage:new Map,successfulCounters:new Map},state:{isAggro:!1,isFleeing:!1,isHiding:!1,lastPlayerPosition:null}};return this.enemies.set(e,s),s}update(e,t,s){const i=Date.now(),a=e/1e3;for(const[n,o]of this.enemies){this.updateEnvironmentalAwareness(o,t),this.learnFromPlayer(o,s);const r=this.selectBehavior(o,t,i);o.currentBehavior=r.name,this.executeBehavior(o,r,t,a,i),this.updatePackCoordination(o,t)}this.lastUpdate=i}updateEnvironmentalAwareness(e,t){const s=this.findNearbyPoints(e.position,"cover",20);e.environmentalAwareness.nearestCover=s[0]||null;const i=this.findNearbyPoints(e.position,"ambush",15);e.environmentalAwareness.nearestAmbushPoint=i[0]||null,e.environmentalAwareness.nearestAllies=[];for(const[a,n]of this.enemies)if(a!==e.id){const o=this.getDistance(e.position,n.position);o<25&&e.environmentalAwareness.nearestAllies.push({id:a,enemy:n,distance:o})}}learnFromPlayer(e,t){if(t&&(t.justDodged&&(e.learningProfile.playerDodgePattern.push({time:Date.now(),direction:t.dodgeDirection}),e.learningProfile.playerDodgePattern.length>10&&e.learningProfile.playerDodgePattern.shift()),t.justAttacked&&(e.learningProfile.playerAttackPattern.push({time:Date.now(),type:t.attackType}),e.learningProfile.playerAttackPattern.length>10&&e.learningProfile.playerAttackPattern.shift()),t.skillUsed)){const s=e.learningProfile.playerSkillUsage.get(t.skillUsed)||0;e.learningProfile.playerSkillUsage.set(t.skillUsed,s+1)}}selectBehavior(e,t,s){const i=this.getDistance(e.position,t),a=e.health/e.maxHealth;this.personalities[e.personality];const n=[];for(const o in this.behaviorTrees){const r=this.behaviorTrees[o];this.evaluateConditions(r.conditions,e,i,a,s)&&n.push(r)}return n.sort((o,r)=>r.priority-o.priority),n[0]||this.behaviorTrees.patrol}evaluateConditions(e,t,s,i,a){const n={notInCombat:()=>!t.state.isAggro,hasPatrolRoute:()=>t.patrolRoute.length>0,playerDetected:()=>s<t.aggroRange,withinAggroRange:()=>s<t.aggroRange,playerNearby:()=>s<t.aggroRange*1.5,hasHidingSpot:()=>t.environmentalAwareness.nearestAmbushPoint!==null,lowHealth:()=>i<this.personalities[t.personality].retreatThreshold,outmatched:()=>t.environmentalAwareness.threateningEnemies.length>2,inMeleeRange:()=>s<t.meleeRange,canAttack:()=>a-t.lastAttackTime>t.attackCooldown,inRangedRange:()=>s<t.rangedRange&&s>t.meleeRange,hasRangedWeapon:()=>t.hasRangedWeapon,skillReady:()=>this.hasAvailableSkill(t,a),tacticalAdvantage:()=>this.evaluateTacticalAdvantage(t),hasAllies:()=>t.environmentalAwareness.nearestAllies.length>0,targetShared:()=>this.hasSharedTarget(t)};return e.every(o=>{const r=n[o];return r?r():!1})}executeBehavior(e,t,s,i,a){const n={moveToNextPatrolPoint:()=>this.patrol(e,i),lookAround:()=>this.lookAround(e),moveTowardsPlayer:()=>this.moveTowardsTarget(e,s,i),prepareAttack:()=>this.prepareAttack(e),moveToHidingSpot:()=>this.moveToHidingSpot(e,i),waitForPlayer:()=>this.waitInAmbush(e),surpriseAttack:()=>this.executeSurpriseAttack(e,s,a),retreatToSafety:()=>this.retreat(e,s,i),callForHelp:()=>this.callForHelp(e),executeAttack:()=>this.executeMeleeAttack(e,a),useCombatSkill:()=>this.useCombatSkill(e,a),findOptimalPosition:()=>this.findRangedPosition(e,s,i),executeRangedAttack:()=>this.executeRangedAttack(e,s,a),selectBestSkill:()=>this.selectBestSkill(e,s),positionForSkill:()=>this.positionForSkill(e,s,i),castSkill:()=>this.castSkill(e,a),synchronizeAttack:()=>this.synchronizeWithAllies(e),formationMove:()=>this.moveInFormation(e,s,i),comboSkill:()=>this.executeComboSkill(e,a)};t.actions.forEach(o=>{const r=n[o];r&&r()})}patrol(e,t){if(e.patrolRoute.length===0)return;const s=e.patrolRoute[e.currentPatrolIndex],i=this.getDirection(e.position,s),a=2;e.position.x+=i.x*a*t,e.position.z+=i.z*a*t,this.getDistance(e.position,s)<1&&(e.currentPatrolIndex=(e.currentPatrolIndex+1)%e.patrolRoute.length)}moveTowardsTarget(e,t,s){e.state.isAggro=!0;const i=this.getDirection(e.position,t),a=4;e.position.x+=i.x*a*s,e.position.z+=i.z*a*s}retreat(e,t,s){e.state.isFleeing=!0;const i=this.getDirection(t,e.position),a=5;e.position.x+=i.x*a*s,e.position.z+=i.z*a*s}executeMeleeAttack(e,t){if(t-e.lastAttackTime<e.attackCooldown)return null;e.lastAttackTime=t;const s=this.predictPlayerDodge(e);return{type:"melee",damage:10+e.level*2,position:e.position,predictedDodge:s}}executeRangedAttack(e,t,s){if(s-e.lastAttackTime<e.attackCooldown)return null;e.lastAttackTime=s;const n=this.getDistance(e.position,t)/20;return{type:"ranged",damage:8+e.level*1.5,position:e.position,target:t,timeToHit:n}}selectBestSkill(e,t){const s=e.skills.filter(n=>{const o=e.skillCooldowns.get(n.id)||0;return Date.now()-o>n.cooldown});if(s.length===0){e.selectedSkill=null;return}let i=s[0];const a=this.getPlayerFavoriteSkill(e);if(a){const n=s.find(o=>o.counters&&o.counters.includes(a));n&&(i=n)}e.selectedSkill=i}castSkill(e,t){return e.selectedSkill?(e.skillCooldowns.set(e.selectedSkill.id,t),{type:"skill",skill:e.selectedSkill,position:e.position,caster:e.id}):null}updatePackCoordination(e,t){const s=e.environmentalAwareness.nearestAllies;if(s.length===0)return;const i=this.findOrCreatePack(e,s);let a=this.packCoordination.get(i);a||(a={id:i,members:[e.id,...s.map(n=>n.id)],leader:e.id,target:t,formation:"surround",nextCoordinatedAttack:Date.now()+5e3},this.packCoordination.set(i,a)),a.target=t}synchronizeWithAllies(e){for(const[t,s]of this.packCoordination)if(s.members.includes(e.id))return e.packId=t,e.isLeader=s.leader===e.id,s;return null}getDistance(e,t){const s=t.x-e.x,i=t.z-e.z;return Math.sqrt(s*s+i*i)}getDirection(e,t){const s=t.x-e.x,i=t.z-e.z,a=Math.sqrt(s*s+i*i);return a>0?{x:s/a,z:i/a}:{x:0,z:0}}findNearbyPoints(e,t,s){return[]}hasAvailableSkill(e,t){return e.skills.some(s=>{const i=e.skillCooldowns.get(s.id)||0;return t-i>s.cooldown})}evaluateTacticalAdvantage(e){const t=e.health/e.maxHealth,s=e.environmentalAwareness.nearestAllies.length>0,i=e.environmentalAwareness.nearestCover!==null;return t>.5&&s||i}hasSharedTarget(e){return e.environmentalAwareness.nearestAllies.some(t=>t.enemy.state.isAggro)}predictPlayerDodge(e){const t=e.learningProfile.playerDodgePattern;if(t.length<3)return null;const i=t.slice(-3).map(n=>n.direction),a={};i.forEach(n=>{a[n]=(a[n]||0)+1});for(const n in a)if(a[n]>=2)return n;return null}getPlayerFavoriteSkill(e){const t=e.learningProfile.playerSkillUsage;let s=0,i=null;for(const[a,n]of t)n>s&&(s=n,i=a);return i}findOrCreatePack(e,t){return[e.id,...t.map(i=>i.id)].sort().join("-")}lookAround(e){e.state.scanning=!0}prepareAttack(e){e.state.preparing=!0}moveToHidingSpot(e,t){}waitInAmbush(e){e.state.isHiding=!0}executeSurpriseAttack(e,t,s){return this.executeMeleeAttack(e,s)}callForHelp(e){e.state.callingHelp=!0}useCombatSkill(e,t){}findRangedPosition(e,t,s){}positionForSkill(e,t,s){}moveInFormation(e,t,s){}executeComboSkill(e,t){}getEnemyBehavior(e){const t=this.enemies.get(e);return t?t.currentBehavior:null}getEnemyState(e){return this.enemies.get(e)}removeEnemy(e){this.enemies.delete(e)}}class oi{constructor(e){this.scene=e,this.characters=new Map,this.customizationOptions=this.initializeCustomization(),this.animations=this.initializeAnimations(),this.physics={hairWind:{x:0,y:0,z:0},clothWind:{x:0,y:0,z:0}},this.lastUpdate=Date.now()}initializeCustomization(){return{faces:["cheerful","serious","cute","elegant","mysterious","fierce","gentle","mischievous","stoic","innocent","seductive","wise","youthful","mature","battle-worn","divine","demonic","ethereal","playful","determined"],eyeShapes:["round","almond","narrow","wide","cat-like","sharp","doe-eyed","sleepy","intense","mystical"],eyeColors:["#FF0000","#00FF00","#0000FF","#FFD700","#FF00FF","#00FFFF","#FFA500","#800080","#FF1493","#00FA9A","#FF6B6B","#4ECDC4"],hairstyles:["long_straight","long_wavy","short_spiky","twin_tails","ponytail","bob_cut","hime_cut","drill_curls","messy_short","braided","bun","mohawk","undercut","flowing_long","wild_spiky","elegant_updo","side_swept","shaggy","layered","asymmetric","pigtails","warrior_top_knot","mage_hood","flowing_ethereal","battle_braid","royal_crown","mystical_floating","punk_mohawk","gentle_waves","fierce_spikes"],hairColors:["#000000","#FFD700","#FF0000","#0000FF","#FF00FF","#FFFFFF","#FFA500","#00FFFF","#FF69B4","#9370DB","#32CD32","#FF1493","#4169E1","#FF6347","#7CFC00","#FF4500","#DA70D6","#00CED1"],bodyTypes:["petite","average","athletic","muscular","curvy","slender","tall","short","heroic","delicate"],skinTones:["#FFE0BD","#F1C27D","#E0AC69","#C68642","#8D5524","#FFF0E1","#FFE4C4","#DEB887","#D2B48C","#BC8F8F"],costumes:[{name:"magical_girl_pink",type:"dress",colors:["#FF69B4","#FFFFFF","#FFD700"]},{name:"magical_girl_blue",type:"dress",colors:["#4169E1","#FFFFFF","#87CEEB"]},{name:"knight_armor",type:"armor",colors:["#C0C0C0","#FFD700","#8B0000"]},{name:"samurai_armor",type:"armor",colors:["#8B0000","#000000","#FFD700"]},{name:"berserker_outfit",type:"light_armor",colors:["#8B4513","#FF0000","#000000"]},{name:"wizard_robes",type:"robes",colors:["#4B0082","#9370DB","#FFD700"]},{name:"sorcerer_outfit",type:"robes",colors:["#000080","#00FFFF","#FFFFFF"]},{name:"battle_mage",type:"robes",colors:["#8B0000","#FF4500","#FFD700"]},{name:"ninja_outfit",type:"light_armor",colors:["#000000","#808080","#8B0000"]},{name:"assassin_cloak",type:"cloak",colors:["#2F4F4F","#000000","#B22222"]},{name:"thief_leather",type:"leather",colors:["#8B4513","#000000","#FFD700"]},{name:"elf_dress",type:"dress",colors:["#228B22","#FFFFFF","#FFD700"]},{name:"angel_robes",type:"robes",colors:["#FFFFFF","#FFD700","#87CEEB"]},{name:"demon_outfit",type:"dark_armor",colors:["#8B0000","#000000","#FF0000"]},{name:"fairy_dress",type:"dress",colors:["#FF69B4","#7CFC00","#FFD700"]},{name:"princess_gown",type:"gown",colors:["#FFB6C1","#FFD700","#FFFFFF"]},{name:"prince_tunic",type:"tunic",colors:["#4169E1","#FFD700","#FFFFFF"]},{name:"queen_dress",type:"gown",colors:["#9370DB","#FFD700","#8B0000"]},{name:"school_uniform",type:"uniform",colors:["#000080","#FFFFFF","#8B0000"]},{name:"battle_suit",type:"suit",colors:["#000000","#00FFFF","#FFFFFF"]},{name:"idol_outfit",type:"dress",colors:["#FF69B4","#FFFFFF","#FFD700"]}],accessories:["angel_wings","demon_wings","fairy_wings","dragon_wings","cat_ears","fox_ears","wolf_ears","rabbit_ears","cat_tail","fox_tail","demon_tail","dragon_tail","halo","demon_horns","dragon_horns","crown","tiara","circlet","headband","glasses","eyepatch","mask","scarf","cape"],voices:["cheerful_high","mature_low","energetic_mid","soft_whisper","commanding","mysterious","playful","serious","elegant","cute"]}}initializeAnimations(){return{idle:[{name:"standing_casual",loop:!0,weight:1},{name:"confident_pose",loop:!0,weight:1},{name:"shy_fidget",loop:!0,weight:1},{name:"battle_ready",loop:!0,weight:1},{name:"magical_float",loop:!0,weight:1}],combat:[{name:"sword_slash",duration:.5},{name:"spell_cast",duration:1},{name:"kick_combo",duration:.8},{name:"dodge_roll",duration:.4},{name:"parry_stance",duration:.3},{name:"ultimate_pose",duration:2}],emotes:[{name:"wave",duration:1.5},{name:"dance",duration:3,loop:!0},{name:"laugh",duration:2},{name:"cry",duration:2.5},{name:"cheer",duration:2},{name:"sit",duration:1,loop:!0},{name:"sleep",duration:1.5,loop:!0},{name:"think",duration:2},{name:"angry",duration:1.5},{name:"surprised",duration:1}],victory:[{name:"victory_pose_heroic",duration:2},{name:"victory_pose_cute",duration:2},{name:"victory_pose_cool",duration:2}],facial:[{name:"blink",duration:.2,frequency:3e3},{name:"smile",blend:!0},{name:"frown",blend:!0},{name:"angry_eyes",blend:!0},{name:"surprised_eyes",blend:!0},{name:"sad_eyes",blend:!0}]}}createCharacter(e,t){const s={id:e,mesh:null,bones:{},customization:{face:t.face||"cheerful",eyeShape:t.eyeShape||"round",eyeColor:t.eyeColor||"#4169E1",hairstyle:t.hairstyle||"long_straight",hairColor:t.hairColor||"#FFD700",bodyType:t.bodyType||"average",skinTone:t.skinTone||"#FFE0BD",costume:t.costume||this.customizationOptions.costumes[0],accessories:t.accessories||[],voice:t.voice||"cheerful_high",height:t.height||1},animations:{current:"standing_casual",queue:[],blendTime:.3,mixer:null},expressions:{current:"neutral",blendWeights:new Map},physics:{hairBones:[],clothBones:[],velocity:{x:0,y:0,z:0}}};return this.buildCharacterModel(s),this.setupAnimations(s),this.characters.set(e,s),s}buildCharacterModel(e){const t=e.customization,s=new THREE.CapsuleGeometry(.3*t.height,1.4*t.height,16,32),i=new THREE.MeshStandardMaterial({color:t.skinTone,roughness:.7,metalness:.1}),a=new THREE.Mesh(s,i),n=new THREE.SphereGeometry(.25*t.height,32,32),o=new THREE.Mesh(n,i);o.position.y=1*t.height,a.add(o),this.createAnimeEyes(o,t),this.createMouth(o,t),this.createHair(o,t,e),this.createCostume(a,t,e),t.accessories.forEach(r=>{this.addAccessory(a,o,r,t)}),this.addOutlineEffect(a,t),this.addParticleTrail(a,e),e.mesh=a,this.scene.add(a)}createAnimeEyes(e,t){const s=new THREE.CircleGeometry(.08,32),i=new THREE.MeshBasicMaterial({color:t.eyeColor,transparent:!0,opacity:1}),a=new THREE.Mesh(s,i);a.position.set(-.08,.05,.22),e.add(a);const n=new THREE.CircleGeometry(.03,16),o=new THREE.MeshBasicMaterial({color:16777215,transparent:!0,opacity:.8}),r=new THREE.Mesh(n,o);r.position.set(.02,.02,.01),a.add(r);const l=a.clone();l.position.x=.08,e.add(l),e.userData.eyes={left:a,right:l}}createMouth(e,t){const s=new THREE.TorusGeometry(.04,.01,8,16,Math.PI),i=new THREE.MeshBasicMaterial({color:16739179}),a=new THREE.Mesh(s,i);a.position.set(0,-.05,.22),a.rotation.z=Math.PI,e.add(a),e.userData.mouth=a}createHair(e,t,s){const i=this.getHairConfig(t.hairstyle),a=new THREE.MeshStandardMaterial({color:t.hairColor,roughness:.6,metalness:.2,emissive:t.hairColor,emissiveIntensity:.1});i.strands.forEach((n,o)=>{const r=this.createHairStrand(n),l=new THREE.Mesh(r,a);l.position.copy(n.origin),e.add(l),s.physics.hairBones.push({mesh:l,restPosition:n.origin.clone(),velocity:{x:0,y:0,z:0},mass:n.mass||.1})})}getHairConfig(e){const t={long_straight:{strands:[{origin:{x:-.15,y:.2,z:0},length:.8,segments:12,mass:.15},{origin:{x:-.1,y:.2,z:0},length:.9,segments:12,mass:.15},{origin:{x:0,y:.25,z:0},length:1,segments:12,mass:.2},{origin:{x:.1,y:.2,z:0},length:.9,segments:12,mass:.15},{origin:{x:.15,y:.2,z:0},length:.8,segments:12,mass:.15}]},twin_tails:{strands:[{origin:{x:-.18,y:.15,z:0},length:.7,segments:10,mass:.2},{origin:{x:-.18,y:.12,z:-.05},length:.7,segments:10,mass:.2},{origin:{x:.18,y:.15,z:0},length:.7,segments:10,mass:.2},{origin:{x:.18,y:.12,z:-.05},length:.7,segments:10,mass:.2}]},short_spiky:{strands:[{origin:{x:-.1,y:.25,z:.1},length:.15,segments:3,mass:.05},{origin:{x:0,y:.27,z:.1},length:.18,segments:3,mass:.05},{origin:{x:.1,y:.25,z:.1},length:.15,segments:3,mass:.05},{origin:{x:0,y:.25,z:-.1},length:.12,segments:3,mass:.05}]}};return t[e]||t.long_straight}createHairStrand(e){const t=[];for(let s=0;s<=e.segments;s++){const i=s/e.segments;t.push(new THREE.Vector3(0,-e.length*i,0))}return new THREE.TubeGeometry(new THREE.CatmullRomCurve3(t),e.segments,.02,8,!1)}createCostume(e,t,s){const i=t.costume;let a;switch(i.type){case"dress":a=this.createDress(i.colors);break;case"armor":a=this.createArmor(i.colors);break;case"robes":a=this.createRobes(i.colors);break;default:a=this.createDress(i.colors)}e.add(a),(i.type==="dress"||i.type==="robes")&&s.physics.clothBones.push({mesh:a,restRotation:a.rotation.clone()})}createDress(e){const t=new THREE.ConeGeometry(.5,1,16),s=new THREE.MeshStandardMaterial({color:e[0],roughness:.8,metalness:.1}),i=new THREE.Mesh(t,s);return i.position.y=-.5,i}createArmor(e){const t=new THREE.Group,s=new THREE.BoxGeometry(.6,.8,.3),i=new THREE.MeshStandardMaterial({color:e[0],roughness:.3,metalness:.9,emissive:e[1],emissiveIntensity:.2}),a=new THREE.Mesh(s,i);return a.position.y=.2,t.add(a),t}createRobes(e){const t=new THREE.CylinderGeometry(.4,.6,1.2,16),s=new THREE.MeshStandardMaterial({color:e[0],roughness:.9,metalness:0,emissive:e[1],emissiveIntensity:.1}),i=new THREE.Mesh(t,s);return i.position.y=-.3,i}addAccessory(e,t,s,i){let a;s.includes("wings")?(a=this.createWings(s),a.position.set(0,.5,-.3),e.add(a)):s.includes("ears")?(a=this.createEars(s),t.add(a)):s.includes("tail")?(a=this.createTail(s),a.position.set(0,-.5,-.3),e.add(a)):s==="halo"&&(a=this.createHalo(),a.position.y=.4,t.add(a))}createWings(e){const t=new THREE.Group,s=new THREE.MeshStandardMaterial({color:e.includes("angel")?16777215:9109504,transparent:!0,opacity:.9,emissive:e.includes("angel")?16766720:16711680,emissiveIntensity:.3}),i=new THREE.PlaneGeometry(.5,.8),a=new THREE.Mesh(i,s);a.position.set(-.3,0,0),a.rotation.y=-Math.PI/6,t.add(a);const n=a.clone();return n.position.x=.3,n.rotation.y=Math.PI/6,t.add(n),t}createEars(e){const t=new THREE.Group,s=new THREE.ConeGeometry(.05,.15,8),i=new THREE.MeshStandardMaterial({color:16758465}),a=new THREE.Mesh(s,i);a.position.set(-.15,.15,0),a.rotation.z=-Math.PI/4,t.add(a);const n=a.clone();return n.position.x=.15,n.rotation.z=Math.PI/4,t.add(n),t}createTail(e){const t=new THREE.CylinderGeometry(.05,.02,.6,8),s=new THREE.MeshStandardMaterial({color:9127187}),i=new THREE.Mesh(t,s);return i.rotation.x=Math.PI/4,i}createHalo(){const e=new THREE.TorusGeometry(.15,.02,16,32),t=new THREE.MeshStandardMaterial({color:16766720,emissive:16766720,emissiveIntensity:1});return new THREE.Mesh(e,t)}addOutlineEffect(e,t){const s=new THREE.ShaderMaterial({uniforms:{color:{value:new THREE.Color(t.costume.colors[1]||16766720)},thickness:{value:.03}},vertexShader:`
                uniform float thickness;
                void main() {
                    vec3 newPosition = position + normal * thickness;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
                }
            `,fragmentShader:`
                uniform vec3 color;
                void main() {
                    gl_FragColor = vec4(color, 1.0);
                }
            `,side:THREE.BackSide}),i=e.clone();i.material=s,e.add(i)}addParticleTrail(e,t){const i=new THREE.BufferGeometry,a=new Float32Array(150);for(let r=0;r<150;r++)a[r]=0;i.setAttribute("position",new THREE.BufferAttribute(a,3));const n=new THREE.PointsMaterial({color:t.customization.costume.colors[0],size:.05,transparent:!0,opacity:.6,blending:THREE.AdditiveBlending}),o=new THREE.Points(i,n);e.add(o),t.particleTrail=o}setupAnimations(e){e.animations.mixer={currentAction:null,actions:new Map}}update(e){const t=e/1e3;for(const[s,i]of this.characters)this.updateHairPhysics(i,t),this.updateClothPhysics(i,t),this.updateParticleTrail(i,t),this.updateFacialAnimations(i,t);this.lastUpdate=Date.now()}updateHairPhysics(e,t){const s=this.physics.hairWind,i={y:-9.8};e.physics.hairBones.forEach(a=>{const n={x:s.x+(Math.random()-.5)*.5,y:i.y+s.y,z:s.z+(Math.random()-.5)*.5};a.velocity.x+=n.x*t/a.mass,a.velocity.y+=n.y*t/a.mass,a.velocity.z+=n.z*t/a.mass,a.velocity.x*=.98,a.velocity.y*=.98,a.velocity.z*=.98,a.mesh.position.x+=a.velocity.x*t,a.mesh.position.y+=a.velocity.y*t,a.mesh.position.z+=a.velocity.z*t;const o=5,r=a.restPosition.x-a.mesh.position.x,l=a.restPosition.y-a.mesh.position.y,c=a.restPosition.z-a.mesh.position.z;a.velocity.x+=r*o*t,a.velocity.y+=l*o*t,a.velocity.z+=c*o*t})}updateClothPhysics(e,t){e.physics.clothBones.forEach(s=>{const i=Date.now()/1e3;s.mesh.rotation.x=Math.sin(i*2)*.1,s.mesh.rotation.z=Math.cos(i*1.5)*.05})}updateParticleTrail(e,t){if(!e.particleTrail)return;const s=e.particleTrail.geometry.attributes.position.array;for(let i=s.length-3;i>=3;i-=3)s[i]=s[i-3],s[i+1]=s[i-2],s[i+2]=s[i-1];e.mesh&&(s[0]=e.mesh.position.x,s[1]=e.mesh.position.y,s[2]=e.mesh.position.z),e.particleTrail.geometry.attributes.position.needsUpdate=!0}updateFacialAnimations(e,t){if(e.mesh&&e.mesh.children[0].userData.eyes){const s=Date.now();if(s%3e3<200){const i=e.mesh.children[0].userData.eyes,a=s%200/200,n=1-Math.sin(a*Math.PI)*.8;i.left.scale.y=n,i.right.scale.y=n}}}playAnimation(e,t){const s=this.characters.get(e);s&&(s.animations.current=t)}setExpression(e,t){const s=this.characters.get(e);s&&(s.expressions.current=t)}setWind(e){this.physics.hairWind=e,this.physics.clothWind=e}getCharacter(e){return this.characters.get(e)}removeCharacter(e){const t=this.characters.get(e);t&&t.mesh&&this.scene.remove(t.mesh),this.characters.delete(e)}}class ri{constructor(e){this.canvas=e,this.scene=null,this.camera=null,this.renderer=null,this.clock=new Tt,this.player=null,this.companionManager=null,this.dungeonGenerator=null,this.combatSystem=null,this.particleSystem=null,this.enemyManager=null,this.endlessMode=null,this.saveSystem=null,this.inventorySystem=null,this.questSystem=null,this.achievementSystem=null,this.audioSystem=null,this.skillTreeSystem=null,this.comboSystem=null,this.characterCustomization=null,this.dailyRewards=null,this.tutorialSystem=null,this.craftingSystem=null,this.economySystem=null,this.enhancementSystem=null,this.tradingSystem=null,this.petSystem=null,this.companionAI=null,this.mountSystem=null,this.leaderboardSystem=null,this.guildSystem=null,this.challengeMode=null,this.prestigeSystem=null,this.infiniteDungeonSystem=null,this.fantasyMagicSystem=null,this.seductiveBaddiesSystem=null,this.powerLevelingSystem=null,this.endlessBattleSystem=null,this.enhancedGameMechanics=null,this.autoSaveSystem=null,this.performanceOptimizer=null,this.mainMenuSystem=null,this.safeZoneSystem=null,this.enhancedVisualsSystem=null,this.progressTrackingSystem=null,this.advancedThemeSystem=null,this.advanced3DGraphicsSystem=null,this.weatherSystem=null,this.postProcessingSystem=null,this.advancedParticleSystem=null,this.dayNightCycleSystem=null,this.modernUISystem=null,this.environmentDetailsSystem=null,this.openWorldSystem=null,this.volumetricLightingSystem=null,this.cinematicCameraSystem=null,this.physicsSystem=null,this.characterClassSystem=null,this.npcSystem=null,this.advancedInventorySystem=null,this.animeStyleRenderingSystem=null,this.productionReadinessSystem=null,this.multiplayerSocialSystem=null,this.teleportationSystem=null,this.startingZoneSystem=null,this.advanced3DModelSystem=null,this.advancedUIInterfaceSystem=null,this.biomeGenerationSystem=null,this.biomeSpecificEnemies=null,this.biomeWeatherEffects=null,this.biomeResourcesSystem=null,this.biomeDungeonsSystem=null,this.dodgeAndParrySystem=null,this.comboChainSystem=null,this.proceduralGenerationSystem=null,this.enhanced3DGraphicsSystem=null,this.storylineAndLoreSystem=null,this.weaponSkillSystem=null,this.tacticalCombatAI=null,this.pvpArenaSystem=null,this.guildAndHousingSystem=null,this.matchmakingAndEventsSystem=null,this.advancedGraphicsSystem=null,this.intelligentEnemyAI=null,this.animeCharacterSystem=null,this.isRunning=!1,this.startFromSafeZone=!1,this.currentDungeon=null,this.uiElements={hp:document.getElementById("hp-bar"),hpText:document.getElementById("hp-text"),mp:document.getElementById("mp-bar"),mpText:document.getElementById("mp-text"),companionName:document.getElementById("companion-name"),companionStatus:document.getElementById("companion-status")}}async init(){this.scene=new tt,this.scene.background=new y(1703987),this.scene.fog=new ve(2951758,.02),this.scene.userData.gameEngine=this,this.camera=new Pt(75,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(0,10,15),this.camera.lookAt(0,0,0),this.renderer=new Dt({canvas:this.canvas,antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=Le;const e=new oe(10309341,.4);this.scene.add(e);const t=new U(13073919,.6);t.position.set(10,20,10),t.castShadow=!0,t.shadow.camera.near=.1,t.shadow.camera.far=100,t.shadow.camera.left=-20,t.shadow.camera.right=20,t.shadow.camera.top=20,t.shadow.camera.bottom=-20,t.shadow.mapSize.width=2048,t.shadow.mapSize.height=2048,this.scene.add(t);for(let s=0;s<5;s++){const i=new F(10309341,.5,20);i.position.set(Math.random()*20-10,Math.random()*5+2,Math.random()*20-10),this.scene.add(i)}try{this.companionManager=new st,this.dungeonGenerator=new Lt,this.combatSystem=new Bt(this),this.particleSystem=new $t(this.scene),this.enemyManager=new qt(this.scene,this.dungeonGenerator),this.endlessMode=new Ot(this),this.inventorySystem=new Wt(this),this.questSystem=new Ut(this),this.achievementSystem=new Nt(this),this.audioSystem=new jt(this),this.skillTreeSystem=new Vt(this),this.comboSystem=new Qt(this),this.characterCustomization=new Kt(this),this.dailyRewards=new Zt(this),this.tutorialSystem=new Yt(this)}catch(s){throw console.error("Error initializing core systems:",s),new Error("Failed to initialize core game systems: "+s.message)}try{this.craftingSystem=new Xt(this),this.economySystem=new Jt(this),this.enhancementSystem=new es(this),this.tradingSystem=new ts(this)}catch(s){console.error("Error initializing Phase 4 systems:",s),console.warn("Game will continue without some Phase 4 features")}try{this.petSystem=new ss(this),this.companionAI=new is(this),this.mountSystem=new as(this)}catch(s){console.error("Error initializing Phase 5 systems:",s),console.warn("Game will continue without some Phase 5 features")}try{this.leaderboardSystem=new ns(this),this.guildSystem=new os(this),this.challengeMode=new rs(this)}catch(s){console.error("Error initializing Phase 6 systems:",s),console.warn("Game will continue without some Phase 6 features")}try{this.prestigeSystem=new ls(this),this.infiniteDungeonSystem=new cs(this)}catch(s){console.error("Error initializing Phase 7 systems:",s),console.warn("Game will continue without some Phase 7 features")}try{this.fantasyMagicSystem=new ds,this.seductiveBaddiesSystem=new hs,this.powerLevelingSystem=new ms,this.endlessBattleSystem=new us}catch(s){console.error("Error initializing enhanced RPG systems:",s),console.warn("Game will continue without some enhanced RPG features")}try{this.enhancedGameMechanics=new ps,this.autoSaveSystem=new gs,this.performanceOptimizer=new fs,this.advancedThemeSystem=new xs(this),this.advanced3DGraphicsSystem=new ks(this),this.mainMenuSystem=new ys(this),this.safeZoneSystem=new vs(this),this.enhancedVisualsSystem=new ws(this),this.progressTrackingSystem=new bs(this),this.weatherSystem=new Ss(this),this.postProcessingSystem=new Ms(this),this.advancedParticleSystem=new Cs(this.scene),this.dayNightCycleSystem=new _s(this),this.modernUISystem=new Es(this),this.environmentDetailsSystem=new Ts(this),this.openWorldSystem=new Ps(this),this.volumetricLightingSystem=new Ds(this),this.cinematicCameraSystem=new As(this),this.physicsSystem=new zs(this),this.characterClassSystem=new Rs(this),this.npcSystem=new Fs(this),this.advancedInventorySystem=new Is(this),this.animeStyleRenderingSystem=new Ls(this),this.productionReadinessSystem=new Bs(this),this.multiplayerSocialSystem=new $s(this),this.teleportationSystem=new Gs(this),this.startingZoneSystem=new qs(this),this.advanced3DModelSystem=new Os(this.scene),this.advancedUIInterfaceSystem=new Hs,this.biomeGenerationSystem=new Ws(this.scene,this.camera),this.biomeSpecificEnemies=new Us(this.scene),this.biomeWeatherEffects=new Ns(this.scene,this.camera),this.biomeResourcesSystem=new js(this.scene),this.biomeDungeonsSystem=new Vs(this.scene),this.biomeGenerationSystem.init(),this.biomeWeatherEffects.init(),this.dodgeAndParrySystem=new Qs(this),this.comboChainSystem=new Ks(this),this.weaponSkillSystem=new Js(this),this.tacticalCombatAI=new ei(this),this.pvpArenaSystem=new ti(this),this.guildAndHousingSystem=new si(this),this.matchmakingAndEventsSystem=new ii,this.advancedGraphicsSystem=new ai(this.scene,this.renderer),this.proceduralGenerationSystem=new Zs(this),this.enhanced3DGraphicsSystem=new Ys(this.scene,this.renderer,this.camera),this.storylineAndLoreSystem=new Xs(this),this.intelligentEnemyAI=new ni,this.animeCharacterSystem=new oi(this.scene),this.enhanced3DGraphicsSystem.init(),this.storylineAndLoreSystem.init(1),console.log("🎨 Phase 1 Enhancement Systems initialized (Weather, Post-Processing, Advanced Particles, Day/Night, Modern UI, Environment Details)"),console.log("🌍 Phase 2+ AAA Systems initialized (Open World, Volumetric Lighting, Cinematic Camera, Physics)"),console.log("👤 Phase 3+ Character & World Systems initialized (Character Classes, NPCs, Advanced Inventory)"),console.log("✨ Production Polish Systems initialized (Anime Style Rendering, Production Readiness)"),console.log("👥 Multiplayer & Social Systems initialized (Social, Teleportation, Starting Zone)"),console.log("🎮 Advanced Visuals Systems initialized (3D Models, UI Interface)"),console.log("🌲 Phase 4 Biome Expansion Systems initialized (5 systems: Generation, Enemies, Weather, Resources, Dungeons)"),console.log("⚔️ Phase 5 Combat Enhancement Systems initialized (4 systems: Dodge & Parry, Combo Chains, Weapon Skills, Tactical AI)"),console.log("🏟️ Phase 5.2 PvP Systems initialized (Arena, Matchmaking, Duels, Rankings)"),console.log("🏰 Phase 6 Social Systems initialized (Guilds, Housing, Marketplace, Matchmaking, Events)"),console.log("🎲 Procedural Generation System initialized (Endless content generation)"),console.log("🎨 Enhanced 3D Graphics System initialized (Amazing visuals & models)"),console.log("🌊 Advanced Graphics System initialized (Terrain, Water, Lighting, Animations)"),console.log("📖 Storyline & Lore System initialized (Deep narrative integration)"),console.log("🧠 Phase 8 Intelligent Enemy AI initialized (Behavior trees, learning, pack tactics)"),console.log("✨ Phase 9 Anime Character System initialized (Detailed models, customization, physics)")}catch(s){console.error("Error initializing enhanced mechanics:",s),console.warn("Game will continue without some enhanced mechanics")}try{this.saveSystem=new Ht(this)}catch(s){throw console.error("Error initializing save system:",s),new Error("Failed to initialize save system: "+s.message)}return window.addEventListener("resize",()=>this.onWindowResize()),!0}async createWorld(){if(this.player=new It(this.scene),await this.player.init(),this.dodgeAndParrySystem&&this.dodgeAndParrySystem.init(this.player),this.companionManager.setActiveCompanion("smoke_siren"),this.updateCompanionUI(),this.startFromSafeZone){console.log("🏰 Starting from Safe Zone Hub..."),this.safeZoneSystem.createSafeZone();return}if(this.saveSystem.hasSaveData()){const e=this.saveSystem.getSaveMetadata();if(e){console.log(`💾 Save found: Floor ${e.floor}, Level ${e.level}`);{this.saveSystem.loadGame();return}}}this.currentDungeon=this.dungeonGenerator.generate("crystal_cavern",1),this.loadDungeon(this.currentDungeon),this.enemyManager.spawnEnemiesForDungeon(this.currentDungeon,5),this.endlessMode.start()}loadDungeon(e){this.scene.add(e.floor),this.scene.add(e.walls),e.decorations&&e.decorations.forEach(t=>this.scene.add(t)),console.log(`📍 Loaded dungeon: ${e.name} (${e.biome})`)}start(){this.isRunning=!0,console.log("🎮 Game engine started")}update(){if(!this.isRunning)return;const e=this.clock.getDelta();if(this.player&&(this.player.update(e),this.updatePlayerUI()),this.particleSystem&&this.particleSystem.update(e),this.combatSystem&&this.combatSystem.update(e),this.comboSystem&&this.comboSystem.update(e),this.enemyManager&&this.enemyManager.update(e,this.player),this.endlessMode&&this.endlessMode.update(e),this.questSystem&&this.questSystem.update(e),this.craftingSystem&&this.craftingSystem.update(e),this.economySystem&&this.economySystem.update(e),this.enhancementSystem&&this.enhancementSystem.update(e),this.tradingSystem&&this.tradingSystem.update(e),this.petSystem&&this.petSystem.update(e),this.companionAI&&this.companionAI.update(e),this.mountSystem&&this.mountSystem.update(e),this.leaderboardSystem&&this.leaderboardSystem.update(e),this.guildSystem&&this.guildSystem.update(e),this.challengeMode&&this.challengeMode.update(e),this.prestigeSystem&&this.prestigeSystem.update(e),this.infiniteDungeonSystem&&this.infiniteDungeonSystem.update(e),this.fantasyMagicSystem&&this.fantasyMagicSystem.update(e),this.powerLevelingSystem&&this.powerLevelingSystem.update(e),this.endlessBattleSystem&&this.endlessBattleSystem.update(e),this.enhancedGameMechanics&&this.enhancedGameMechanics.update(e),this.weatherSystem&&this.weatherSystem.update(e),this.advancedParticleSystem&&this.advancedParticleSystem.update(e),this.dayNightCycleSystem&&this.dayNightCycleSystem.update(e),this.modernUISystem&&this.modernUISystem.update(e),this.environmentDetailsSystem&&this.environmentDetailsSystem.update(e),this.openWorldSystem&&this.openWorldSystem.update(e),this.volumetricLightingSystem&&this.volumetricLightingSystem.update(e),this.cinematicCameraSystem&&this.cinematicCameraSystem.update(e),this.physicsSystem&&this.physicsSystem.update(e),this.characterClassSystem&&this.characterClassSystem.update(e),this.npcSystem&&this.npcSystem.update(e),this.advancedInventorySystem&&this.advancedInventorySystem.update(e),this.animeStyleRenderingSystem&&this.animeStyleRenderingSystem.update(e),this.productionReadinessSystem&&this.productionReadinessSystem.update(e),this.multiplayerSocialSystem&&this.multiplayerSocialSystem.update(e),this.teleportationSystem&&this.teleportationSystem.update(e),this.startingZoneSystem&&this.startingZoneSystem.update(e),this.advanced3DModelSystem&&this.advanced3DModelSystem.update(e),this.advancedUIInterfaceSystem&&this.advancedUIInterfaceSystem.update(e),this.biomeGenerationSystem&&this.player&&this.biomeGenerationSystem.update(this.player.mesh.position,e),this.biomeSpecificEnemies&&this.player){const t=this.biomeGenerationSystem?this.biomeGenerationSystem.getCurrentBiome():null;this.biomeSpecificEnemies.update(e,this.player.mesh.position,t)}if(this.biomeWeatherEffects&&this.player&&this.biomeWeatherEffects.update(e,this.player.mesh.position),this.biomeResourcesSystem&&this.biomeResourcesSystem.update(e),this.dodgeAndParrySystem&&this.dodgeAndParrySystem.update(e),this.comboChainSystem&&this.comboChainSystem.update(e),this.weaponSkillSystem&&this.weaponSkillSystem.update(e),this.tacticalCombatAI&&this.player&&this.tacticalCombatAI.update(e,this.player.mesh.position),this.pvpArenaSystem&&this.pvpArenaSystem.update(e),this.guildAndHousingSystem&&this.guildAndHousingSystem.update(e),this.matchmakingAndEventsSystem&&this.matchmakingAndEventsSystem.update(e),this.advancedGraphicsSystem&&this.camera&&this.advancedGraphicsSystem.update(e,this.camera.position),this.intelligentEnemyAI&&this.player){const t={justDodged:this.player.dodgeState?.justDodged||!1,dodgeDirection:this.player.dodgeState?.direction||null,justAttacked:this.player.combatState?.justAttacked||!1,attackType:this.player.combatState?.attackType||null,skillUsed:this.player.combatState?.lastSkill||null};this.intelligentEnemyAI.update(e,this.player.mesh.position,t)}if(this.animeCharacterSystem&&this.animeCharacterSystem.update(e),this.proceduralGenerationSystem&&this.proceduralGenerationSystem.update(e),this.enhanced3DGraphicsSystem&&this.enhanced3DGraphicsSystem.update(e),this.storylineAndLoreSystem&&this.player&&this.storylineAndLoreSystem.update(e,this.player.level||1),this.performanceOptimizer&&this.performanceOptimizer.update(e),this.advancedThemeSystem&&this.advancedThemeSystem.update(e),this.advanced3DGraphicsSystem&&this.advanced3DGraphicsSystem.update(e),this.safeZoneSystem&&this.safeZoneSystem.update(e),this.enhancedVisualsSystem&&this.enhancedVisualsSystem.update(e),this.progressTrackingSystem&&this.progressTrackingSystem.update(e),this.player&&this.player.mesh){const t=this.player.mesh.position.clone();t.y+=10,t.z+=15,this.camera.position.lerp(t,.05),this.camera.lookAt(this.player.mesh.position)}}render(){if(this.renderer&&this.scene&&this.camera)if(this.postProcessingSystem&&this.postProcessingSystem.enabled){const e=this.clock.getDelta();this.postProcessingSystem.render(e)}else this.renderer.render(this.scene,this.camera)}updatePlayerUI(){if(!this.player)return;const e=this.player.stats.hp/this.player.stats.maxHp*100,t=this.player.stats.mp/this.player.stats.maxMp*100;this.uiElements.hp.style.width=`${e}%`,this.uiElements.hpText.textContent=`${this.player.stats.hp}/${this.player.stats.maxHp}`,this.uiElements.mp.style.width=`${t}%`,this.uiElements.mpText.textContent=`${this.player.stats.mp}/${this.player.stats.maxMp}`}updateCompanionUI(){const e=this.companionManager.getActiveCompanion();e&&(this.uiElements.companionName.textContent=e.name,this.uiElements.companionStatus.textContent=e.isOnCooldown?"Cooldown":"Ready")}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}useAbility(e){if(!(!this.player||!this.isRunning))switch(e){case"q":this.castSmokeBlast();break;case"w":this.castShadowStep();break;case"e":this.castEssenceDrain();break;case"r":this.useCompanionAbility();break}}castSmokeBlast(){if(this.player.stats.mp<20)return;this.player.stats.mp-=20,console.log("💨 Smoke Blast!"),this.audioSystem&&this.audioSystem.playSoundEffect("ability",{frequency:440}),this.particleSystem.createSmokeBurst(this.player.mesh.position),this.enemyManager.getEnemies().forEach(t=>{if(t.mesh.position.distanceTo(this.player.mesh.position)<5&&t.isAlive){let i=25;this.comboSystem&&(i=this.comboSystem.onHit(i)),t.takeDamage(i),this.particleSystem&&this.particleSystem.createHitEffect(t.mesh.position),t.isAlive||this.onEnemyKilled(t)}})}castShadowStep(){if(this.player.stats.mp<30)return;this.player.stats.mp-=30,console.log("⚡ Shadow Step!"),this.audioSystem&&this.audioSystem.playSoundEffect("teleport");const e=new v(0,0,-5);this.player.mesh.position.add(e)}castEssenceDrain(){if(this.player.stats.mp<25)return;this.player.stats.mp-=25,console.log("💀 Essence Drain!"),this.audioSystem&&this.audioSystem.playSoundEffect("ability",{frequency:330});const e=this.findNearestEnemy();if(e){let t=15;this.comboSystem&&(t=this.comboSystem.onHit(t)),e.takeDamage(t),this.player.stats.hp=Math.min(this.player.stats.maxHp,this.player.stats.hp+15),this.particleSystem&&(this.particleSystem.createHealEffect(this.player.mesh.position),this.particleSystem.createHitEffect(e.mesh.position,10309341)),e.isAlive||this.onEnemyKilled(e)}}useCompanionAbility(){const e=this.companionManager.getActiveCompanion();e&&!e.isOnCooldown&&(console.log(`💜 ${e.name} Ability!`),e.useAbility(this),this.updateCompanionUI())}findNearestEnemy(){let e=null,t=1/0;return this.enemyManager.getEnemies().forEach(i=>{if(!i.isAlive)return;const a=i.mesh.position.distanceTo(this.player.mesh.position);a<t&&(t=a,e=i)}),e}dropLoot(e){const t=e.isBoss?1:.3;if(Math.random()<t){const s=this.endlessMode?this.endlessMode.currentFloor:1;let i;if(e.isBoss){const a=["rare","epic","legendary"],n=a[Math.floor(Math.random()*a.length)];if(i=this.inventorySystem.generateLoot(s,n),this.inventorySystem.addItem(i),this.audioSystem&&this.audioSystem.playSoundEffect("pickup"),this.achievementSystem&&this.achievementSystem.onItemCollected(n),Math.random()<.5){const o=this.inventorySystem.generateLoot(s,n);this.inventorySystem.addItem(o)}}else i=this.inventorySystem.generateLoot(s),this.inventorySystem.addItem(i),this.audioSystem&&this.audioSystem.playSoundEffect("pickup"),this.achievementSystem&&i&&this.achievementSystem.onItemCollected(i.rarity)}}onEnemyKilled(e){this.audioSystem&&this.audioSystem.playSoundEffect("death"),this.player.gainExp(e.stats.exp),this.endlessMode&&this.endlessMode.onEnemyDefeated(),this.dropLoot(e),this.questSystem&&this.questSystem.onEnemyDefeated(e.isBoss),this.achievementSystem&&this.achievementSystem.onEnemyDefeated(e.isBoss)}}class li{constructor(){this.assets={textures:{},models:{},sounds:{},data:{}},this.totalAssets=0,this.loadedAssets=0}async loadAll(e){const t=[{name:"texture_player",size:"small"},{name:"texture_ground",size:"small"},{name:"texture_wall",size:"small"},{name:"model_player",size:"medium"},{name:"model_companion",size:"medium"},{name:"sound_attack",size:"small"},{name:"sound_ambient",size:"medium"},{name:"data_companions",size:"tiny"},{name:"data_enemies",size:"tiny"},{name:"data_dungeons",size:"tiny"}];this.totalAssets=t.length;for(let s=0;s<t.length;s++){const i=t[s];let a=!1,n=0;const o=3;for(;!a&&n<o;)try{await this.simulateLoad(i.name,i.size),this.loadedAssets++,a=!0,e&&e(this.loadedAssets/this.totalAssets,i.name)}catch{n++,console.warn(`Failed to load ${i.name}, attempt ${n}/${o}`),n>=o?(console.error(`Failed to load ${i.name} after ${o} attempts`),this.loadedAssets++,e&&e(this.loadedAssets/this.totalAssets,i.name)):await new Promise(l=>setTimeout(l,500))}}return console.log("✅ All assets loaded"),!0}async simulateLoad(e,t="medium"){const s={tiny:20,small:50,medium:100,large:200},a=(s[t]||s.medium)+Math.random()*50;return new Promise((n,o)=>{setTimeout(()=>{if(Math.random()<.05){o(new Error(`Network error loading ${e}`));return}e.startsWith("texture")?this.assets.textures[e]={loaded:!0,name:e}:e.startsWith("model")?this.assets.models[e]={loaded:!0,name:e}:e.startsWith("sound")?this.assets.sounds[e]={loaded:!0,name:e}:e.startsWith("data")&&(this.assets.data[e]={loaded:!0,name:e}),n()},a)})}getTexture(e){return this.assets.textures[e]}getModel(e){return this.assets.models[e]}getSound(e){return this.assets.sounds[e]}getData(e){return this.assets.data[e]}}class ci{constructor(e,t){this.canvas=e,this.engine=t,this.keys={},this.mousePosition={x:0,y:0},this.mouseButtons={},this.init()}init(){window.addEventListener("keydown",s=>this.onKeyDown(s)),window.addEventListener("keyup",s=>this.onKeyUp(s)),this.canvas.addEventListener("mousemove",s=>this.onMouseMove(s)),this.canvas.addEventListener("mousedown",s=>this.onMouseDown(s)),this.canvas.addEventListener("mouseup",s=>this.onMouseUp(s)),document.querySelectorAll(".ability-button").forEach(s=>{s.addEventListener("click",()=>{const i=s.getAttribute("data-key");i&&this.engine.useAbility(i)})});const t=document.getElementById("inventory-toggle");t&&t.addEventListener("click",()=>{this.toggleInventory()}),console.log("🎮 Input manager initialized")}onKeyDown(e){if(this.keys[e.key.toLowerCase()]=!0,this.engine.player)switch(e.key.toLowerCase()){case"w":case"arrowup":this.engine.player.moveForward=!0;break;case"s":case"arrowdown":this.engine.player.moveBackward=!0;break;case"a":case"arrowleft":this.engine.player.moveLeft=!0;break;case"d":case"arrowright":this.engine.player.moveRight=!0;break}["q","e","r"].includes(e.key.toLowerCase())&&(this.engine.useAbility(e.key.toLowerCase()),e.preventDefault()),e.key.toLowerCase()==="i"&&(this.toggleInventory(),e.preventDefault())}onKeyUp(e){if(this.keys[e.key.toLowerCase()]=!1,this.engine.player)switch(e.key.toLowerCase()){case"w":case"arrowup":this.engine.player.moveForward=!1;break;case"s":case"arrowdown":this.engine.player.moveBackward=!1;break;case"a":case"arrowleft":this.engine.player.moveLeft=!1;break;case"d":case"arrowright":this.engine.player.moveRight=!1;break}}onMouseMove(e){const t=this.canvas.getBoundingClientRect();this.mousePosition.x=(e.clientX-t.left)/t.width*2-1,this.mousePosition.y=-((e.clientY-t.top)/t.height)*2+1}onMouseDown(e){this.mouseButtons[e.button]=!0,e.button===0&&this.engine.player&&this.engine.player.attack()}onMouseUp(e){this.mouseButtons[e.button]=!1}isKeyPressed(e){return this.keys[e.toLowerCase()]||!1}isMouseButtonPressed(e){return this.mouseButtons[e]||!1}toggleInventory(){const e=document.getElementById("inventory-panel");e&&(e.classList.toggle("visible"),e.classList.contains("visible")&&this.updateInventoryDisplay())}updateInventoryDisplay(){const e=document.getElementById("inventory-content"),t=this.engine.inventorySystem;if(!e||!t)return;e.innerHTML="";const s=document.createElement("div");s.innerHTML="<h4>Equipment</h4>",Object.keys(t.equipment).forEach(a=>{const n=t.equipment[a],o=document.createElement("div");o.className="inventory-item",o.textContent=`${a}: ${n?n.name:"Empty"}`,n&&(o.style.color=n.color),s.appendChild(o)}),e.appendChild(s);const i=document.createElement("div");if(i.innerHTML="<h4>Items</h4>",t.items.length===0){const a=document.createElement("div");a.className="inventory-item",a.textContent="No items",a.style.opacity="0.6",i.appendChild(a)}else t.items.forEach(a=>{const n=document.createElement("div");n.className="inventory-item",n.style.color=a.color,n.textContent=a.name+(a.stack?` x${a.stack}`:""),i.appendChild(n)});e.appendChild(i)}}class di{constructor(){this.canvas=document.getElementById("game-canvas"),this.loadingScreen=document.getElementById("loading-screen"),this.loadingProgress=document.getElementById("loading-progress"),this.loadingText=document.getElementById("loading-text"),this.engine=null,this.assetLoader=new li,this.inputManager=null,this.connectionStatus="online",this.setupConnectionMonitoring(),this.init()}setupConnectionMonitoring(){window.addEventListener("online",()=>{this.connectionStatus="online",console.log("🌐 Connection restored"),this.loadingText.textContent.includes("offline")&&(this.loadingText.textContent="Connection restored, resuming...")}),window.addEventListener("offline",()=>{this.connectionStatus="offline",console.warn("📡 Connection lost"),this.loadingText.textContent="You appear to be offline. Waiting for connection...",this.loadingText.style.color="#ffaa00"})}async init(){const e=setTimeout(()=>{console.error("Loading timeout detected - game may be stuck"),this.loadingText.textContent="Loading is taking longer than expected...",this.loadingText.style.color="#ffaa00"},1e4),t=setTimeout(()=>{console.error("Critical loading timeout - stopping load attempt"),this.handleLoadError(new Error("Loading timeout - game did not load within 30 seconds"))},3e4);try{this.updateLoading(10,"Initializing game engine..."),this.engine=new ri(this.canvas),await Promise.race([this.engine.init(),this.createTimeout(1e4,"Game engine initialization")]),this.updateLoading(30,"Loading assets..."),await Promise.race([this.assetLoader.loadAll((s,i)=>{const a=Math.floor(s*100),n=30+s*50;this.updateLoading(n,`Loading assets: ${a}% ${i?`(${i})`:""}`)}),this.createTimeout(15e3,"Asset loading")]),this.updateLoading(80,"Initializing controls..."),this.inputManager=new ci(this.canvas,this.engine),this.updateLoading(90,"Creating world..."),await Promise.race([this.engine.createWorld(),this.createTimeout(1e4,"World creation")]),this.updateLoading(100,"Ready!"),clearTimeout(e),clearTimeout(t),setTimeout(()=>{this.loadingScreen.classList.add("hidden"),this.start(),this.setupHealthChecks()},500)}catch(s){clearTimeout(e),clearTimeout(t),this.handleLoadError(s)}}createTimeout(e,t){return new Promise((s,i)=>{setTimeout(()=>i(new Error(`${t} timed out after ${e}ms`)),e)})}handleLoadError(e){console.error("Failed to initialize game:",e),console.error("Stack trace:",e.stack),this.loadingText.innerHTML=`
            ⚠️ Error loading game<br>
            <span style="font-size: 0.8em; color: #ff6b9d;">${e.message}</span><br>
            <span style="font-size: 0.7em; margin-top: 10px; display: block;">
                Please refresh the page to try again.<br>
                If the problem persists, try clearing your browser cache.
            </span>
        `,this.loadingText.style.color="#ff6b9d",this.loadingProgress.style.background="linear-gradient(90deg, #ff0844, #ff6b9d)"}updateLoading(e,t){this.loadingProgress.style.width=`${e}%`,this.loadingText.textContent=t}start(){console.log("🎮 Dynasty of Emberveil - Game Started!"),this.engine.start(),window.gameEngine=this.engine,window.gameEngine.inputManager=this.inputManager,this.engine.mainMenuSystem&&this.engine.mainMenuSystem.show(),this.gameLoop()}setupHealthChecks(){this.healthCheckInterval=setInterval(()=>{if(this.engine&&this.engine.isRunning&&(this.engine.player||console.warn("⚠️ Player reference lost, attempting recovery..."),this.engine.performanceOptimizer)){const e=this.engine.performanceOptimizer.currentFPS||0;e<10&&e>0&&console.warn(`⚠️ Low FPS detected: ${e.toFixed(1)}`)}},3e4)}gameLoop(){if(requestAnimationFrame(()=>this.gameLoop()),this.engine)try{this.engine.update(),this.engine.render()}catch(e){console.error("Error in game loop:",e)}}handleVisibilityChange(){document.hidden?(console.log("⏸️ Game paused (tab hidden)"),this.engine&&(this.engine.isRunning=!1)):(console.log("▶️ Game resumed (tab visible)"),this.engine&&(this.engine.isRunning=!0))}}window.addEventListener("DOMContentLoaded",()=>{const h=new di;document.addEventListener("visibilitychange",()=>{h.handleVisibilityChange()}),window.addEventListener("error",e=>{console.error("Uncaught error:",e.error),e.preventDefault()}),window.addEventListener("unhandledrejection",e=>{console.error("Unhandled promise rejection:",e.reason),e.preventDefault()})});
